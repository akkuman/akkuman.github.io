<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Windows on Akkuman 的博客</title>
    <link>//hacktech.cn/tags/windows/</link>
    <description>Recent content in Windows on Akkuman 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 21 Sep 2018 07:55:11 +0000</lastBuildDate><atom:link href="//hacktech.cn/tags/windows/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>windows中的软链接硬链接等</title>
      <link>//hacktech.cn/2018/09/21/windows-file-dir-link/</link>
      <pubDate>Fri, 21 Sep 2018 07:55:11 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/09/21/windows-file-dir-link/</guid>
      <description>学校嘛，有些时候还是得逆逆上网客户端啥的，并且学校的不少工作，这Windows的需求还是挺强的，之前Win10的体验并不是太好，不过时隔这么久，打算从7升级到10了，恰好系统也该换了。
首先是命令行的关注，在家里使用了太久的marjaro，逐渐转为开发，以前对windows的命令行不关注也变为关注了，PowerShell安装了scoop，可以一键安装不少工具了，但是有一个痛点就是，以前对用户目录不关注，但是linux用久了反而觉得用户目录好用挖，我想在在命令行下切到我快捷方式指向的目录，但是是不行的，然后了解了一下这方面，就像是linux下的软链接硬链接一样。
使用PowerShell 软链接 1 New-Item -ItemType SymbolicLink -Path C:\\image -Target C:\\source.txt 硬链接 1 New-Item -ItemType HardLink -Path C:\\image.txt -Target C:\\source.txt Junction windows中文件与文件夹是完全不同的两种类型，创建文件夹链接不可以使用 HardLink ，但是可以使用 Junction
1 New-Item -ItemType Junction -Path C:\\test\_image -Target C:\\test\_source 虽然powershell可以建立，但是命令还是很繁琐，cmd下有个工具mklink
使用CMD cmd下有个好用的工具mklink
1 2 3 4 5 6 7 8 9 C:\\&amp;gt;mklink 创建符号链接。 MKLINK \[\[/D\] | \[/H\] |\[/J\]\] Link Target /D 创建目录符号链接。默认为文件符号链接。 /H 创建硬链接而非符号链接。 /J 创建目录链接。 Link 指定新的符号链接名称。 Target 指定新链接引用的路径（绝对或相对）。 软链接和硬链接的区别 其实这部分和linux中的是差不多的
符号(软)链接（Symbolic link）
执行命令 mklink link_name target_name 创建链接后的图标和快捷方式很像 在系统中不占用空间 在文件系统中不是一个单独的文件 在操作系统层解析（！？） 如果源文件被删除了，链接就没用了 移除源文件不会影响符号链接 移除链接文件也不会影响源文件 硬链接（Hard link）</description>
    </item>
    
    <item>
      <title>Win32汇编学习(7)：鼠标输入消息</title>
      <link>//hacktech.cn/2018/02/09/win32asm7-mouse-input-msg/</link>
      <pubDate>Fri, 09 Feb 2018 22:29:19 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/09/win32asm7-mouse-input-msg/</guid>
      <description>&lt;p&gt;这次我们将学习如何在我们的窗口过程函数中处理鼠标按键消息。例子演示了如何等待鼠标左键按下消息，我们将在按下的位置显示一个字符串。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Win32汇编学习(6)：键盘输入消息</title>
      <link>//hacktech.cn/2018/02/08/win32asm6-keyboard-input-msg/</link>
      <pubDate>Thu, 08 Feb 2018 17:53:59 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/08/win32asm6-keyboard-input-msg/</guid>
      <description>&lt;p&gt;这次，我们将要学习WINDOWS程序是如何处理键盘消息的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Win32汇编学习(5)：绘制文本2</title>
      <link>//hacktech.cn/2018/02/08/win32-asm-5-draw-text/</link>
      <pubDate>Thu, 08 Feb 2018 15:55:46 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/08/win32-asm-5-draw-text/</guid>
      <description>&lt;p&gt;这次我们将学习有关文本的诸多属性如字体和颜色等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Win32汇编学习(4)：绘制文本</title>
      <link>//hacktech.cn/2018/02/07/win32-asm-4-draw-text/</link>
      <pubDate>Wed, 07 Feb 2018 17:11:25 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/07/win32-asm-4-draw-text/</guid>
      <description>&lt;p&gt;这次，我们将学习如何在窗口的客户区“绘制”字符串。我们还将学习关于“设备环境”的概念。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Win32汇编学习(3)：简单的窗口</title>
      <link>//hacktech.cn/2018/02/06/win32%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-3-%E7%AE%80%E5%8D%95%E7%9A%84%E7%AA%97%E5%8F%A3/</link>
      <pubDate>Tue, 06 Feb 2018 21:12:50 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/06/win32%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-3-%E7%AE%80%E5%8D%95%E7%9A%84%E7%AA%97%E5%8F%A3/</guid>
      <description>&lt;p&gt;这次我们将写一个 Windows 程序，它会在桌面显示一个标准的窗口，以此根据代码来学习如何创建一个简单的窗口。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>怎样建立你自己的MASM导入库</title>
      <link>//hacktech.cn/2018/02/06/%E6%80%8E%E6%A0%B7%E5%BB%BA%E7%AB%8B%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84masm%E5%AF%BC%E5%85%A5%E5%BA%93/</link>
      <pubDate>Tue, 06 Feb 2018 20:00:49 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/06/%E6%80%8E%E6%A0%B7%E5%BB%BA%E7%AB%8B%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84masm%E5%AF%BC%E5%85%A5%E5%BA%93/</guid>
      <description>&lt;p&gt;by Iczelion （翻译：花心萝卜yqzq@163.net) 9.5.2000&lt;/p&gt;
&lt;p&gt;这篇短文是讲述关于建立MASM导入库（import libraries）技巧，我假设你已经知道什么是导入库。在下面，我将集中讲述建立MASM导入库的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>win32 汇编学习(2)：消息框</title>
      <link>//hacktech.cn/2018/02/05/win32-%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-2-%E6%B6%88%E6%81%AF%E6%A1%86/</link>
      <pubDate>Mon, 05 Feb 2018 17:04:32 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/05/win32-%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-2-%E6%B6%88%E6%81%AF%E6%A1%86/</guid>
      <description>&lt;p&gt;这一次，我们将用汇编语言写一个 Windows 程序，程序运行时将弹出一个消息框并显示&amp;quot;你好，我的第一个Win32汇编程序&amp;quot;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Win32汇编学习(1)：基本概念</title>
      <link>//hacktech.cn/2018/02/05/win32%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 05 Feb 2018 13:45:40 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/05/win32%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;h2 id=&#34;背景知识&#34;&gt;背景知识&lt;/h2&gt;
&lt;p&gt;Windows 把每一个 Win32 应用程序放到分开的虚拟地址空间中去运行，也就是说每一个应用程序都拥有其相互独立的 4GB 地址空间，当然这倒不是说它们都拥有 4GB 的物理地址空间，而只是说能够在 4GB 的范围内寻址。操作系统将会在应用程序运行时完成 4GB 的虚拟地址和物理内存地址间的转换。这就要求编写应用程序时必须格守 Windows 的规范，否则极易引起内存的保护模式错误。而过去的 Win16 内存模式下，所有的应用程序都运行于同一个 4GB 地址空间，它们可以彼此&amp;quot;看&amp;quot;到别的程序的内容，这极易导致一个应用程序破坏另一个应用程序甚至是操作系统的数据或代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>win32汇编(ASM)学习资源</title>
      <link>//hacktech.cn/2018/02/04/win32%E6%B1%87%E7%BC%96-asm-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</link>
      <pubDate>Sun, 04 Feb 2018 22:44:06 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/04/win32%E6%B1%87%E7%BC%96-asm-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</guid>
      <description>&lt;p&gt;一些win32汇编下学习资源与工具收集&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows进程的内核对象句柄表</title>
      <link>//hacktech.cn/2018/02/04/windows%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%86%85%E6%A0%B8%E5%AF%B9%E8%B1%A1%E5%8F%A5%E6%9F%84%E8%A1%A8/</link>
      <pubDate>Sun, 04 Feb 2018 17:22:00 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/04/windows%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%86%85%E6%A0%B8%E5%AF%B9%E8%B1%A1%E5%8F%A5%E6%9F%84%E8%A1%A8/</guid>
      <description>&lt;p&gt;当一个进程被初始化时,系统要为它分配一个句柄表。该句柄表只用于内核对象 ,不用于用户对象或GDI对象。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1foaobsqowpj20nz05c0t3.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
