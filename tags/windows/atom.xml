<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Windows on Akkuman 的技术博客</title>
    <link>https://www.hacktech.cn/tags/windows/</link>
    <description>Recent content in Windows on Akkuman 的技术博客</description>
    <generator>Hugo -- 0.148.0</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 12 Jun 2025 14:33:32 +0800</lastBuildDate>
    <atom:link href="https://www.hacktech.cn/tags/windows/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 cargo-xwin 交叉编译 rust 程序</title>
      <link>https://www.hacktech.cn/post/2025/06/crosscompile-rust-programs-using-cargoxwin-ziwjqv/</link>
      <pubDate>Thu, 12 Jun 2025 14:16:42 +0800</pubDate>
      <guid>https://www.hacktech.cn/post/2025/06/crosscompile-rust-programs-using-cargoxwin-ziwjqv/</guid>
      <description>本文介绍了使用cargo-xwin工具交叉编译Rust程序到Windows x86平台时遇到的问题及解决方案。通过创建Docker容器环境、安装必要依赖（clang/llvm）、配置Rust国内镜像源，最终使用 cargo-xwin进行编译。虽然仍出现头文件缺失错误，但提供了完整的交叉编译环境搭建流程和调试以及最终解决方案。</description>
    </item>
    <item>
      <title>windows中的软链接硬链接等</title>
      <link>https://www.hacktech.cn/post/2018/09/windows-file-dir-link/</link>
      <pubDate>Fri, 21 Sep 2018 07:55:11 +0000</pubDate>
      <guid>https://www.hacktech.cn/post/2018/09/windows-file-dir-link/</guid>
      <description>&lt;p&gt;学校嘛，有些时候还是得逆逆上网客户端啥的，并且学校的不少工作，这Windows的需求还是挺强的，之前Win10的体验并不是太好，不过时隔这么久，打算从7升级到10了，恰好系统也该换了。&lt;/p&gt;
&lt;p&gt;首先是命令行的关注，在家里使用了太久的marjaro，逐渐转为开发，以前对windows的命令行不关注也变为关注了，PowerShell安装了scoop，可以一键安装不少工具了，但是有一个痛点就是，以前对用户目录不关注，但是linux用久了反而觉得用户目录好用挖，我想在在命令行下切到我快捷方式指向的目录，但是是不行的，然后了解了一下这方面，就像是linux下的软链接硬链接一样。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;使用powershell&#34;&gt;使用PowerShell&lt;/h2&gt;
&lt;h3 id=&#34;软链接&#34;&gt;软链接&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New-Item -ItemType SymbolicLink -Path C:\\image -Target C:\\source.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;硬链接&#34;&gt;硬链接&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New-Item -ItemType HardLink -Path C:\\image.txt -Target C:\\source.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;junction&#34;&gt;Junction&lt;/h2&gt;
&lt;p&gt;windows中文件与文件夹是完全不同的两种类型，创建文件夹链接不可以使用 &lt;code&gt;HardLink&lt;/code&gt; ，但是可以使用 &lt;code&gt;Junction&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;New-Item -ItemType Junction -Path C:\\test\_image -Target C:\\test\_source
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;虽然powershell可以建立，但是命令还是很繁琐，cmd下有个工具mklink&lt;/p&gt;
&lt;h2 id=&#34;使用cmd&#34;&gt;使用CMD&lt;/h2&gt;
&lt;p&gt;cmd下有个好用的工具mklink&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C:\\&amp;gt;mklink
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;创建符号链接。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MKLINK \[\[/D\] | \[/H\] |\[/J\]\] Link Target
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /D 创建目录符号链接。默认为文件符号链接。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /H 创建硬链接而非符号链接。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /J 创建目录链接。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Link 指定新的符号链接名称。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Target 指定新链接引用的路径（绝对或相对）。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;软链接和硬链接的区别&#34;&gt;软链接和硬链接的区别&lt;/h2&gt;
&lt;p&gt;其实这部分和linux中的是差不多的&lt;/p&gt;</description>
    </item>
    <item>
      <title>Win32汇编学习(7)：鼠标输入消息</title>
      <link>https://www.hacktech.cn/post/2018/02/win32asm7-mouse-input-msg/</link>
      <pubDate>Fri, 09 Feb 2018 22:29:19 +0000</pubDate>
      <guid>https://www.hacktech.cn/post/2018/02/win32asm7-mouse-input-msg/</guid>
      <description>&lt;p&gt;这次我们将学习如何在我们的窗口过程函数中处理鼠标按键消息。例子演示了如何等待鼠标左键按下消息，我们将在按下的位置显示一个字符串。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Win32汇编学习(6)：键盘输入消息</title>
      <link>https://www.hacktech.cn/post/2018/02/win32asm6-keyboard-input-msg/</link>
      <pubDate>Thu, 08 Feb 2018 17:53:59 +0000</pubDate>
      <guid>https://www.hacktech.cn/post/2018/02/win32asm6-keyboard-input-msg/</guid>
      <description>&lt;p&gt;这次，我们将要学习WINDOWS程序是如何处理键盘消息的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Win32汇编学习(5)：绘制文本2</title>
      <link>https://www.hacktech.cn/post/2018/02/win32-asm-5-draw-text/</link>
      <pubDate>Thu, 08 Feb 2018 15:55:46 +0000</pubDate>
      <guid>https://www.hacktech.cn/post/2018/02/win32-asm-5-draw-text/</guid>
      <description>&lt;p&gt;这次我们将学习有关文本的诸多属性如字体和颜色等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Win32汇编学习(4)：绘制文本</title>
      <link>https://www.hacktech.cn/post/2018/02/win32-asm-4-draw-text/</link>
      <pubDate>Wed, 07 Feb 2018 17:11:25 +0000</pubDate>
      <guid>https://www.hacktech.cn/post/2018/02/win32-asm-4-draw-text/</guid>
      <description>&lt;p&gt;这次，我们将学习如何在窗口的客户区“绘制”字符串。我们还将学习关于“设备环境”的概念。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Win32汇编学习(3)：简单的窗口</title>
      <link>https://www.hacktech.cn/post/2018/02/win32-asm-study-3-simple-msgbox/</link>
      <pubDate>Tue, 06 Feb 2018 21:12:50 +0000</pubDate>
      <guid>https://www.hacktech.cn/post/2018/02/win32-asm-study-3-simple-msgbox/</guid>
      <description>&lt;p&gt;这次我们将写一个 Windows 程序，它会在桌面显示一个标准的窗口，以此根据代码来学习如何创建一个简单的窗口。&lt;/p&gt;</description>
    </item>
    <item>
      <title>怎样建立你自己的MASM导入库</title>
      <link>https://www.hacktech.cn/post/2018/02/how-to-build-your-own-masm-import-library/</link>
      <pubDate>Tue, 06 Feb 2018 20:00:49 +0000</pubDate>
      <guid>https://www.hacktech.cn/post/2018/02/how-to-build-your-own-masm-import-library/</guid>
      <description>&lt;p&gt;by Iczelion （翻译：花心萝卜yqzq@163.net) 9.5.2000&lt;/p&gt;
&lt;p&gt;这篇短文是讲述关于建立MASM导入库（import libraries）技巧，我假设你已经知道什么是导入库。在下面，我将集中讲述建立MASM导入库的方法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>win32 汇编学习(2)：消息框</title>
      <link>https://www.hacktech.cn/post/2018/02/win32-asm-2-message-box/</link>
      <pubDate>Mon, 05 Feb 2018 17:04:32 +0000</pubDate>
      <guid>https://www.hacktech.cn/post/2018/02/win32-asm-2-message-box/</guid>
      <description>&lt;p&gt;这一次，我们将用汇编语言写一个 Windows 程序，程序运行时将弹出一个消息框并显示&amp;quot;你好，我的第一个Win32汇编程序&amp;quot;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Win32汇编学习(1)：基本概念</title>
      <link>https://www.hacktech.cn/post/2018/02/win32-asm-study-1-basic-concept/</link>
      <pubDate>Mon, 05 Feb 2018 13:45:40 +0000</pubDate>
      <guid>https://www.hacktech.cn/post/2018/02/win32-asm-study-1-basic-concept/</guid>
      <description>&lt;h2 id=&#34;背景知识&#34;&gt;背景知识&lt;/h2&gt;
&lt;p&gt;Windows 把每一个 Win32 应用程序放到分开的虚拟地址空间中去运行，也就是说每一个应用程序都拥有其相互独立的 4GB 地址空间，当然这倒不是说它们都拥有 4GB 的物理地址空间，而只是说能够在 4GB 的范围内寻址。操作系统将会在应用程序运行时完成 4GB 的虚拟地址和物理内存地址间的转换。这就要求编写应用程序时必须格守 Windows 的规范，否则极易引起内存的保护模式错误。而过去的 Win16 内存模式下，所有的应用程序都运行于同一个 4GB 地址空间，它们可以彼此&amp;quot;看&amp;quot;到别的程序的内容，这极易导致一个应用程序破坏另一个应用程序甚至是操作系统的数据或代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>win32汇编(ASM)学习资源</title>
      <link>https://www.hacktech.cn/post/2018/02/win32-asm-study-resource/</link>
      <pubDate>Sun, 04 Feb 2018 22:44:06 +0000</pubDate>
      <guid>https://www.hacktech.cn/post/2018/02/win32-asm-study-resource/</guid>
      <description>&lt;p&gt;一些win32汇编下学习资源与工具收集&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows进程的内核对象句柄表</title>
      <link>https://www.hacktech.cn/post/2018/02/windows-process-kernel-object-handle-table/</link>
      <pubDate>Sun, 04 Feb 2018 17:22:00 +0000</pubDate>
      <guid>https://www.hacktech.cn/post/2018/02/windows-process-kernel-object-handle-table/</guid>
      <description>&lt;p&gt;当一个进程被初始化时,系统要为它分配一个句柄表。该句柄表只用于内核对象 ,不用于用户对象或GDI对象。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1foaobsqowpj20nz05c0t3.jpg&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
