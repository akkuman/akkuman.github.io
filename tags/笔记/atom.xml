<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>笔记 on Akkuman 的博客</title>
    <link>//hacktech.cn/tags/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 笔记 on Akkuman 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 10 Dec 2021 09:00:00 +0000</lastBuildDate><atom:link href="//hacktech.cn/tags/%E7%AC%94%E8%AE%B0/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自建bitwarden备份同步到坚果云</title>
      <link>//hacktech.cn/2021/12/10/selfhost-bitwarden-sync-nutstore/</link>
      <pubDate>Fri, 10 Dec 2021 09:00:00 +0000</pubDate>
      
      <guid>//hacktech.cn/2021/12/10/selfhost-bitwarden-sync-nutstore/</guid>
      <description>因为bitwarden的氪金玩家才能使用双因子认证，恰好手上有个vps，搭建个bitwarden服务端来使用2fa
自建bitwarden vps比较垃圾，所以选用一个资源开销比较小的服务端比较有必要，我这里选择的是 https://github.com/mprasil/bitwarden_rs
这里采用 docker-compose 进行部署
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 version: &amp;#39;3&amp;#39; services: bitwarden: image: bitwardenrs/server:latest container_name: bitwarden restart: unless-stopped volumes: - ./bw-data:/data environment: - WEBSOCKET_ENABLED=true - SIGNUPS_ALLOWED=true - WEB_VAULT_ENABLED=true - ADMIN_TOKEN=xxxxxxxxxxxxxxxxxxxx ports: - &amp;#34;127.0.0.1:8889:80&amp;#34; - &amp;#34;127.0.0.1:8810:3012&amp;#34; 其中的3012是websocket通知端口
WEBSOCKET_ENABLED 代表启用 websocket
SIGNUPS_ALLOWED 代表是否启用注册
WEB_VAULT_ENABLED 代表是否启用web界面
ADMIN_TOKEN 是管理界面的密码，用来启用管理界面，启用后可通过 [https://你的域名/admin](https://你的域名/admin) 进行访问
然后我们需要创建一个反向代理，这里我使用的是 nginx，下面给出 nginx 配置
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 upstream bitwarden-default { server 127.</description>
    </item>
    
    <item>
      <title>notion实现自动发布到hugo github博客</title>
      <link>//hacktech.cn/2021/12/10/notion-to-github-blog/</link>
      <pubDate>Fri, 10 Dec 2021 07:51:00 +0000</pubDate>
      
      <guid>//hacktech.cn/2021/12/10/notion-to-github-blog/</guid>
      <description>notion是用来记录笔记的，hugo是我用来作为github博客自动构建发布的
我目前设置了一个github action是：当我的博客仓库hugo分支有push事件时，自动构建文章发布到master分支，并且发布到博客园。
但是会有这样的不便：在notion中写了一篇笔记或文章，想要发布到github静态博客上，发现需要先将文章转化成markdown，图片需要上传到图床，然后贴入markdown，然后再推送到github，等待action自动构建静态博客
既然我使用notion记录笔记，何不继续All-in-one，将notion作为我的博客发布工具。
只需要在 notion 中建立一个用于博客发布的 database，然后写完笔记后填入这个 database，再使用一些手段触发 CI 即可完成博客文章的发布
工具介绍 说干就干，写了两个工具
https://github.com/akkuman/notiontomd
https://github.com/akkuman/notion_to_github_blog
notiontomd 是用来notion中的某个page转化为markdown的库，当然，当前支持的block是有限的，详细信息可以查看该仓库
notion_to_github_blog则是一个github action模板，用来自动从指定格式的database中拉取需要更新发布的文章，然后利用 notiontomd 转化为markdown，然后推送到github仓库，再触发另外的github aciton进行博客静态文件构建
使用 怎么建仓怎么自动从某分支拉取推到github pages所在分支我就不展开说明了，感兴趣的可以去网上搜索相关资料，本文所关注的流程是从notion database到博客源文件
基础环境 本文所涉及到的例子环境可以前往我的博客仓库 https://github.com/akkuman/akkuman.github.io 进行查看
hugo分支用来存放博客源文件，其中有一个github action的功能是push时触发，然后自动构建推送到master分支
master分支用来存放hugo构建之后生成的站点静态文件
博客相关的图片我会推送到 https://github.com/akkuman/pic 仓库
hugo作为主分支，master设置为github pages分支（原因后面描述）
workflows编写 要使用该action，首先你需要在 notion 中创建一个 database，这个 database 需要有几个字段，字段名如下:
Name (title): 文章标题
Article (text): 文章链接
MDFilename (text): 创建的 markdown 文件名
Category (select): 文章分类
Tags (multi_select): 文章标签
IsPublish (checkbox): 文章是否发布
NeedUpdate (checkbox): 文章是否有更新
CreateAt (Created time): 创建时间</description>
    </item>
    
    <item>
      <title>将newsletter转为rss</title>
      <link>//hacktech.cn/2021/12/06/newsletter2rss/</link>
      <pubDate>Mon, 06 Dec 2021 08:09:00 +0000</pubDate>
      
      <guid>//hacktech.cn/2021/12/06/newsletter2rss/</guid>
      <description>相关的开源项目 https://github.com/leafac/kill-the-newsletter
作者提供了一个网站 https://kill-the-newsletter.com/ 来提供服务，截至20211119，至少已经提供了两年的服务了，所以稳定性还可
下面就是使用方法了
选择一个你要订阅的newsletter，比如 https://random-lab.ghost.io/
打开 https://kill-the-newsletter.com/ ，输入你要给该订阅取的名字，比如我输入 1000小食报 ，然后点击 create inbox
然后会提供给你一个邮箱和一个rss订阅地址
将邮箱地址填入第一步中的订阅邮箱
将rss订阅地址加到你的rss阅读器
一般情况下你会收到的第一个订阅消息是叫你确认订阅，点击确认地址即可
下面说下原理：
首先需要有个邮服，然后每次创建inbox的时候随机生成一个邮箱，并且将此邮箱的收件箱内容转为rss订阅暴露出来</description>
    </item>
    
    <item>
      <title>64位通用寄存器及其一般作用</title>
      <link>//hacktech.cn/2018/05/23/64bit-register-and-rule/</link>
      <pubDate>Wed, 23 May 2018 20:24:00 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/05/23/64bit-register-and-rule/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>对话框和普通窗口工作方式的区别</title>
      <link>//hacktech.cn/2018/02/13/difference-between-dialog-and-window/</link>
      <pubDate>Tue, 13 Feb 2018 21:59:00 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/13/difference-between-dialog-and-window/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Win32汇编学习(11)：对话框(2)</title>
      <link>//hacktech.cn/2018/02/13/win32-asm-study-11/</link>
      <pubDate>Tue, 13 Feb 2018 18:23:00 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/13/win32-asm-study-11/</guid>
      <description>&lt;p&gt;我们将进一步学习对话框，探讨如何把对话框当成输入设备。如果您看了前一篇文章，那就会发现这次的例子只有少量的改动，就是把我们的对话框窗口附属到主窗口上。另外，我们还要学习通用对话框的用法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Win32汇编学习(10)：对话框(1)</title>
      <link>//hacktech.cn/2018/02/13/win32-asm-study-10/</link>
      <pubDate>Tue, 13 Feb 2018 17:16:00 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/13/win32-asm-study-10/</guid>
      <description>&lt;p&gt;现在我们开始学习一些有关GUI编程的有趣的部分：以对话框为主要界面的应用程序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Win32汇编学习(9)：窗口控件</title>
      <link>//hacktech.cn/2018/02/12/win32-asm-study-9/</link>
      <pubDate>Mon, 12 Feb 2018 22:49:00 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/12/win32-asm-study-9/</guid>
      <description>&lt;p&gt;这次我们将探讨控件，这些控件是我们程序主要的输入输出设备。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Win32汇编学习(8)：菜单</title>
      <link>//hacktech.cn/2018/02/12/win32-asm-study-8/</link>
      <pubDate>Mon, 12 Feb 2018 20:24:00 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/12/win32-asm-study-8/</guid>
      <description>&lt;p&gt;这次我们将在我们的应用程序中加入一个菜单。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FASM学习中的一些表格&#34;</title>
      <link>//hacktech.cn/2018/02/10/fasm-study-20180210/</link>
      <pubDate>Sat, 10 Feb 2018 19:53:00 +0000</pubDate>
      
      <guid>//hacktech.cn/2018/02/10/fasm-study-20180210/</guid>
      <description>Size operator Registers Data directives Conditions(jmp助记符) </description>
    </item>
    
    <item>
      <title>size_t和unsigned int区别</title>
      <link>//hacktech.cn/2017/12/03/compare-size-t-and-unsigned-int/</link>
      <pubDate>Sun, 03 Dec 2017 22:46:00 +0000</pubDate>
      
      <guid>//hacktech.cn/2017/12/03/compare-size-t-and-unsigned-int/</guid>
      <description>size_t和unsigned int有所不同,size_t的取值range是目标平台下最大可能的数组尺寸,一些平台下size_t的范围小于int的正数范围,又或者大于unsigned int.最典型的,在x64下,int还是4,但size_t是8.这意味着你在x64下最大可能开辟的数组尺寸是2^64.如果你使用int或者unsigned int,那么在x64下如果你的代码中全部使用uint作为数组的尺寸标记,那么你就会失去控制 2^32 尺寸以上的数组的机会.虽然现在在x64上开辟一个大于 2^32 大小的连续数组依然是个不大可能的事情,但是&amp;hellip;&amp;hellip;&amp;hellip;.
“640K内存对于任何人来说都足够了”&amp;mdash;-比尔盖茨
链接：https://www.zhihu.com/question/24773728/answer/28920149</description>
    </item>
    
  </channel>
</rss>
